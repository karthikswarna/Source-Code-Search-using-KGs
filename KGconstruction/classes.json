{
    "classes": [
        {
            "name": "AboutEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AboutEvent.html",
            "description": "Event sent when the application is asked to open its about window. "
        },
        {
            "name": "AboutHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AboutHandler.html",
            "description": "An implementer receives notification when the app is asked to show its about dialog. "
        },
        {
            "name": "AbsentInformationException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html",
            "description": "Thrown to indicate line number or variable information is not available. "
        },
        {
            "name": "AbstractAction",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/AbstractAction.html",
            "description": "This class provides default implementations for the JFC Action interface. "
        },
        {
            "name": "AbstractAnnotationValueVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor14.html",
            "description": "A skeletal visitor for annotation values with default behavior appropriate for source version RELEASE_14 . "
        },
        {
            "name": "AbstractAnnotationValueVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html",
            "description": "A skeletal visitor for annotation values with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "AbstractAnnotationValueVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor7.html",
            "description": "A skeletal visitor for annotation values with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "AbstractAnnotationValueVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor8.html",
            "description": "A skeletal visitor for annotation values with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "AbstractAnnotationValueVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor9.html",
            "description": "A skeletal visitor for annotation values with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "AbstractBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/AbstractBorder.html",
            "description": "A class that implements an empty border with no size. "
        },
        {
            "name": "AbstractButton",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/AbstractButton.html",
            "description": "Defines common behaviors for buttons and menu items. "
        },
        {
            "name": "AbstractCellEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/AbstractCellEditor.html",
            "description": "A base class for CellEditors , providing default implementations for the methods in the CellEditor interface except getCellEditorValue() . "
        },
        {
            "name": "AbstractChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/AbstractChronology.html",
            "description": "An abstract implementation of a calendar system, used to organize and identify dates. "
        },
        {
            "name": "AbstractCollection",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractCollection.html",
            "description": "This class provides a skeletal implementation of the Collection interface, to minimize the effort required to implement this interface. "
        },
        {
            "name": "AbstractColorChooserPanel",
            "package": "javax.swing.colorchooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/colorchooser/AbstractColorChooserPanel.html",
            "description": "This is the abstract superclass for color choosers. "
        },
        {
            "name": "AbstractDocument",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AbstractDocument.html",
            "description": "An implementation of the document interface to serve as a basis for implementing various kinds of documents. "
        },
        {
            "name": "AbstractDocument.AttributeContext",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html",
            "description": "An interface that can be used to allow MutableAttributeSet implementations to use pluggable attribute compression techniques. "
        },
        {
            "name": "AbstractDocument.Content",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html",
            "description": "Interface to describe a sequence of character content that can be edited. "
        },
        {
            "name": "AbstractDocument.ElementEdit",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AbstractDocument.ElementEdit.html",
            "description": "An implementation of ElementChange that can be added to the document event. "
        },
        {
            "name": "AbstractElementVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor14.html",
            "description": "Associated with records, a preview feature of the Java language. A skeletal visitor of program elements with default behavior appropriate for the RELEASE_14 source version. "
        },
        {
            "name": "AbstractElementVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor6.html",
            "description": "A skeletal visitor of program elements with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "AbstractElementVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor7.html",
            "description": "A skeletal visitor of program elements with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "AbstractElementVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor8.html",
            "description": "A skeletal visitor of program elements with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "AbstractElementVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor9.html",
            "description": "A skeletal visitor of program elements with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "AbstractExecutorService",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html",
            "description": "Provides default implementations of ExecutorService execution methods. "
        },
        {
            "name": "AbstractInterruptibleChannel",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/AbstractInterruptibleChannel.html",
            "description": "Base implementation class for interruptible channels. "
        },
        {
            "name": "AbstractLayoutCache",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/AbstractLayoutCache.html",
            "description": "Warning: Serialized objects of this class will not be compatible with future Swing releases. "
        },
        {
            "name": "AbstractLayoutCache.NodeDimensions",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/AbstractLayoutCache.NodeDimensions.html",
            "description": "Used by AbstractLayoutCache to determine the size and x origin of a particular node. "
        },
        {
            "name": "AbstractList",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractList.html",
            "description": "This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a \"random access\" data store (such as an array). "
        },
        {
            "name": "AbstractListModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/AbstractListModel.html",
            "description": "The abstract definition for the data model that provides a List with its contents. "
        },
        {
            "name": "AbstractMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractMap.html",
            "description": "This class provides a skeletal implementation of the Map interface, to minimize the effort required to implement this interface. "
        },
        {
            "name": "AbstractMap.SimpleEntry",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractMap.SimpleEntry.html",
            "description": "An Entry maintaining a key and a value. "
        },
        {
            "name": "AbstractMap.SimpleImmutableEntry",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractMap.SimpleImmutableEntry.html",
            "description": "An Entry maintaining an immutable key and value. "
        },
        {
            "name": "AbstractMethodError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/AbstractMethodError.html",
            "description": "Thrown when an application tries to call an abstract method. "
        },
        {
            "name": "AbstractMultiResolutionImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/AbstractMultiResolutionImage.html",
            "description": "This class provides default implementations of several Image methods for classes that want to implement the MultiResolutionImage interface. "
        },
        {
            "name": "AbstractNotificationHandler",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/AbstractNotificationHandler.html",
            "description": "A skeletal handler that consumes notifications and continues. "
        },
        {
            "name": "AbstractOwnableSynchronizer",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/AbstractOwnableSynchronizer.html",
            "description": "A synchronizer that may be exclusively owned by a thread. "
        },
        {
            "name": "AbstractPreferences",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/AbstractPreferences.html",
            "description": "This class provides a skeletal implementation of the Preferences class, greatly easing the task of implementing it. "
        },
        {
            "name": "AbstractProcessor",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/AbstractProcessor.html",
            "description": "An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors. "
        },
        {
            "name": "AbstractQueue",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractQueue.html",
            "description": "This class provides skeletal implementations of some Queue operations. "
        },
        {
            "name": "AbstractQueuedLongSynchronizer",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html",
            "description": "A version of AbstractQueuedSynchronizer in which synchronization state is maintained as a long . "
        },
        {
            "name": "AbstractQueuedSynchronizer",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html",
            "description": "Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues. "
        },
        {
            "name": "AbstractRegionPainter",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/AbstractRegionPainter.html",
            "description": "Convenient base class for defining Painter instances for rendering a region or component in Nimbus. "
        },
        {
            "name": "AbstractRegionPainter.PaintContext",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/AbstractRegionPainter.PaintContext.html",
            "description": "A class encapsulating state useful when painting. "
        },
        {
            "name": "AbstractRegionPainter.PaintContext.CacheMode",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/AbstractRegionPainter.PaintContext.CacheMode.html",
            "description": "Cache mode. "
        },
        {
            "name": "AbstractRelinkableCallSite",
            "package": "jdk.dynalink.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/support/AbstractRelinkableCallSite.html",
            "description": "A basic implementation of the RelinkableCallSite as a MutableCallSite . "
        },
        {
            "name": "AbstractResourceBundleProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/AbstractResourceBundleProvider.html",
            "description": "AbstractResourceBundleProvider is an abstract class that provides the basic support for a provider implementation class for ResourceBundleProvider . "
        },
        {
            "name": "AbstractScriptEngine",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/AbstractScriptEngine.html",
            "description": "Provides a standard implementation for several of the variants of the eval method. "
        },
        {
            "name": "AbstractSelectableChannel",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/AbstractSelectableChannel.html",
            "description": "Base implementation class for selectable channels. "
        },
        {
            "name": "AbstractSelectionKey",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/AbstractSelectionKey.html",
            "description": "Base implementation class for selection keys. "
        },
        {
            "name": "AbstractSelector",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/AbstractSelector.html",
            "description": "Base implementation class for selectors. "
        },
        {
            "name": "AbstractSequentialList",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractSequentialList.html",
            "description": "This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a \"sequential access\" data store (such as a linked list). "
        },
        {
            "name": "AbstractSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/AbstractSet.html",
            "description": "This class provides a skeletal implementation of the Set interface to minimize the effort required to implement this interface. "
        },
        {
            "name": "AbstractSpinnerModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html",
            "description": "This class provides the ChangeListener part of the SpinnerModel interface that should be suitable for most concrete SpinnerModel implementations. "
        },
        {
            "name": "AbstractTableModel",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/AbstractTableModel.html",
            "description": "This abstract class provides default implementations for most of  the methods in the TableModel interface. "
        },
        {
            "name": "AbstractTypeVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor14.html",
            "description": "A skeletal visitor of types with default behavior appropriate for the RELEASE_14 source version. "
        },
        {
            "name": "AbstractTypeVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor6.html",
            "description": "A skeletal visitor of types with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "AbstractTypeVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor7.html",
            "description": "A skeletal visitor of types with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "AbstractTypeVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor8.html",
            "description": "A skeletal visitor of types with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "AbstractTypeVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor9.html",
            "description": "A skeletal visitor of types with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "AbstractUndoableEdit",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/AbstractUndoableEdit.html",
            "description": "An abstract implementation of UndoableEdit , implementing simple responses to all boolean methods in that interface. "
        },
        {
            "name": "AbstractView",
            "package": "org.w3c.dom.views",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/views/AbstractView.html",
            "description": "A base interface that all views shall derive from. "
        },
        {
            "name": "AbstractWriter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AbstractWriter.html",
            "description": "AbstractWriter is an abstract class that actually does the work of writing out the element tree including the attributes. "
        },
        {
            "name": "AcceptPendingException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AcceptPendingException.html",
            "description": "Unchecked exception thrown when an attempt is made to initiate an accept operation on a channel and a previous accept operation has not completed. "
        },
        {
            "name": "AccessControlContext",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AccessControlContext.html",
            "description": "An AccessControlContext is used to make system resource access decisions based on the context it encapsulates. "
        },
        {
            "name": "AccessControlException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AccessControlException.html",
            "description": "This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied. "
        },
        {
            "name": "AccessController",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AccessController.html",
            "description": "The AccessController class is used for access control operations and decisions. "
        },
        {
            "name": "AccessDeniedException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/AccessDeniedException.html",
            "description": "Checked exception thrown when a file system operation is denied, typically due to a file permission or other access check. "
        },
        {
            "name": "AccessException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/AccessException.html",
            "description": "An AccessException is thrown by certain methods of the java.rmi.Naming class (specifically bind , rebind , and unbind ) and methods of the java.rmi.activation.ActivationSystem interface to indicate that the caller does not have permission to perform the action requested by the method call. "
        },
        {
            "name": "AccessibilityEventMonitor",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/AccessibilityEventMonitor.html",
            "description": "AccessibilityEventMonitor implements a PropertyChange listener on every UI object that implements interface Accessible in the Java Virtual Machine. "
        },
        {
            "name": "AccessibilityListenerList",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/AccessibilityListenerList.html",
            "description": "The AccessibilityListenerList is a copy of the Swing EventListerList class. "
        },
        {
            "name": "AccessibilityProvider",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibilityProvider.html",
            "description": "Service Provider Interface (SPI) for Assistive Technology. "
        },
        {
            "name": "Accessible",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Accessible.html",
            "description": "Provides information on the accessibility of a type or type component. "
        },
        {
            "name": "Accessible",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/Accessible.html",
            "description": "Interface Accessible is the main interface for the accessibility package. "
        },
        {
            "name": "AccessibleAction",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleAction.html",
            "description": "The AccessibleAction interface should be supported by any object that can perform one or more actions. "
        },
        {
            "name": "AccessibleAttributeSequence",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleAttributeSequence.html",
            "description": "This class collects together the span of text that share the same contiguous set of attributes, along with that set of attributes. "
        },
        {
            "name": "AccessibleBundle",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleBundle.html",
            "description": "Base class used to maintain a strongly typed enumeration. "
        },
        {
            "name": "AccessibleComponent",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleComponent.html",
            "description": "The AccessibleComponent interface should be supported by any object that is rendered on the screen. "
        },
        {
            "name": "AccessibleContext",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleContext.html",
            "description": "AccessibleContext represents the minimum information all accessible objects return. "
        },
        {
            "name": "AccessibleEditableText",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleEditableText.html",
            "description": "The AccessibleEditableText interface should be implemented by all classes that present editable textual information on the display. "
        },
        {
            "name": "AccessibleExtendedComponent",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleExtendedComponent.html",
            "description": "The AccessibleExtendedComponent interface should be supported by any object that is rendered on the screen. "
        },
        {
            "name": "AccessibleExtendedTable",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleExtendedTable.html",
            "description": "Class AccessibleExtendedTable provides extended information about a user-interface component that presents data in a two-dimensional table format. "
        },
        {
            "name": "AccessibleExtendedText",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleExtendedText.html",
            "description": "The AccessibleExtendedText interface contains additional methods not provided by the AccessibleText interface. "
        },
        {
            "name": "AccessibleHyperlink",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleHyperlink.html",
            "description": "Encapsulation of a link, or set of links (e.g. client side imagemap) in a Hypertext document "
        },
        {
            "name": "AccessibleHypertext",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleHypertext.html",
            "description": "The AccessibleHypertext class is the base class for all classes that present hypertext information on the display. "
        },
        {
            "name": "AccessibleIcon",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleIcon.html",
            "description": "The AccessibleIcon interface should be supported by any object that has an associated icon (e.g., buttons). "
        },
        {
            "name": "AccessibleKeyBinding",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleKeyBinding.html",
            "description": "The AccessibleKeyBinding interface should be supported by any object that has a keyboard bindings such as a keyboard mnemonic and/or keyboard shortcut which can be used to select the object. "
        },
        {
            "name": "AccessibleObject",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AccessibleObject.html",
            "description": "The AccessibleObject class is the base class for Field , Method , and Constructor objects (known as reflected objects ). "
        },
        {
            "name": "AccessibleRelation",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleRelation.html",
            "description": "Class AccessibleRelation describes a relation between the object that implements the AccessibleRelation and one or more other objects. "
        },
        {
            "name": "AccessibleRelationSet",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleRelationSet.html",
            "description": "Class AccessibleRelationSet determines a component's relation set. "
        },
        {
            "name": "AccessibleResourceBundle",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleResourceBundle.html",
            "description": "This class is deprecated as of version 1.3 of the Java Platform "
        },
        {
            "name": "AccessibleRole",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleRole.html",
            "description": "Class AccessibleRole determines the role of a component. "
        },
        {
            "name": "AccessibleSelection",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleSelection.html",
            "description": "This AccessibleSelection interface provides the standard mechanism for an assistive technology to determine what the current selected children are, as well as modify the selection set. "
        },
        {
            "name": "AccessibleState",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleState.html",
            "description": "Class AccessibleState describes a component's particular state. "
        },
        {
            "name": "AccessibleStateSet",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleStateSet.html",
            "description": "Class AccessibleStateSet determines a component's state set. "
        },
        {
            "name": "AccessibleStreamable",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleStreamable.html",
            "description": "The AccessibleStreamable interface should be implemented by the AccessibleContext of any component that presents the raw stream behind a component on the display screen. "
        },
        {
            "name": "AccessibleTable",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleTable.html",
            "description": "Class AccessibleTable describes a user-interface component that presents data in a two-dimensional table format. "
        },
        {
            "name": "AccessibleTableModelChange",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleTableModelChange.html",
            "description": "The AccessibleTableModelChange interface describes a change to the table model. "
        },
        {
            "name": "AccessibleText",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleText.html",
            "description": "The AccessibleText interface should be implemented by all classes that present textual information on the display. "
        },
        {
            "name": "AccessibleTextSequence",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleTextSequence.html",
            "description": "This class collects together key details of a span of text. "
        },
        {
            "name": "AccessibleValue",
            "package": "javax.accessibility",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/accessibility/AccessibleValue.html",
            "description": "The AccessibleValue interface should be supported by any object that supports a numerical value (e.g., a scroll bar). "
        },
        {
            "name": "AccessMode",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/AccessMode.html",
            "description": "Defines access modes used to test the accessibility of a file. "
        },
        {
            "name": "AccessWatchpointEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/AccessWatchpointEvent.html",
            "description": "Notification of a field access in the target VM. "
        },
        {
            "name": "AccessWatchpointRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/AccessWatchpointRequest.html",
            "description": "Request for notification when the contents of a field are accessed in the target VM. "
        },
        {
            "name": "AccountException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AccountException.html",
            "description": "A generic account exception. "
        },
        {
            "name": "AccountExpiredException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AccountExpiredException.html",
            "description": "Signals that a user account has expired. "
        },
        {
            "name": "AccountLockedException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AccountLockedException.html",
            "description": "Signals that an account was locked. "
        },
        {
            "name": "AccountNotFoundException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AccountNotFoundException.html",
            "description": "Signals that an account was not found. "
        },
        {
            "name": "AclEntry",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclEntry.html",
            "description": "An entry in an access control list (ACL). "
        },
        {
            "name": "AclEntry.Builder",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclEntry.Builder.html",
            "description": "A builder of AclEntry objects. "
        },
        {
            "name": "AclEntryFlag",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclEntryFlag.html",
            "description": "Defines the flags for used by the flags component of an ACL entry . "
        },
        {
            "name": "AclEntryPermission",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclEntryPermission.html",
            "description": "Defines the permissions for use with the permissions component of an ACL entry . "
        },
        {
            "name": "AclEntryType",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclEntryType.html",
            "description": "A typesafe enumeration of the access control entry types. "
        },
        {
            "name": "AclFileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AclFileAttributeView.html",
            "description": "A file attribute view that supports reading or updating a file's Access Control Lists (ACL) or file owner attributes. "
        },
        {
            "name": "Action",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Action.html",
            "description": "The Action interface provides a useful extension to the ActionListener interface in cases where the same functionality may be accessed by several controls. "
        },
        {
            "name": "ActionEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ActionEvent.html",
            "description": "A semantic event which indicates that a component-defined action occurred. "
        },
        {
            "name": "ActionListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ActionListener.html",
            "description": "The listener interface for receiving action events. "
        },
        {
            "name": "ActionMap",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ActionMap.html",
            "description": "ActionMap provides mappings from Object s (called keys or Action names ) to Action s. "
        },
        {
            "name": "ActionMapUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ActionMapUIResource.html",
            "description": "A subclass of javax.swing.ActionMap that implements UIResource. "
        },
        {
            "name": "Activatable",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/Activatable.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivateFailedException",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivateFailedException.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationDesc",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationDesc.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationException",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationException.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationGroup",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationGroup.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationGroup_Stub",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationGroup_Stub.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationGroupDesc",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationGroupDesc.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationGroupDesc.CommandEnvironment",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationGroupDesc.CommandEnvironment.html",
            "description": "Startup options for ActivationGroup implementations. "
        },
        {
            "name": "ActivationGroupID",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationGroupID.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationID",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationID.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationInstantiator",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationInstantiator.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationMonitor",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationMonitor.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActivationSystem",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/ActivationSystem.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "Activator",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/Activator.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "ActiveEvent",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ActiveEvent.html",
            "description": "An interface for events that know how to dispatch themselves. "
        },
        {
            "name": "Adjustable",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Adjustable.html",
            "description": "The interface for objects which have an adjustable numeric value contained within a bounded range of values. "
        },
        {
            "name": "AdjustmentEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/AdjustmentEvent.html",
            "description": "The adjustment event emitted by Adjustable objects like Scrollbar and ScrollPane . "
        },
        {
            "name": "AdjustmentListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/AdjustmentListener.html",
            "description": "The listener interface for receiving adjustment events. "
        },
        {
            "name": "Adler32",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/Adler32.html",
            "description": "A class that can be used to compute the Adler-32 checksum of a data stream. "
        },
        {
            "name": "AEADBadTagException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/AEADBadTagException.html",
            "description": "This exception is thrown when a Cipher operating in an AEAD mode (such as GCM/CCM) is unable to verify the supplied authentication tag. "
        },
        {
            "name": "AffineTransform",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/AffineTransform.html",
            "description": "The AffineTransform class represents a 2D affine transform that performs a linear mapping from 2D coordinates to other 2D coordinates that preserves the \"straightness\" and \"parallelness\" of lines. "
        },
        {
            "name": "AffineTransformOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/AffineTransformOp.html",
            "description": "This class uses an affine transform to perform a linear mapping from 2D coordinates in the source image or Raster to 2D coordinates in the destination image or Raster . "
        },
        {
            "name": "AgentInitializationException",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/AgentInitializationException.html",
            "description": "The exception thrown when an agent fails to initialize in the target Java virtual machine. "
        },
        {
            "name": "AgentLoadException",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/AgentLoadException.html",
            "description": "The exception thrown when an agent cannot be loaded into the target Java virtual machine. "
        },
        {
            "name": "AlgorithmConstraints",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AlgorithmConstraints.html",
            "description": "This interface specifies constraints for cryptographic algorithms, keys (key sizes), and other algorithm parameters. "
        },
        {
            "name": "AlgorithmMethod",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/AlgorithmMethod.html",
            "description": "An abstract representation of an algorithm defined in the XML Security specifications. "
        },
        {
            "name": "AlgorithmParameterGenerator",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AlgorithmParameterGenerator.html",
            "description": "The AlgorithmParameterGenerator class is used to generate a set of parameters to be used with a certain algorithm. "
        },
        {
            "name": "AlgorithmParameterGeneratorSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AlgorithmParameterGeneratorSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the AlgorithmParameterGenerator class, which is used to generate a set of parameters to be used with a certain algorithm. "
        },
        {
            "name": "AlgorithmParameters",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AlgorithmParameters.html",
            "description": "This class is used as an opaque representation of cryptographic parameters. "
        },
        {
            "name": "AlgorithmParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/AlgorithmParameterSpec.html",
            "description": "A (transparent) specification of cryptographic parameters. "
        },
        {
            "name": "AlgorithmParametersSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AlgorithmParametersSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the AlgorithmParameters class, which is used to manage algorithm parameters. "
        },
        {
            "name": "AllPermission",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AllPermission.html",
            "description": "The AllPermission is a permission that implies all other permissions. "
        },
        {
            "name": "AlphaComposite",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AlphaComposite.html",
            "description": "The AlphaComposite class implements basic alpha compositing rules for combining source and destination colors to achieve blending and transparency effects with graphics and images. "
        },
        {
            "name": "AlreadyBoundException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AlreadyBoundException.html",
            "description": "Unchecked exception thrown when an attempt is made to bind the socket a network oriented channel that is already bound. "
        },
        {
            "name": "AlreadyBoundException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/AlreadyBoundException.html",
            "description": "An AlreadyBoundException is thrown if an attempt is made to bind an object to a name that already has an associated binding in the registry. "
        },
        {
            "name": "AlreadyConnectedException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AlreadyConnectedException.html",
            "description": "Unchecked exception thrown when an attempt is made to connect a SocketChannel that is already connected. "
        },
        {
            "name": "AncestorEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/AncestorEvent.html",
            "description": "An event reported to a child component that originated from an ancestor in the component hierarchy. "
        },
        {
            "name": "AncestorListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/AncestorListener.html",
            "description": "AncestorListener Interface to support notification when changes occur to a JComponent or one of its ancestors. "
        },
        {
            "name": "AnnotatedArrayType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedArrayType.html",
            "description": "AnnotatedArrayType represents the potentially annotated use of an array type, whose component type may itself represent the annotated use of a type. "
        },
        {
            "name": "AnnotatedConstruct",
            "package": "javax.lang.model",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html",
            "description": "Represents a construct that can be annotated. "
        },
        {
            "name": "AnnotatedElement",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedElement.html",
            "description": "Represents an annotated construct of the program currently running in this VM. "
        },
        {
            "name": "AnnotatedParameterizedType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedParameterizedType.html",
            "description": "AnnotatedParameterizedType represents the potentially annotated use of a parameterized type, whose type arguments may themselves represent annotated uses of types. "
        },
        {
            "name": "AnnotatedType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedType.html",
            "description": "AnnotatedType represents the potentially annotated use of a type in the program currently running in this VM. "
        },
        {
            "name": "AnnotatedTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/AnnotatedTypeTree.html",
            "description": "A tree node for an annotated type. "
        },
        {
            "name": "AnnotatedTypeVariable",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedTypeVariable.html",
            "description": "AnnotatedTypeVariable represents the potentially annotated use of a type variable, whose declaration may have bounds which themselves represent annotated uses of types. "
        },
        {
            "name": "AnnotatedWildcardType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/AnnotatedWildcardType.html",
            "description": "AnnotatedWildcardType represents the potentially annotated use of a wildcard type argument, whose upper or lower bounds may themselves represent annotated uses of types. "
        },
        {
            "name": "Annotation",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Annotation.html",
            "description": "The common interface extended by all annotation types. "
        },
        {
            "name": "Annotation",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Annotation.html",
            "description": "An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics. "
        },
        {
            "name": "AnnotationElement",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/AnnotationElement.html",
            "description": "Describes event metadata, such as labels, descriptions and units. "
        },
        {
            "name": "AnnotationFormatError",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/AnnotationFormatError.html",
            "description": "Thrown when the annotation parser attempts to read an annotation from a class file and determines that the annotation is malformed. "
        },
        {
            "name": "AnnotationMirror",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/AnnotationMirror.html",
            "description": "Represents an annotation. "
        },
        {
            "name": "AnnotationTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/AnnotationTree.html",
            "description": "A tree node for an annotation. "
        },
        {
            "name": "AnnotationTypeMismatchException",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html",
            "description": "Thrown to indicate that a program has attempted to access an element of an annotation whose type has changed after the annotation was compiled (or serialized). "
        },
        {
            "name": "AnnotationValue",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/AnnotationValue.html",
            "description": "Represents a value of an annotation type element. "
        },
        {
            "name": "AnnotationValueVisitor",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html",
            "description": "A visitor of the values of annotation type elements, using a variant of the visitor design pattern. "
        },
        {
            "name": "AppConfigurationEntry",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AppConfigurationEntry.html",
            "description": "This class represents a single LoginModule entry configured for the application specified in the getAppConfigurationEntry(String appName) method in the Configuration class. "
        },
        {
            "name": "AppConfigurationEntry.LoginModuleControlFlag",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/AppConfigurationEntry.LoginModuleControlFlag.html",
            "description": "This class represents whether or not a LoginModule is REQUIRED, REQUISITE, SUFFICIENT or OPTIONAL. "
        },
        {
            "name": "Appendable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Appendable.html",
            "description": "An object to which char sequences and values can be appended. "
        },
        {
            "name": "AppEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppEvent.html",
            "description": "AppEvents are sent to listeners and handlers installed on the Desktop instance of the current desktop context. "
        },
        {
            "name": "AppForegroundEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppForegroundEvent.html",
            "description": "Event sent when the application has become the foreground app, and when it is no longer the foreground app. "
        },
        {
            "name": "AppForegroundListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppForegroundListener.html",
            "description": "Implementors are notified when the app becomes the foreground app and when it is no longer the foreground app. "
        },
        {
            "name": "AppHiddenEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppHiddenEvent.html",
            "description": "Event sent when the application has been hidden or shown. "
        },
        {
            "name": "AppHiddenListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppHiddenListener.html",
            "description": "Implementors are notified when the app is hidden or shown by the user. "
        },
        {
            "name": "Applet",
            "package": "java.applet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/applet/Applet.html",
            "description": "The Applet API is deprecated, no replacement. "
        },
        {
            "name": "AppletContext",
            "package": "java.applet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/applet/AppletContext.html",
            "description": "The Applet API is deprecated, no replacement. "
        },
        {
            "name": "AppletInitializer",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/AppletInitializer.html",
            "description": "The Applet API is deprecated. "
        },
        {
            "name": "AppletStub",
            "package": "java.applet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/applet/AppletStub.html",
            "description": "The Applet API is deprecated, no replacement. "
        },
        {
            "name": "AppReopenedEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppReopenedEvent.html",
            "description": "Event sent when the application is asked to re-open itself. "
        },
        {
            "name": "AppReopenedListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/AppReopenedListener.html",
            "description": "Implementors receive notification when the app has been asked to open again. "
        },
        {
            "name": "Arc2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Arc2D.html",
            "description": "Arc2D is the abstract superclass for all objects that store a 2D arc defined by a framing rectangle, start angle, angular extent (length of the arc), and a closure type ( OPEN , CHORD , or PIE ). "
        },
        {
            "name": "Arc2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Arc2D.Double.html",
            "description": "This class defines an arc specified in double precision. "
        },
        {
            "name": "Arc2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Arc2D.Float.html",
            "description": "This class defines an arc specified in float precision. "
        },
        {
            "name": "Area",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Area.html",
            "description": "An Area object stores and manipulates a resolution-independent description of an enclosed area of 2-dimensional space. "
        },
        {
            "name": "AreaAveragingScaleFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/AreaAveragingScaleFilter.html",
            "description": "An ImageFilter class for scaling images using a simple area averaging algorithm that produces smoother results than the nearest neighbor algorithm. "
        },
        {
            "name": "ArithmeticException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ArithmeticException.html",
            "description": "Thrown when an exceptional arithmetic condition has occurred. "
        },
        {
            "name": "Array",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Array.html",
            "description": "The Array class provides static methods to dynamically create and access Java arrays. "
        },
        {
            "name": "Array",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Array.html",
            "description": "The mapping in the Java programming language for the SQL type ARRAY . "
        },
        {
            "name": "ArrayAccessTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ArrayAccessTree.html",
            "description": "A tree node for an array access expression. "
        },
        {
            "name": "ArrayBlockingQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ArrayBlockingQueue.html",
            "description": "A bounded blocking queue backed by an array. "
        },
        {
            "name": "ArrayDeque",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ArrayDeque.html",
            "description": "Resizable-array implementation of the Deque interface. "
        },
        {
            "name": "ArrayIndexOutOfBoundsException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html",
            "description": "Thrown to indicate that an array has been accessed with an illegal index. "
        },
        {
            "name": "ArrayList",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ArrayList.html",
            "description": "Resizable-array implementation of the List interface. "
        },
        {
            "name": "ArrayReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ArrayReference.html",
            "description": "Provides access to an array object and its components in the target VM. "
        },
        {
            "name": "Arrays",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Arrays.html",
            "description": "This class contains various methods for manipulating arrays (such as sorting and searching). "
        },
        {
            "name": "ArrayStoreException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ArrayStoreException.html",
            "description": "Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects. "
        },
        {
            "name": "ArrayType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ArrayType.html",
            "description": "Provides access to the class of an array and the type of its components in the target VM. "
        },
        {
            "name": "ArrayType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/ArrayType.html",
            "description": "Represents an array type. "
        },
        {
            "name": "ArrayType",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/ArrayType.html",
            "description": "The ArrayType class is the open type class whose instances describe all open data values which are n-dimensional arrays of open data values. "
        },
        {
            "name": "ArrayTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ArrayTypeTree.html",
            "description": "A tree node for an array type. "
        },
        {
            "name": "AssertionError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/AssertionError.html",
            "description": "Thrown to indicate that an assertion has failed. "
        },
        {
            "name": "AssertTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/AssertTree.html",
            "description": "A tree node for an assert statement. "
        },
        {
            "name": "AssignmentTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/AssignmentTree.html",
            "description": "A tree node for an assignment expression. "
        },
        {
            "name": "Association",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/Association.html",
            "description": "A class that represents an SCTP association. "
        },
        {
            "name": "AssociationChangeNotification",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/AssociationChangeNotification.html",
            "description": "Notification emitted when an association has either opened or closed. "
        },
        {
            "name": "AssociationChangeNotification.AssocChangeEvent",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/AssociationChangeNotification.AssocChangeEvent.html",
            "description": "Defines the type of change event that happened to the association. "
        },
        {
            "name": "AsyncBoxView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AsyncBoxView.html",
            "description": "A box that does layout asynchronously. "
        },
        {
            "name": "AsynchronousByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousByteChannel.html",
            "description": "An asynchronous channel that can read and write bytes. "
        },
        {
            "name": "AsynchronousChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousChannel.html",
            "description": "A channel that supports asynchronous I/O operations. "
        },
        {
            "name": "AsynchronousChannelGroup",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousChannelGroup.html",
            "description": "A grouping of asynchronous channels for the purpose of resource sharing. "
        },
        {
            "name": "AsynchronousChannelProvider",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/AsynchronousChannelProvider.html",
            "description": "Service-provider class for asynchronous channels. "
        },
        {
            "name": "AsynchronousCloseException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousCloseException.html",
            "description": "Checked exception received by a thread when another thread closes the channel or the part of the channel upon which it is blocked in an I/O operation. "
        },
        {
            "name": "AsynchronousFileChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html",
            "description": "An asynchronous channel for reading, writing, and manipulating a file. "
        },
        {
            "name": "AsynchronousServerSocketChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousServerSocketChannel.html",
            "description": "An asynchronous channel for stream-oriented listening sockets. "
        },
        {
            "name": "AsynchronousSocketChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/AsynchronousSocketChannel.html",
            "description": "An asynchronous channel for stream-oriented connecting sockets. "
        },
        {
            "name": "AtomicBoolean",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicBoolean.html",
            "description": "A boolean value that may be updated atomically. "
        },
        {
            "name": "AtomicInteger",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicInteger.html",
            "description": "An int value that may be updated atomically. "
        },
        {
            "name": "AtomicIntegerArray",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicIntegerArray.html",
            "description": "An int array in which elements may be updated atomically. "
        },
        {
            "name": "AtomicIntegerFieldUpdater",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html",
            "description": "A reflection-based utility that enables atomic updates to designated volatile int fields of designated classes. "
        },
        {
            "name": "AtomicLong",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicLong.html",
            "description": "A long value that may be updated atomically. "
        },
        {
            "name": "AtomicLongArray",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicLongArray.html",
            "description": "A long array in which elements may be updated atomically. "
        },
        {
            "name": "AtomicLongFieldUpdater",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicLongFieldUpdater.html",
            "description": "A reflection-based utility that enables atomic updates to designated volatile long fields of designated classes. "
        },
        {
            "name": "AtomicMarkableReference",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicMarkableReference.html",
            "description": "An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically. "
        },
        {
            "name": "AtomicMoveNotSupportedException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/AtomicMoveNotSupportedException.html",
            "description": "Checked exception thrown when a file cannot be moved as an atomic file system operation. "
        },
        {
            "name": "AtomicReference",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicReference.html",
            "description": "An object reference that may be updated atomically. "
        },
        {
            "name": "AtomicReferenceArray",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicReferenceArray.html",
            "description": "An array of object references in which elements may be updated atomically. "
        },
        {
            "name": "AtomicReferenceFieldUpdater",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html",
            "description": "A reflection-based utility that enables atomic updates to designated volatile reference fields of designated classes. "
        },
        {
            "name": "AtomicStampedReference",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/AtomicStampedReference.html",
            "description": "An AtomicStampedReference maintains an object reference along with an integer \"stamp\", that can be updated atomically. "
        },
        {
            "name": "ATR",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/ATR.html",
            "description": "A Smart Card's answer-to-reset bytes. "
        },
        {
            "name": "AttachingConnector",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/AttachingConnector.html",
            "description": "A connector which attaches to a previously running target VM. "
        },
        {
            "name": "AttachNotSupportedException",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/AttachNotSupportedException.html",
            "description": "Thrown by VirtualMachine.attach when attempting to attach to a Java virtual machine for which a compatible AttachProvider does not exist. "
        },
        {
            "name": "AttachOperationFailedException",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/AttachOperationFailedException.html",
            "description": "Exception type to signal that an attach operation failed in the target VM. "
        },
        {
            "name": "AttachPermission",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/AttachPermission.html",
            "description": "When a SecurityManager set, this is the permission which will be checked when code invokes VirtualMachine.attach to attach to a target virtual machine. "
        },
        {
            "name": "AttachProvider",
            "package": "com.sun.tools.attach.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/spi/AttachProvider.html",
            "description": "Attach provider class for attaching to a Java virtual machine. "
        },
        {
            "name": "Attr",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Attr.html",
            "description": "The Attr interface represents an attribute in an Element object. "
        },
        {
            "name": "Attribute",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/Attribute.html",
            "description": "Represents an MBean attribute by associating its name with its value. "
        },
        {
            "name": "Attribute",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/Attribute.html",
            "description": "This interface represents an attribute associated with a named object. "
        },
        {
            "name": "Attribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/Attribute.html",
            "description": "Interface Attribute is the base interface implemented by any and every printing attribute class to indicate that the class represents a printing attribute. "
        },
        {
            "name": "Attribute",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/Attribute.html",
            "description": "An interface that contains information about an attribute. "
        },
        {
            "name": "AttributeChangeNotification",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/AttributeChangeNotification.html",
            "description": "Provides definitions of the attribute change notifications sent by MBeans. "
        },
        {
            "name": "AttributeChangeNotificationFilter",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/AttributeChangeNotificationFilter.html",
            "description": "This class implements of the NotificationFilter interface for the attribute change notification . "
        },
        {
            "name": "AttributedCharacterIterator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/AttributedCharacterIterator.html",
            "description": "An AttributedCharacterIterator allows iteration through both text and related attribute information. "
        },
        {
            "name": "AttributedCharacterIterator.Attribute",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/AttributedCharacterIterator.Attribute.html",
            "description": "Defines attribute keys that are used to identify text attributes. "
        },
        {
            "name": "AttributedString",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/AttributedString.html",
            "description": "An AttributedString holds text and related attribute information. "
        },
        {
            "name": "AttributeException",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/AttributeException.html",
            "description": "Interface AttributeException is a mixin interface which a subclass of PrintException can implement to report an error condition involving one or more printing attributes that a particular Print Service instance does not support. "
        },
        {
            "name": "AttributeInUseException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/AttributeInUseException.html",
            "description": "This exception is thrown when an operation attempts to add an attribute that already exists. "
        },
        {
            "name": "AttributeList",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/AttributeList.html",
            "description": "Represents a list of values for attributes of an MBean. "
        },
        {
            "name": "AttributeList",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/AttributeList.html",
            "description": "This class defines the attributes of an SGML element as described in a DTD using the ATTLIST construct. "
        },
        {
            "name": "AttributeList",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/AttributeList.html",
            "description": "This interface has been replaced by the SAX2 Attributes interface, which includes Namespace support. "
        },
        {
            "name": "AttributeListImpl",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/AttributeListImpl.html",
            "description": "This class implements a deprecated interface, AttributeList ;             that interface has been replaced by Attributes ,             which is implemented in the AttributesImpl helper class. "
        },
        {
            "name": "AttributeModificationException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/AttributeModificationException.html",
            "description": "This exception is thrown when an attempt is made to add, or remove, or modify an attribute, its identifier, or its values that conflicts with the attribute's (schema) definition or the attribute's state. "
        },
        {
            "name": "AttributeNotFoundException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/AttributeNotFoundException.html",
            "description": "The specified attribute does not exist or cannot be retrieved. "
        },
        {
            "name": "Attributes",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/Attributes.html",
            "description": "The Attributes class maps Manifest attribute names to associated string values. "
        },
        {
            "name": "Attributes",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/Attributes.html",
            "description": "This interface represents a collection of attributes. "
        },
        {
            "name": "Attributes",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/Attributes.html",
            "description": "Interface for a list of XML attributes. "
        },
        {
            "name": "Attributes.Name",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/Attributes.Name.html",
            "description": "The Attributes.Name class represents an attribute name stored in this Map. "
        },
        {
            "name": "Attributes2",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/Attributes2.html",
            "description": "SAX2 extension to augment the per-attribute information provided through Attributes . "
        },
        {
            "name": "Attributes2Impl",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/Attributes2Impl.html",
            "description": "SAX2 extension helper for additional Attributes information, implementing the Attributes2 interface. "
        },
        {
            "name": "AttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/AttributeSet.html",
            "description": "Interface AttributeSet specifies the interface for a set of printing attributes. "
        },
        {
            "name": "AttributeSet",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AttributeSet.html",
            "description": "A collection of unique attributes. "
        },
        {
            "name": "AttributeSet.CharacterAttribute",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AttributeSet.CharacterAttribute.html",
            "description": "This interface is the type signature that is expected to be present on any attribute key that contributes to character level presentation. "
        },
        {
            "name": "AttributeSet.ColorAttribute",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AttributeSet.ColorAttribute.html",
            "description": "This interface is the type signature that is expected to be present on any attribute key that contributes to presentation of color. "
        },
        {
            "name": "AttributeSet.FontAttribute",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AttributeSet.FontAttribute.html",
            "description": "This interface is the type signature that is expected to be present on any attribute key that contributes to the determination of what font to use to render some text. "
        },
        {
            "name": "AttributeSet.ParagraphAttribute",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/AttributeSet.ParagraphAttribute.html",
            "description": "This interface is the type signature that is expected to be present on any attribute key that contributes to the paragraph level presentation. "
        },
        {
            "name": "AttributeSetUtilities",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/AttributeSetUtilities.html",
            "description": "Class AttributeSetUtilities provides static methods for manipulating AttributeSets . "
        },
        {
            "name": "AttributesImpl",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/AttributesImpl.html",
            "description": "Default implementation of the Attributes interface. "
        },
        {
            "name": "AttributeTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/AttributeTree.html",
            "description": "A tree node for an attribute in an HTML element. "
        },
        {
            "name": "AttributeTree.ValueKind",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/AttributeTree.ValueKind.html",
            "description": "The kind of an attribute value. "
        },
        {
            "name": "AttributeValueExp",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/AttributeValueExp.html",
            "description": "Represents attributes used as arguments to relational constraints. "
        },
        {
            "name": "AttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/AttributeView.html",
            "description": "An object that provides a read-only or updatable view of non-opaque values associated with an object in a filesystem. "
        },
        {
            "name": "AudioClip",
            "package": "java.applet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/applet/AudioClip.html",
            "description": "The Applet API is deprecated, no replacement. "
        },
        {
            "name": "AudioFileFormat",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioFileFormat.html",
            "description": "An instance of the AudioFileFormat class describes an audio file, including the file type, the file's length in bytes, the length in sample frames of the audio data contained in the file, and the format of the audio data. "
        },
        {
            "name": "AudioFileFormat.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioFileFormat.Type.html",
            "description": "An instance of the Type class represents one of the standard types of audio file. "
        },
        {
            "name": "AudioFileReader",
            "package": "javax.sound.sampled.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/spi/AudioFileReader.html",
            "description": "Provider for audio file reading services. "
        },
        {
            "name": "AudioFileWriter",
            "package": "javax.sound.sampled.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/spi/AudioFileWriter.html",
            "description": "Provider for audio file writing services. "
        },
        {
            "name": "AudioFormat",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html",
            "description": "AudioFormat is the class that specifies a particular arrangement of data in a sound stream. "
        },
        {
            "name": "AudioFormat.Encoding",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioFormat.Encoding.html",
            "description": "The Encoding class names the specific type of data representation used for an audio stream. "
        },
        {
            "name": "AudioInputStream",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioInputStream.html",
            "description": "An audio input stream is an input stream with a specified audio format and length. "
        },
        {
            "name": "AudioPermission",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioPermission.html",
            "description": "The AudioPermission class represents access rights to the audio system resources. "
        },
        {
            "name": "AudioSystem",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html",
            "description": "The AudioSystem class acts as the entry point to the sampled-audio system resources. "
        },
        {
            "name": "AuthenticationException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/AuthenticationException.html",
            "description": "This exception is thrown when an authentication error occurs while accessing the naming or directory service. "
        },
        {
            "name": "AuthenticationException",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/AuthenticationException.html",
            "description": "This exception is thrown by a SASL mechanism implementation to indicate that the SASL exchange has failed due to reasons related to authentication, such as an invalid identity, passphrase, or key. "
        },
        {
            "name": "AuthenticationNotSupportedException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/AuthenticationNotSupportedException.html",
            "description": "This exception is thrown when the particular flavor of authentication requested is not supported. "
        },
        {
            "name": "Authenticator",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Authenticator.html",
            "description": "Authenticator represents an implementation of an HTTP authentication mechanism. "
        },
        {
            "name": "Authenticator",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Authenticator.html",
            "description": "The class Authenticator represents an object that knows how to obtain authentication for a network connection. "
        },
        {
            "name": "Authenticator.Failure",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Authenticator.Failure.html",
            "description": "Indicates an authentication failure. "
        },
        {
            "name": "Authenticator.RequestorType",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Authenticator.RequestorType.html",
            "description": "The type of the entity requesting authentication. "
        },
        {
            "name": "Authenticator.Result",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Authenticator.Result.html",
            "description": "Base class for return type from authenticate() method "
        },
        {
            "name": "Authenticator.Retry",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Authenticator.Retry.html",
            "description": "Indicates an authentication must be retried. "
        },
        {
            "name": "Authenticator.Success",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Authenticator.Success.html",
            "description": "Indicates an authentication has succeeded and the authenticated user principal can be acquired by calling getPrincipal(). "
        },
        {
            "name": "AuthorizationDataEntry",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/AuthorizationDataEntry.html",
            "description": "Kerberos 5 AuthorizationData entry. "
        },
        {
            "name": "AuthorizeCallback",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/AuthorizeCallback.html",
            "description": "This callback is used by SaslServer to determine whether one entity (identified by an authenticated authentication id) can act on behalf of another entity (identified by an authorization id). "
        },
        {
            "name": "AuthorTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/AuthorTree.html",
            "description": "A tree node for an @author block tag. "
        },
        {
            "name": "AuthPermission",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/AuthPermission.html",
            "description": "This class is for authentication permissions. "
        },
        {
            "name": "AuthProvider",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/AuthProvider.html",
            "description": "This class defines login and logout methods for a provider. "
        },
        {
            "name": "AutoCloseable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/AutoCloseable.html",
            "description": "An object that may hold resources (such as file or socket handles) until it is closed. "
        },
        {
            "name": "Autoscroll",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/Autoscroll.html",
            "description": "During DnD operations it is possible that a user may wish to drop the subject of the operation on a region of a scrollable GUI control that is not currently visible to the user. "
        },
        {
            "name": "AWTError",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTError.html",
            "description": "Thrown when a serious Abstract Window Toolkit error has occurred. "
        },
        {
            "name": "AWTEvent",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTEvent.html",
            "description": "The root event class for all AWT events. "
        },
        {
            "name": "AWTEventListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/AWTEventListener.html",
            "description": "The listener interface for receiving notification of events dispatched to objects that are instances of Component or MenuComponent or their subclasses. "
        },
        {
            "name": "AWTEventListenerProxy",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/AWTEventListenerProxy.html",
            "description": "A class which extends the EventListenerProxy specifically for adding an AWTEventListener for a specific event mask. "
        },
        {
            "name": "AWTEventMonitor",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/AWTEventMonitor.html",
            "description": "The AWTEventMonitor implements a suite of listeners that are conditionally installed on every AWT component instance in the Java Virtual Machine. "
        },
        {
            "name": "AWTEventMulticaster",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTEventMulticaster.html",
            "description": "AWTEventMulticaster implements efficient and thread-safe multi-cast event dispatching for the AWT events defined in the java.awt.event package. "
        },
        {
            "name": "AWTException",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTException.html",
            "description": "Signals that an Abstract Window Toolkit exception has occurred. "
        },
        {
            "name": "AWTKeyStroke",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTKeyStroke.html",
            "description": "An AWTKeyStroke represents a key action on the keyboard, or equivalent input device. "
        },
        {
            "name": "AWTPermission",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/AWTPermission.html",
            "description": "This class is for AWT permissions. "
        },
        {
            "name": "BackingStoreException",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/BackingStoreException.html",
            "description": "Thrown to indicate that a preferences operation could not complete because of a failure in the backing store, or a failure to contact the backing store. "
        },
        {
            "name": "BadAttributeValueExpException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/BadAttributeValueExpException.html",
            "description": "Thrown when an invalid MBean attribute is passed to a query constructing method. "
        },
        {
            "name": "BadBinaryOpValueExpException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/BadBinaryOpValueExpException.html",
            "description": "Thrown when an invalid expression is passed to a method for constructing a query. "
        },
        {
            "name": "BadLocationException",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/BadLocationException.html",
            "description": "This exception is to report bad locations within a document model (that is, attempts to reference a location that doesn't exist). "
        },
        {
            "name": "BadPaddingException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/BadPaddingException.html",
            "description": "This exception is thrown when a particular padding mechanism is expected for the input data but the data is not padded properly. "
        },
        {
            "name": "BadStringOperationException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/BadStringOperationException.html",
            "description": "Thrown when an invalid string operation is passed to a method for constructing a query. "
        },
        {
            "name": "BandCombineOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BandCombineOp.html",
            "description": "This class performs an arbitrary linear combination of the bands in a Raster , using a specified matrix. "
        },
        {
            "name": "BandedSampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BandedSampleModel.html",
            "description": "This class represents image data which is stored in a band interleaved  fashion and for  which each sample of a pixel occupies one data element of the DataBuffer. "
        },
        {
            "name": "Base64",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Base64.html",
            "description": "This class consists exclusively of static methods for obtaining encoders and decoders for the Base64 encoding scheme. "
        },
        {
            "name": "Base64.Decoder",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Base64.Decoder.html",
            "description": "This class implements a decoder for decoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045. "
        },
        {
            "name": "Base64.Encoder",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Base64.Encoder.html",
            "description": "This class implements an encoder for encoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045. "
        },
        {
            "name": "BaselineTIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/BaselineTIFFTagSet.html",
            "description": "A class representing the set of tags found in the baseline TIFF specification as well as some common additional tags. "
        },
        {
            "name": "BaseMultiResolutionImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BaseMultiResolutionImage.html",
            "description": "This class is an array-based implementation of the AbstractMultiResolutionImage class. "
        },
        {
            "name": "BaseRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html",
            "description": "An abstract class providing a RowSet object with its basic functionality. "
        },
        {
            "name": "BaseStream",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/BaseStream.html",
            "description": "Base interface for streams, which are sequences of elements supporting sequential and parallel aggregate operations. "
        },
        {
            "name": "BasicArrowButton",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicArrowButton.html",
            "description": "JButton object that draws a scaled Arrow in one of the cardinal directions. "
        },
        {
            "name": "BasicAttribute",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/BasicAttribute.html",
            "description": "This class provides a basic implementation of the Attribute interface. "
        },
        {
            "name": "BasicAttributes",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/BasicAttributes.html",
            "description": "This class provides a basic implementation of the Attributes interface. "
        },
        {
            "name": "BasicAuthenticator",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/BasicAuthenticator.html",
            "description": "BasicAuthenticator provides an implementation of HTTP Basic authentication. "
        },
        {
            "name": "BasicBorders",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.html",
            "description": "Factory object that can vend Borders appropriate for the basic L & F. "
        },
        {
            "name": "BasicBorders.ButtonBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.ButtonBorder.html",
            "description": "Draws a border around a button. "
        },
        {
            "name": "BasicBorders.FieldBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.FieldBorder.html",
            "description": "Draws the border around a field. "
        },
        {
            "name": "BasicBorders.MarginBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.MarginBorder.html",
            "description": "Draws the border around components which support margins. "
        },
        {
            "name": "BasicBorders.MenuBarBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.MenuBarBorder.html",
            "description": "Draws the border around a menu bar. "
        },
        {
            "name": "BasicBorders.RadioButtonBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.RadioButtonBorder.html",
            "description": "Draws the border around a radio button. "
        },
        {
            "name": "BasicBorders.RolloverButtonBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.RolloverButtonBorder.html",
            "description": "Special thin border for rollover toolbar buttons. "
        },
        {
            "name": "BasicBorders.SplitPaneBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.SplitPaneBorder.html",
            "description": "Draws the border around the splitpane. "
        },
        {
            "name": "BasicBorders.ToggleButtonBorder",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicBorders.ToggleButtonBorder.html",
            "description": "Draws the border around a toggle button. "
        },
        {
            "name": "BasicButtonListener",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicButtonListener.html",
            "description": "Button Listener "
        },
        {
            "name": "BasicButtonUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicButtonUI.html",
            "description": "BasicButton implementation "
        },
        {
            "name": "BasicCheckBoxMenuItemUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicCheckBoxMenuItemUI.html",
            "description": "BasicCheckboxMenuItem implementation "
        },
        {
            "name": "BasicCheckBoxUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicCheckBoxUI.html",
            "description": "CheckboxUI implementation for BasicCheckboxUI "
        },
        {
            "name": "BasicColorChooserUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicColorChooserUI.html",
            "description": "Provides the basic look and feel for a JColorChooser. "
        },
        {
            "name": "BasicComboBoxEditor",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxEditor.html",
            "description": "The default editor for editable combo boxes. "
        },
        {
            "name": "BasicComboBoxEditor.UIResource",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxEditor.UIResource.html",
            "description": "A subclass of BasicComboBoxEditor that implements UIResource. "
        },
        {
            "name": "BasicComboBoxRenderer",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxRenderer.html",
            "description": "ComboBox renderer "
        },
        {
            "name": "BasicComboBoxRenderer.UIResource",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxRenderer.UIResource.html",
            "description": "A subclass of BasicComboBoxRenderer that implements UIResource. "
        },
        {
            "name": "BasicComboBoxUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html",
            "description": "Basic UI implementation for JComboBox. "
        },
        {
            "name": "BasicComboPopup",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboPopup.html",
            "description": "This is a basic implementation of the ComboPopup interface. "
        },
        {
            "name": "BasicControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/BasicControl.html",
            "description": "This class provides a basic implementation of the Control interface. "
        },
        {
            "name": "BasicDesktopIconUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicDesktopIconUI.html",
            "description": "Basic L&F for a minimized window on a desktop. "
        },
        {
            "name": "BasicDesktopPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicDesktopPaneUI.html",
            "description": "Basic L&F for a desktop. "
        },
        {
            "name": "BasicDirectoryModel",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicDirectoryModel.html",
            "description": "Basic implementation of a file list. "
        },
        {
            "name": "BasicEditorPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicEditorPaneUI.html",
            "description": "Provides the look and feel for a JEditorPane. "
        },
        {
            "name": "BasicFileAttributes",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/BasicFileAttributes.html",
            "description": "Basic attributes associated with a file in a file system. "
        },
        {
            "name": "BasicFileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/BasicFileAttributeView.html",
            "description": "A file attribute view that provides a view of a basic set of file attributes common to many file systems. "
        },
        {
            "name": "BasicFileChooserUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicFileChooserUI.html",
            "description": "Basic L&F implementation of a FileChooser. "
        },
        {
            "name": "BasicFormattedTextFieldUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicFormattedTextFieldUI.html",
            "description": "Provides the look and feel implementation for JFormattedTextField . "
        },
        {
            "name": "BasicGraphicsUtils",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicGraphicsUtils.html",
            "description": "Convenient util class. "
        },
        {
            "name": "BasicHTML",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicHTML.html",
            "description": "Support for providing html views for the swing components. "
        },
        {
            "name": "BasicIconFactory",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicIconFactory.html",
            "description": "Factory object that can vend Icons appropriate for the basic L & F. "
        },
        {
            "name": "BasicInternalFrameTitlePane",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicInternalFrameTitlePane.html",
            "description": "The class that manages a basic title bar "
        },
        {
            "name": "BasicInternalFrameUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicInternalFrameUI.html",
            "description": "A basic L&F implementation of JInternalFrame. "
        },
        {
            "name": "BasicLabelUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicLabelUI.html",
            "description": "A Windows L&F implementation of LabelUI. "
        },
        {
            "name": "BasicListUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html",
            "description": "An extensible implementation of ListUI . "
        },
        {
            "name": "BasicLookAndFeel",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html",
            "description": "A base class to use in creating a look and feel for Swing. "
        },
        {
            "name": "BasicMenuBarUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicMenuBarUI.html",
            "description": "A default L&F implementation of MenuBarUI. "
        },
        {
            "name": "BasicMenuItemUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicMenuItemUI.html",
            "description": "BasicMenuItem implementation "
        },
        {
            "name": "BasicMenuUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicMenuUI.html",
            "description": "A default L&F implementation of MenuUI. "
        },
        {
            "name": "BasicOptionPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicOptionPaneUI.html",
            "description": "Provides the basic look and feel for a JOptionPane . "
        },
        {
            "name": "BasicOptionPaneUI.ButtonAreaLayout",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicOptionPaneUI.ButtonAreaLayout.html",
            "description": "ButtonAreaLayout behaves in a similar manner to FlowLayout . "
        },
        {
            "name": "BasicPanelUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicPanelUI.html",
            "description": "BasicPanel implementation "
        },
        {
            "name": "BasicPasswordFieldUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicPasswordFieldUI.html",
            "description": "Provides the Windows look and feel for a password field. "
        },
        {
            "name": "BasicPermission",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/BasicPermission.html",
            "description": "The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission. "
        },
        {
            "name": "BasicPopupMenuSeparatorUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicPopupMenuSeparatorUI.html",
            "description": "A Basic L&F implementation of PopupMenuSeparatorUI. "
        },
        {
            "name": "BasicPopupMenuUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicPopupMenuUI.html",
            "description": "A Windows L&F implementation of PopupMenuUI. "
        },
        {
            "name": "BasicProgressBarUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicProgressBarUI.html",
            "description": "A Basic L&F implementation of ProgressBarUI. "
        },
        {
            "name": "BasicRadioButtonMenuItemUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicRadioButtonMenuItemUI.html",
            "description": "BasicRadioButtonMenuItem implementation "
        },
        {
            "name": "BasicRadioButtonUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicRadioButtonUI.html",
            "description": "RadioButtonUI implementation for BasicRadioButtonUI "
        },
        {
            "name": "BasicRootPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicRootPaneUI.html",
            "description": "Basic implementation of RootPaneUI, there is one shared between all JRootPane instances. "
        },
        {
            "name": "BasicScrollBarUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicScrollBarUI.html",
            "description": "Implementation of ScrollBarUI for the Basic Look and Feel "
        },
        {
            "name": "BasicScrollPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicScrollPaneUI.html",
            "description": "A default L&F implementation of ScrollPaneUI. "
        },
        {
            "name": "BasicSeparatorUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicSeparatorUI.html",
            "description": "A Basic L&F implementation of SeparatorUI. "
        },
        {
            "name": "BasicSliderUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html",
            "description": "A Basic L&F implementation of SliderUI. "
        },
        {
            "name": "BasicSpinnerUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicSpinnerUI.html",
            "description": "The default Spinner UI delegate. "
        },
        {
            "name": "BasicSplitPaneDivider",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicSplitPaneDivider.html",
            "description": "Divider used by BasicSplitPaneUI. "
        },
        {
            "name": "BasicSplitPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicSplitPaneUI.html",
            "description": "A Basic L&F implementation of the SplitPaneUI. "
        },
        {
            "name": "BasicStroke",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/BasicStroke.html",
            "description": "The BasicStroke class defines a basic set of rendering attributes for the outlines of graphics primitives, which are rendered with a Graphics2D object that has its Stroke attribute set to this BasicStroke . "
        },
        {
            "name": "BasicTabbedPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTabbedPaneUI.html",
            "description": "A Basic L&F implementation of TabbedPaneUI. "
        },
        {
            "name": "BasicTableHeaderUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTableHeaderUI.html",
            "description": "BasicTableHeaderUI implementation "
        },
        {
            "name": "BasicTableUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTableUI.html",
            "description": "BasicTableUI implementation "
        },
        {
            "name": "BasicTextAreaUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextAreaUI.html",
            "description": "Provides the look and feel for a plain text editor. "
        },
        {
            "name": "BasicTextFieldUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextFieldUI.html",
            "description": "Basis of a look and feel for a JTextField. "
        },
        {
            "name": "BasicTextPaneUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextPaneUI.html",
            "description": "Provides the look and feel for a styled text editor. "
        },
        {
            "name": "BasicTextUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html",
            "description": "Basis of a text components look-and-feel. "
        },
        {
            "name": "BasicTextUI.BasicCaret",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.BasicCaret.html",
            "description": "Default implementation of the interface Caret . "
        },
        {
            "name": "BasicTextUI.BasicHighlighter",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.BasicHighlighter.html",
            "description": "Default implementation of the interface Highlighter . "
        },
        {
            "name": "BasicToggleButtonUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicToggleButtonUI.html",
            "description": "BasicToggleButton implementation "
        },
        {
            "name": "BasicToolBarSeparatorUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarSeparatorUI.html",
            "description": "A Basic L&F implementation of ToolBarSeparatorUI. "
        },
        {
            "name": "BasicToolBarUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html",
            "description": "A Basic L&F implementation of ToolBarUI. "
        },
        {
            "name": "BasicToolTipUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolTipUI.html",
            "description": "Standard tool tip L&F. "
        },
        {
            "name": "BasicTreeUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicTreeUI.html",
            "description": "The basic L&F for a hierarchical data structure. "
        },
        {
            "name": "BasicViewportUI",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/BasicViewportUI.html",
            "description": "BasicViewport implementation "
        },
        {
            "name": "BatchUpdateException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/BatchUpdateException.html",
            "description": "The subclass of SQLException thrown when an error occurs during a batch update operation. "
        },
        {
            "name": "BeanContext",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContext.html",
            "description": "The BeanContext acts a logical hierarchical container for JavaBeans. "
        },
        {
            "name": "BeanContextChild",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextChild.html",
            "description": "JavaBeans wishing to be nested within, and obtain a reference to their execution environment, or context, as defined by the BeanContext sub-interface shall implement this interface. "
        },
        {
            "name": "BeanContextChildComponentProxy",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextChildComponentProxy.html",
            "description": "This interface is implemented by BeanContextChildren that have an AWT Component associated with them. "
        },
        {
            "name": "BeanContextChildSupport",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextChildSupport.html",
            "description": "This is a general support class to provide support for implementing the BeanContextChild protocol. "
        },
        {
            "name": "BeanContextContainerProxy",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextContainerProxy.html",
            "description": "This interface is implemented by BeanContexts' that have an AWT Container associated with them. "
        },
        {
            "name": "BeanContextEvent",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextEvent.html",
            "description": "BeanContextEvent is the abstract root event class for all events emitted from, and pertaining to the semantics of, a BeanContext . "
        },
        {
            "name": "BeanContextMembershipEvent",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextMembershipEvent.html",
            "description": "A BeanContextMembershipEvent encapsulates the list of children added to, or removed from, the membership of a particular BeanContext . "
        },
        {
            "name": "BeanContextMembershipListener",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextMembershipListener.html",
            "description": "Compliant BeanContexts fire events on this interface when the state of the membership of the BeanContext changes. "
        },
        {
            "name": "BeanContextProxy",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextProxy.html",
            "description": "This interface is implemented by a JavaBean that does not directly have a BeanContext(Child) associated with it (via implementing that interface or a subinterface thereof), but has a public BeanContext(Child) delegated from it. "
        },
        {
            "name": "BeanContextServiceAvailableEvent",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServiceAvailableEvent.html",
            "description": "This event type is used by the BeanContextServicesListener in order to identify the service being registered. "
        },
        {
            "name": "BeanContextServiceProvider",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServiceProvider.html",
            "description": "One of the primary functions of a BeanContext is to act a as rendezvous between JavaBeans, and BeanContextServiceProviders. "
        },
        {
            "name": "BeanContextServiceProviderBeanInfo",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServiceProviderBeanInfo.html",
            "description": "A BeanContextServiceProvider implementor who wishes to provide explicit information about the services their bean may provide shall implement a BeanInfo class that implements this BeanInfo subinterface and provides explicit information about the methods, properties, events, etc, of their services. "
        },
        {
            "name": "BeanContextServiceRevokedEvent",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServiceRevokedEvent.html",
            "description": "This event type is used by the BeanContextServiceRevokedListener in order to identify the service being revoked. "
        },
        {
            "name": "BeanContextServiceRevokedListener",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServiceRevokedListener.html",
            "description": "The listener interface for receiving BeanContextServiceRevokedEvent objects. "
        },
        {
            "name": "BeanContextServices",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServices.html",
            "description": "The BeanContextServices interface provides a mechanism for a BeanContext to expose generic \"services\" to the BeanContextChild objects within. "
        },
        {
            "name": "BeanContextServicesListener",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServicesListener.html",
            "description": "The listener interface for receiving BeanContextServiceAvailableEvent objects. "
        },
        {
            "name": "BeanContextServicesSupport",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServicesSupport.html",
            "description": "This helper class provides a utility implementation of the java.beans.beancontext.BeanContextServices interface. "
        },
        {
            "name": "BeanContextServicesSupport.BCSSServiceProvider",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextServicesSupport.BCSSServiceProvider.html",
            "description": "subclasses may subclass this nested class to add behaviors for each BeanContextServicesProvider. "
        },
        {
            "name": "BeanContextSupport",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextSupport.html",
            "description": "This helper class provides a utility implementation of the java.beans.beancontext.BeanContext interface. "
        },
        {
            "name": "BeanContextSupport.BCSIterator",
            "package": "java.beans.beancontext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/beancontext/BeanContextSupport.BCSIterator.html",
            "description": "protected final subclass that encapsulates an iterator but implements a noop remove() method. "
        },
        {
            "name": "BeanDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/BeanDescriptor.html",
            "description": "A BeanDescriptor provides global information about a \"bean\", including its Java class, its displayName, etc. "
        },
        {
            "name": "BeanInfo",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/BeanInfo.html",
            "description": "Use the BeanInfo interface to create a BeanInfo class and provide explicit information about the methods, properties, events, and other features of your beans. "
        },
        {
            "name": "BeanProperty",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/BeanProperty.html",
            "description": "An annotation used to specify some property-related information for the automatically generated BeanInfo classes. "
        },
        {
            "name": "Beans",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Beans.html",
            "description": "This class provides some general purpose beans control methods. "
        },
        {
            "name": "BeansLinker",
            "package": "jdk.dynalink.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/beans/BeansLinker.html",
            "description": "A linker for ordinary Java objects. "
        },
        {
            "name": "BevelBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/BevelBorder.html",
            "description": "A class which implements a simple two-line bevel border. "
        },
        {
            "name": "BiConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/BiConsumer.html",
            "description": "Represents an operation that accepts two input arguments and returns no result. "
        },
        {
            "name": "Bidi",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Bidi.html",
            "description": "This class implements the Unicode Bidirectional Algorithm. "
        },
        {
            "name": "BiFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/BiFunction.html",
            "description": "Represents a function that accepts two arguments and produces a result. "
        },
        {
            "name": "BigDecimal",
            "package": "java.math",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/math/BigDecimal.html",
            "description": "Immutable, arbitrary-precision signed decimal numbers. "
        },
        {
            "name": "BigInteger",
            "package": "java.math",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/math/BigInteger.html",
            "description": "Immutable arbitrary-precision integers. "
        },
        {
            "name": "BinaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/BinaryOperator.html",
            "description": "Represents an operation upon two operands of the same type, producing a result of the same type as the operands. "
        },
        {
            "name": "BinaryRefAddr",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/BinaryRefAddr.html",
            "description": "This class represents the binary form of the address of a communications end-point. "
        },
        {
            "name": "BinaryTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/BinaryTree.html",
            "description": "A tree node for a binary expression. "
        },
        {
            "name": "BindException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/BindException.html",
            "description": "Signals that an error occurred while attempting to bind a socket to a local address and port. "
        },
        {
            "name": "Binding",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/Binding.html",
            "description": "This class represents a name-to-object binding found in a context. "
        },
        {
            "name": "BindingPatternTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/BindingPatternTree.html",
            "description": "Associated with pattern matching for instanceof, a preview feature of           the Java language. A binding pattern tree "
        },
        {
            "name": "Bindings",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/Bindings.html",
            "description": "A mapping of key/value pairs, all of whose keys are Strings . "
        },
        {
            "name": "BiPredicate",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/BiPredicate.html",
            "description": "Represents a predicate (boolean-valued function) of two arguments. "
        },
        {
            "name": "BitSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/BitSet.html",
            "description": "This class implements a vector of bits that grows as needed. "
        },
        {
            "name": "Blob",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Blob.html",
            "description": "The representation (mapping) in the Java programming language of an SQL BLOB value. "
        },
        {
            "name": "BlockingDeque",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/BlockingDeque.html",
            "description": "A Deque that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element. "
        },
        {
            "name": "BlockingQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/BlockingQueue.html",
            "description": "A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element. "
        },
        {
            "name": "BlockTagTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/BlockTagTree.html",
            "description": "A tree node used as the base class for the different types of block tags. "
        },
        {
            "name": "BlockTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/BlockTree.html",
            "description": "A tree node for a statement block. "
        },
        {
            "name": "BlockView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/BlockView.html",
            "description": "A view implementation to display a block (as a box) with CSS specifications. "
        },
        {
            "name": "BMPImageWriteParam",
            "package": "javax.imageio.plugins.bmp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/bmp/BMPImageWriteParam.html",
            "description": "A subclass of ImageWriteParam for encoding images in the BMP format. "
        },
        {
            "name": "Book",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/Book.html",
            "description": "The Book class provides a representation of a document in which pages may have different page formats and page painters. "
        },
        {
            "name": "Boolean",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Boolean.html",
            "description": "The Boolean class wraps a value of the primitive type boolean in an object. "
        },
        {
            "name": "BooleanControl",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/BooleanControl.html",
            "description": "A BooleanControl provides the ability to switch between two possible settings that affect a line's audio. "
        },
        {
            "name": "BooleanControl.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/BooleanControl.Type.html",
            "description": "An instance of the BooleanControl.Type class identifies one kind of boolean control. "
        },
        {
            "name": "BooleanFlag",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/BooleanFlag.html",
            "description": "Event field annotation, specifies that the value is a boolean flag, a true or false value. "
        },
        {
            "name": "BooleanSupplier",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/BooleanSupplier.html",
            "description": "Represents a supplier of boolean -valued results. "
        },
        {
            "name": "BooleanType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/BooleanType.html",
            "description": "The type of all primitive boolean values accessed in the target VM. "
        },
        {
            "name": "BooleanValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/BooleanValue.html",
            "description": "Provides access to a primitive boolean value in the target VM. "
        },
        {
            "name": "Bootstrap",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Bootstrap.html",
            "description": "Initial class that provides access to the default implementation of JDI interfaces. "
        },
        {
            "name": "BootstrapMethodError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/BootstrapMethodError.html",
            "description": "Thrown to indicate that an invokedynamic instruction or a dynamic constant failed to resolve its bootstrap method and arguments, or for invokedynamic instruction the bootstrap method has failed to provide a call site with a target of the correct method type , or for a dynamic constant the bootstrap method has failed to provide a constant value of the required type. "
        },
        {
            "name": "Border",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/Border.html",
            "description": "Interface describing an object capable of rendering a border around the edges of a swing component. "
        },
        {
            "name": "BorderFactory",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/BorderFactory.html",
            "description": "Factory class for vending standard Border objects. "
        },
        {
            "name": "BorderLayout",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/BorderLayout.html",
            "description": "A border layout lays out a container, arranging and resizing its components to fit in five regions: north, south, east, west, and center. "
        },
        {
            "name": "BorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.html",
            "description": "A Border wrapper class which implements UIResource. "
        },
        {
            "name": "BorderUIResource.BevelBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.BevelBorderUIResource.html",
            "description": "A bevel border UI resource. "
        },
        {
            "name": "BorderUIResource.CompoundBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.CompoundBorderUIResource.html",
            "description": "A compound border UI resource. "
        },
        {
            "name": "BorderUIResource.EmptyBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.EmptyBorderUIResource.html",
            "description": "An empty border UI resource. "
        },
        {
            "name": "BorderUIResource.EtchedBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.EtchedBorderUIResource.html",
            "description": "An etched border UI resource. "
        },
        {
            "name": "BorderUIResource.LineBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.LineBorderUIResource.html",
            "description": "A line border UI resource. "
        },
        {
            "name": "BorderUIResource.MatteBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.MatteBorderUIResource.html",
            "description": "A matte border UI resource. "
        },
        {
            "name": "BorderUIResource.TitledBorderUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.TitledBorderUIResource.html",
            "description": "A titled border UI resource. "
        },
        {
            "name": "BoundedRangeModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/BoundedRangeModel.html",
            "description": "Defines the data model used by components like Slider s and ProgressBar s. "
        },
        {
            "name": "Box",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Box.html",
            "description": "A lightweight container that uses a BoxLayout object as its layout manager. "
        },
        {
            "name": "Box.Filler",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Box.Filler.html",
            "description": "An implementation of a lightweight component that participates in layout but has no view. "
        },
        {
            "name": "BoxLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/BoxLayout.html",
            "description": "A layout manager that allows multiple components to be laid out either vertically or horizontally. "
        },
        {
            "name": "BoxView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/BoxView.html",
            "description": "A view that arranges its children into a box shape by tiling its children along an axis. "
        },
        {
            "name": "BreakIterator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/BreakIterator.html",
            "description": "The BreakIterator class implements methods for finding the location of boundaries in text. "
        },
        {
            "name": "BreakIteratorProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/BreakIteratorProvider.html",
            "description": "An abstract class for service providers that provide concrete implementations of the BreakIterator class. "
        },
        {
            "name": "BreakpointEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/BreakpointEvent.html",
            "description": "Notification of a breakpoint in the target VM. "
        },
        {
            "name": "BreakpointRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/BreakpointRequest.html",
            "description": "Identifies a Location in the target VM at which execution should be stopped. "
        },
        {
            "name": "BreakTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/BreakTree.html",
            "description": "A tree node for a break statement. "
        },
        {
            "name": "BrokenBarrierException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/BrokenBarrierException.html",
            "description": "Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting. "
        },
        {
            "name": "Buffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/Buffer.html",
            "description": "A container for data of a specific primitive type. "
        },
        {
            "name": "BufferCapabilities",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/BufferCapabilities.html",
            "description": "Capabilities and properties of buffers. "
        },
        {
            "name": "BufferCapabilities.FlipContents",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/BufferCapabilities.FlipContents.html",
            "description": "A type-safe enumeration of the possible back buffer contents after page-flipping "
        },
        {
            "name": "BufferedImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BufferedImage.html",
            "description": "The BufferedImage subclass describes an Image with an accessible buffer of image data. "
        },
        {
            "name": "BufferedImageFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BufferedImageFilter.html",
            "description": "The BufferedImageFilter class subclasses an ImageFilter to provide a simple means of using a single-source/single-destination image operator ( BufferedImageOp ) to filter a BufferedImage in the Image Producer/Consumer/Observer paradigm. "
        },
        {
            "name": "BufferedImageOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BufferedImageOp.html",
            "description": "This interface describes single-input/single-output operations performed on BufferedImage objects. "
        },
        {
            "name": "BufferedInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/BufferedInputStream.html",
            "description": "A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods. "
        },
        {
            "name": "BufferedOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/BufferedOutputStream.html",
            "description": "The class implements a buffered output stream. "
        },
        {
            "name": "BufferedReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/BufferedReader.html",
            "description": "Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines. "
        },
        {
            "name": "BufferedWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/BufferedWriter.html",
            "description": "Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings. "
        },
        {
            "name": "BufferOverflowException",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/BufferOverflowException.html",
            "description": "Unchecked exception thrown when a relative put operation reaches the target buffer's limit. "
        },
        {
            "name": "BufferPoolMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/BufferPoolMXBean.html",
            "description": "The management interface for a buffer pool, for example a pool of direct or mapped buffers. "
        },
        {
            "name": "BufferStrategy",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/BufferStrategy.html",
            "description": "The BufferStrategy class represents the mechanism with which to organize complex memory on a particular Canvas or Window . "
        },
        {
            "name": "BufferUnderflowException",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/BufferUnderflowException.html",
            "description": "Unchecked exception thrown when a relative get operation reaches the source buffer's limit. "
        },
        {
            "name": "Button",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Button.html",
            "description": "This class creates a labeled button. "
        },
        {
            "name": "ButtonGroup",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ButtonGroup.html",
            "description": "This class is used to create a multiple-exclusion scope for a set of buttons. "
        },
        {
            "name": "ButtonModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ButtonModel.html",
            "description": "State model for buttons. "
        },
        {
            "name": "ButtonUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ButtonUI.html",
            "description": "Pluggable look and feel interface for JButton. "
        },
        {
            "name": "Byte",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Byte.html",
            "description": "The Byte class wraps a value of primitive type byte in an object. "
        },
        {
            "name": "ByteArrayInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ByteArrayInputStream.html",
            "description": "A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream. "
        },
        {
            "name": "ByteArrayOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ByteArrayOutputStream.html",
            "description": "This class implements an output stream in which the data is written into a byte array. "
        },
        {
            "name": "ByteBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/ByteBuffer.html",
            "description": "A byte buffer. "
        },
        {
            "name": "ByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ByteChannel.html",
            "description": "A channel that can read and write bytes. "
        },
        {
            "name": "ByteLookupTable",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ByteLookupTable.html",
            "description": "This class defines a lookup table object. "
        },
        {
            "name": "ByteOrder",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/ByteOrder.html",
            "description": "A typesafe enumeration for byte orders. "
        },
        {
            "name": "ByteType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ByteType.html",
            "description": "The type of all primitive byte values accessed in the target VM. "
        },
        {
            "name": "ByteValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ByteValue.html",
            "description": "Provides access to a primitive byte value in the target VM. "
        },
        {
            "name": "C14NMethodParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/C14NMethodParameterSpec.html",
            "description": "A specification of algorithm parameters for a CanonicalizationMethod Algorithm. "
        },
        {
            "name": "CachedRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/CachedRowSet.html",
            "description": "The interface that all standard implementations of CachedRowSet must implement. "
        },
        {
            "name": "CacheRequest",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CacheRequest.html",
            "description": "Represents channels for storing resources in the ResponseCache. "
        },
        {
            "name": "CacheResponse",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CacheResponse.html",
            "description": "Represent channels for retrieving resources from the ResponseCache. "
        },
        {
            "name": "Calendar",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Calendar.html",
            "description": "The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR , MONTH , DAY_OF_MONTH , HOUR , and so on, and for manipulating the calendar fields, such as getting the date of the next week. "
        },
        {
            "name": "Calendar.Builder",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Calendar.Builder.html",
            "description": "Calendar.Builder is used for creating a Calendar from various date-time parameters. "
        },
        {
            "name": "CalendarDataProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/CalendarDataProvider.html",
            "description": "An abstract class for service providers that provide locale-dependent Calendar parameters. "
        },
        {
            "name": "CalendarNameProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/CalendarNameProvider.html",
            "description": "An abstract class for service providers that provide localized string representations (display names) of Calendar field values. "
        },
        {
            "name": "Callable",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Callable.html",
            "description": "A task that returns a result and may throw an exception. "
        },
        {
            "name": "CallableStatement",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/CallableStatement.html",
            "description": "The interface used to execute SQL stored procedures. "
        },
        {
            "name": "Callback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/Callback.html",
            "description": "Implementations of this interface are passed to a CallbackHandler , allowing underlying security services the ability to interact with a calling application to retrieve specific authentication data such as usernames and passwords, or to display certain information, such as error and warning messages. "
        },
        {
            "name": "CallbackHandler",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/CallbackHandler.html",
            "description": "An application implements a CallbackHandler and passes it to underlying security services so that they may interact with the application to retrieve specific authentication data, such as usernames and passwords, or to display certain information, such as error and warning messages. "
        },
        {
            "name": "CallSite",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/CallSite.html",
            "description": "A CallSite is a holder for a variable MethodHandle , which is called its target . "
        },
        {
            "name": "CallSiteDescriptor",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/CallSiteDescriptor.html",
            "description": "Call site descriptors contain all the information necessary for linking a call site. "
        },
        {
            "name": "CancelablePrintJob",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/CancelablePrintJob.html",
            "description": "This interface is used by a printing application to cancel a print job. "
        },
        {
            "name": "CancellationException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CancellationException.html",
            "description": "Exception indicating that the result of a value-producing task, such as a FutureTask , cannot be retrieved because the task was cancelled. "
        },
        {
            "name": "CancelledKeyException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/CancelledKeyException.html",
            "description": "Unchecked exception thrown when an attempt is made to use a selection key that is no longer valid. "
        },
        {
            "name": "CannotProceedException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/CannotProceedException.html",
            "description": "This exception is thrown to indicate that the operation reached a point in the name where the operation cannot proceed any further. "
        },
        {
            "name": "CannotRedoException",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/CannotRedoException.html",
            "description": "Thrown when an UndoableEdit is told to redo() and can't. "
        },
        {
            "name": "CannotUndoException",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/CannotUndoException.html",
            "description": "Thrown when an UndoableEdit is told to undo() and can't. "
        },
        {
            "name": "CanonicalizationMethod",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/CanonicalizationMethod.html",
            "description": "A representation of the XML CanonicalizationMethod element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "Canvas",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Canvas.html",
            "description": "A Canvas component represents a blank rectangular area of the screen onto which the application can draw or from which the application can trap input events from the user. "
        },
        {
            "name": "Card",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/Card.html",
            "description": "A Smart Card with which a connection has been established. "
        },
        {
            "name": "CardChannel",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardChannel.html",
            "description": "A logical channel connection to a Smart Card. "
        },
        {
            "name": "CardException",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardException.html",
            "description": "Exception for errors that occur during communication with the Smart Card stack or the card itself. "
        },
        {
            "name": "CardLayout",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/CardLayout.html",
            "description": "A CardLayout object is a layout manager for a container. "
        },
        {
            "name": "CardNotPresentException",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardNotPresentException.html",
            "description": "Exception thrown when an application tries to establish a connection with a terminal that has no card present. "
        },
        {
            "name": "CardPermission",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardPermission.html",
            "description": "A permission for Smart Card operations. "
        },
        {
            "name": "CardTerminal",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardTerminal.html",
            "description": "A Smart Card terminal, sometimes referred to as a Smart Card Reader. "
        },
        {
            "name": "CardTerminals",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardTerminals.html",
            "description": "The set of terminals supported by a TerminalFactory. "
        },
        {
            "name": "CardTerminals.State",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CardTerminals.State.html",
            "description": "Enumeration of attributes of a CardTerminal. "
        },
        {
            "name": "Caret",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Caret.html",
            "description": "A place within a document view that represents where things can be inserted into the document model. "
        },
        {
            "name": "CaretEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/CaretEvent.html",
            "description": "CaretEvent is used to notify interested parties that the text caret has changed in the event source. "
        },
        {
            "name": "CaretListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/CaretListener.html",
            "description": "Listener for changes in the caret position of a text component. "
        },
        {
            "name": "CaseTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/CaseTree.html",
            "description": "A tree node for a case in a switch statement or expression. "
        },
        {
            "name": "CaseTree.CaseKind",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/CaseTree.CaseKind.html",
            "description": "The syntactic form of this case:      STATEMENT: case <expression>: <statements> RULE: case <expression> -> <expression>/<statement> "
        },
        {
            "name": "Catalog",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/Catalog.html",
            "description": "The Catalog class represents an entity Catalog as defined by XML Catalogs, OASIS Standard V1.1, 7 October 2005 . "
        },
        {
            "name": "CatalogException",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogException.html",
            "description": "The exception class handles errors that may happen while processing or using a catalog. "
        },
        {
            "name": "CatalogFeatures",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogFeatures.html",
            "description": "The CatalogFeatures holds a collection of features and properties. "
        },
        {
            "name": "CatalogFeatures.Builder",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogFeatures.Builder.html",
            "description": "The Builder class for building the CatalogFeatures object. "
        },
        {
            "name": "CatalogFeatures.Feature",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogFeatures.Feature.html",
            "description": "A Feature type as defined in the Catalog Features table . "
        },
        {
            "name": "CatalogManager",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogManager.html",
            "description": "The Catalog Manager manages the creation of XML Catalogs and Catalog Resolvers. "
        },
        {
            "name": "CatalogResolver",
            "package": "javax.xml.catalog",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/catalog/CatalogResolver.html",
            "description": "A Catalog Resolver that implements SAX EntityResolver , StAX XMLResolver , DOM LS LSResourceResolver used by Schema Validation, and Transform URIResolver , and resolves external references using catalogs. "
        },
        {
            "name": "CatchTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/CatchTree.html",
            "description": "A tree node for a catch block in a try statement. "
        },
        {
            "name": "Category",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Category.html",
            "description": "Event annotation, to associate the event type with a category, in the format of a human-readable path. "
        },
        {
            "name": "CDATASection",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/CDATASection.html",
            "description": "CDATA sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. "
        },
        {
            "name": "CellEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/CellEditor.html",
            "description": "This interface defines the methods any general editor should be able to implement. "
        },
        {
            "name": "CellEditorListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/CellEditorListener.html",
            "description": "CellEditorListener defines the interface for an object that listens to changes in a CellEditor "
        },
        {
            "name": "CellRendererPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/CellRendererPane.html",
            "description": "This class is inserted in between cell renderers and the components that use them. "
        },
        {
            "name": "Certificate",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/Certificate.html",
            "description": "Abstract class for managing a variety of identity certificates. "
        },
        {
            "name": "Certificate",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Certificate.html",
            "description": "This class is deprecated and subject to removal in a future     version of Java SE. "
        },
        {
            "name": "Certificate",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/Certificate.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "Certificate.CertificateRep",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/Certificate.CertificateRep.html",
            "description": "Alternate Certificate class for serialization. "
        },
        {
            "name": "CertificateEncodingException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateEncodingException.html",
            "description": "Certificate Encoding Exception. "
        },
        {
            "name": "CertificateEncodingException",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/CertificateEncodingException.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "CertificateException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateException.html",
            "description": "This exception indicates one of a variety of certificate problems. "
        },
        {
            "name": "CertificateException",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/CertificateException.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "CertificateExpiredException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateExpiredException.html",
            "description": "Certificate Expired Exception. "
        },
        {
            "name": "CertificateExpiredException",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/CertificateExpiredException.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "CertificateFactory",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateFactory.html",
            "description": "This class defines the functionality of a certificate factory, which is used to generate certificate, certification path ( CertPath ) and certificate revocation list (CRL) objects from their encodings. "
        },
        {
            "name": "CertificateFactorySpi",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateFactorySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the CertificateFactory class. "
        },
        {
            "name": "CertificateNotYetValidException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateNotYetValidException.html",
            "description": "Certificate is not yet valid exception. "
        },
        {
            "name": "CertificateNotYetValidException",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/CertificateNotYetValidException.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "CertificateParsingException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateParsingException.html",
            "description": "Certificate Parsing Exception. "
        },
        {
            "name": "CertificateParsingException",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/CertificateParsingException.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "CertificateRevokedException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertificateRevokedException.html",
            "description": "An exception that indicates an X.509 certificate is revoked. "
        },
        {
            "name": "CertPath",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPath.html",
            "description": "An immutable sequence of certificates (a certification path). "
        },
        {
            "name": "CertPath.CertPathRep",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPath.CertPathRep.html",
            "description": "Alternate CertPath class for serialization. "
        },
        {
            "name": "CertPathBuilder",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathBuilder.html",
            "description": "A class for building certification paths (also known as certificate chains). "
        },
        {
            "name": "CertPathBuilderException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathBuilderException.html",
            "description": "An exception indicating one of a variety of problems encountered when building a certification path with a CertPathBuilder . "
        },
        {
            "name": "CertPathBuilderResult",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathBuilderResult.html",
            "description": "A specification of the result of a certification path builder algorithm. "
        },
        {
            "name": "CertPathBuilderSpi",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathBuilderSpi.html",
            "description": "The Service Provider Interface ( SPI ) for the CertPathBuilder class. "
        },
        {
            "name": "CertPathChecker",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathChecker.html",
            "description": "Performs one or more checks on each Certificate of a CertPath . "
        },
        {
            "name": "CertPathParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathParameters.html",
            "description": "A specification of certification path algorithm parameters. "
        },
        {
            "name": "CertPathTrustManagerParameters",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/CertPathTrustManagerParameters.html",
            "description": "A wrapper for CertPathParameters. "
        },
        {
            "name": "CertPathValidator",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidator.html",
            "description": "A class for validating certification paths (also known as certificate chains). "
        },
        {
            "name": "CertPathValidatorException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidatorException.html",
            "description": "An exception indicating one of a variety of problems encountered when validating a certification path. "
        },
        {
            "name": "CertPathValidatorException.BasicReason",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidatorException.BasicReason.html",
            "description": "The BasicReason enumerates the potential reasons that a certification path of any type may be invalid. "
        },
        {
            "name": "CertPathValidatorException.Reason",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidatorException.Reason.html",
            "description": "The reason the validation algorithm failed. "
        },
        {
            "name": "CertPathValidatorResult",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidatorResult.html",
            "description": "A specification of the result of a certification path validator algorithm. "
        },
        {
            "name": "CertPathValidatorSpi",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertPathValidatorSpi.html",
            "description": "The Service Provider Interface ( SPI ) for the CertPathValidator class. "
        },
        {
            "name": "CertSelector",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertSelector.html",
            "description": "A selector that defines a set of criteria for selecting Certificate s. "
        },
        {
            "name": "CertStore",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertStore.html",
            "description": "A class for retrieving Certificate s and CRL s from a repository. "
        },
        {
            "name": "CertStoreException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertStoreException.html",
            "description": "An exception indicating one of a variety of problems retrieving certificates and CRLs from a CertStore . "
        },
        {
            "name": "CertStoreParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertStoreParameters.html",
            "description": "A specification of CertStore parameters. "
        },
        {
            "name": "CertStoreSpi",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CertStoreSpi.html",
            "description": "The Service Provider Interface ( SPI ) for the CertStore class. "
        },
        {
            "name": "ChaCha20ParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/ChaCha20ParameterSpec.html",
            "description": "This class specifies the parameters used with the ChaCha20 algorithm. "
        },
        {
            "name": "ChainedCallSite",
            "package": "jdk.dynalink.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/support/ChainedCallSite.html",
            "description": "A relinkable call site that implements a polymorphic inline caching strategy. "
        },
        {
            "name": "ChangedCharSetException",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ChangedCharSetException.html",
            "description": "ChangedCharSetException as the name indicates is an exception thrown when the charset is changed. "
        },
        {
            "name": "ChangeEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ChangeEvent.html",
            "description": "ChangeEvent is used to notify interested parties that state has changed in the event source. "
        },
        {
            "name": "ChangeListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ChangeListener.html",
            "description": "Defines an object which listens for ChangeEvents. "
        },
        {
            "name": "Channel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Channel.html",
            "description": "A nexus for I/O operations. "
        },
        {
            "name": "ChannelBinding",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/ChannelBinding.html",
            "description": "This class encapsulates the concept of caller-provided channel binding information. "
        },
        {
            "name": "Channels",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Channels.html",
            "description": "Utility methods for channels and streams. "
        },
        {
            "name": "Channels",
            "package": "jdk.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.net/jdk/nio/Channels.html",
            "description": "Defines static methods to create channels . "
        },
        {
            "name": "Channels.SelectableChannelCloser",
            "package": "jdk.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.net/jdk/nio/Channels.SelectableChannelCloser.html",
            "description": "An object used to coordinate the closing of a selectable channel created by readWriteSelectableChannel . "
        },
        {
            "name": "Character",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Character.html",
            "description": "The Character class wraps a value of the primitive type char in an object. "
        },
        {
            "name": "Character.Subset",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Character.Subset.html",
            "description": "Instances of this class represent particular subsets of the Unicode character set. "
        },
        {
            "name": "Character.UnicodeBlock",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Character.UnicodeBlock.html",
            "description": "A family of character subsets representing the character blocks in the Unicode specification. "
        },
        {
            "name": "Character.UnicodeScript",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Character.UnicodeScript.html",
            "description": "A family of character subsets representing the character scripts defined in the Unicode Standard Annex #24: Script Names . "
        },
        {
            "name": "CharacterCodingException",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CharacterCodingException.html",
            "description": "Checked exception thrown when a character encoding or decoding error occurs. "
        },
        {
            "name": "CharacterData",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/CharacterData.html",
            "description": "The CharacterData interface extends Node with a set of attributes and methods for accessing character data in the DOM. "
        },
        {
            "name": "CharacterIterator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/CharacterIterator.html",
            "description": "This interface defines a protocol for bidirectional iteration over text. "
        },
        {
            "name": "Characters",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/Characters.html",
            "description": "This describes the interface to Characters events. "
        },
        {
            "name": "CharArrayReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/CharArrayReader.html",
            "description": "This class implements a character buffer that can be used as a character-input stream. "
        },
        {
            "name": "CharArrayWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/CharArrayWriter.html",
            "description": "This class implements a character buffer that can be used as an Writer. "
        },
        {
            "name": "CharBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/CharBuffer.html",
            "description": "A char buffer. "
        },
        {
            "name": "CharConversionException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/CharConversionException.html",
            "description": "Base class for character conversion exceptions. "
        },
        {
            "name": "CharSequence",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/CharSequence.html",
            "description": "A CharSequence is a readable sequence of char values. "
        },
        {
            "name": "Charset",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/Charset.html",
            "description": "A named mapping between sequences of sixteen-bit Unicode code units and sequences of bytes. "
        },
        {
            "name": "CharsetDecoder",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CharsetDecoder.html",
            "description": "An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters. "
        },
        {
            "name": "CharsetEncoder",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CharsetEncoder.html",
            "description": "An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset. "
        },
        {
            "name": "CharsetProvider",
            "package": "java.nio.charset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/spi/CharsetProvider.html",
            "description": "Charset service-provider class. "
        },
        {
            "name": "CharType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/CharType.html",
            "description": "The type of all primitive char values accessed in the target VM. "
        },
        {
            "name": "CharValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/CharValue.html",
            "description": "Provides access to a primitive char value in the target VM. "
        },
        {
            "name": "Checkbox",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Checkbox.html",
            "description": "A check box is a graphical component that can be in either an \"on\" ( true ) or \"off\" ( false ) state. "
        },
        {
            "name": "CheckboxGroup",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/CheckboxGroup.html",
            "description": "The CheckboxGroup class is used to group together a set of Checkbox buttons. "
        },
        {
            "name": "CheckboxMenuItem",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/CheckboxMenuItem.html",
            "description": "This class represents a check box that can be included in a menu. "
        },
        {
            "name": "CheckedInputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/CheckedInputStream.html",
            "description": "An input stream that also maintains a checksum of the data being read. "
        },
        {
            "name": "CheckedOutputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/CheckedOutputStream.html",
            "description": "An output stream that also maintains a checksum of the data being written. "
        },
        {
            "name": "Checksum",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/Checksum.html",
            "description": "An interface representing a data checksum. "
        },
        {
            "name": "Choice",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Choice.html",
            "description": "The Choice class presents a pop-up menu of choices. "
        },
        {
            "name": "ChoiceCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/ChoiceCallback.html",
            "description": "Underlying security services instantiate and pass a ChoiceCallback to the handle method of a CallbackHandler to display a list of choices and to retrieve the selected choice(s). "
        },
        {
            "name": "ChoiceFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/ChoiceFormat.html",
            "description": "A ChoiceFormat allows you to attach a format to a range of numbers. "
        },
        {
            "name": "Chromaticity",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Chromaticity.html",
            "description": "Class Chromaticity is a printing attribute class, an enumeration, that specifies monochrome or color printing. "
        },
        {
            "name": "ChronoField",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/ChronoField.html",
            "description": "A standard set of fields. "
        },
        {
            "name": "ChronoLocalDate",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ChronoLocalDate.html",
            "description": "A date without time-of-day or time-zone in an arbitrary chronology, intended for advanced globalization use cases. "
        },
        {
            "name": "ChronoLocalDateTime",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html",
            "description": "A date-time without a time-zone in an arbitrary chronology, intended for advanced globalization use cases. "
        },
        {
            "name": "Chronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/Chronology.html",
            "description": "A calendar system, used to organize and identify dates. "
        },
        {
            "name": "ChronoPeriod",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ChronoPeriod.html",
            "description": "A date-based amount of time, such as '3 years, 4 months and 5 days' in an arbitrary chronology, intended for advanced globalization use cases. "
        },
        {
            "name": "ChronoUnit",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/ChronoUnit.html",
            "description": "A standard set of date periods units. "
        },
        {
            "name": "ChronoZonedDateTime",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ChronoZonedDateTime.html",
            "description": "A date-time with a time-zone in an arbitrary chronology, intended for advanced globalization use cases. "
        },
        {
            "name": "Cipher",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/Cipher.html",
            "description": "This class provides the functionality of a cryptographic cipher for encryption and decryption. "
        },
        {
            "name": "CipherInputStream",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/CipherInputStream.html",
            "description": "A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. "
        },
        {
            "name": "CipherOutputStream",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/CipherOutputStream.html",
            "description": "A CipherOutputStream is composed of an OutputStream and a Cipher so that write() methods first process the data before writing them out to the underlying OutputStream. "
        },
        {
            "name": "CipherSpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/CipherSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the Cipher class. "
        },
        {
            "name": "Class",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Class.html",
            "description": "Instances of the class Class represent classes and interfaces in a running Java application. "
        },
        {
            "name": "ClassCastException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassCastException.html",
            "description": "Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance. "
        },
        {
            "name": "ClassCircularityError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassCircularityError.html",
            "description": "Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded. "
        },
        {
            "name": "ClassDefinition",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/ClassDefinition.html",
            "description": "This class serves as a parameter block to the Instrumentation.redefineClasses method. "
        },
        {
            "name": "ClassDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/ClassDesc.html",
            "description": "A nominal descriptor for a Class constant. "
        },
        {
            "name": "ClassFileTransformer",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/ClassFileTransformer.html",
            "description": "A transformer of class files. "
        },
        {
            "name": "ClassFormatError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassFormatError.html",
            "description": "Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file. "
        },
        {
            "name": "ClassLoader",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassLoader.html",
            "description": "A class loader is an object that is responsible for loading classes. "
        },
        {
            "name": "ClassLoaderReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ClassLoaderReference.html",
            "description": "A class loader object from the target VM. "
        },
        {
            "name": "ClassLoaderRepository",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/ClassLoaderRepository.html",
            "description": "Instances of this interface are used to keep the list of ClassLoaders registered in an MBean Server. "
        },
        {
            "name": "ClassLoadingMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/ClassLoadingMXBean.html",
            "description": "The management interface for the class loading system of the Java virtual machine. "
        },
        {
            "name": "ClassNotFoundException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassNotFoundException.html",
            "description": "Thrown when an application tries to load in a class through its string name using:  The forName method in class Class . "
        },
        {
            "name": "ClassNotLoadedException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ClassNotLoadedException.html",
            "description": "Thrown to indicate that the requested class has not yet been loaded through the appropriate class loader. "
        },
        {
            "name": "ClassNotPreparedException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ClassNotPreparedException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed because the specified class has not yet been prepared. "
        },
        {
            "name": "ClassObjectReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ClassObjectReference.html",
            "description": "An instance of java.lang.Class from the target VM. "
        },
        {
            "name": "ClassPrepareEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ClassPrepareEvent.html",
            "description": "Notification of a class prepare in the target VM. "
        },
        {
            "name": "ClassPrepareRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ClassPrepareRequest.html",
            "description": "Request for notification when a class is prepared in the target VM. "
        },
        {
            "name": "ClassTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ClassTree.html",
            "description": "A tree node for a class, interface, enum, record, or annotation type declaration. "
        },
        {
            "name": "ClassType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ClassType.html",
            "description": "A mirror of a class in the target VM. "
        },
        {
            "name": "ClassUnloadEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ClassUnloadEvent.html",
            "description": "Notification of a class unload in the target VM. "
        },
        {
            "name": "ClassUnloadRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ClassUnloadRequest.html",
            "description": "Request for notification when a class is unloaded in the target VM. "
        },
        {
            "name": "ClassValue",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ClassValue.html",
            "description": "Lazily associate a computed value with (potentially) every type. "
        },
        {
            "name": "Cleaner",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/Cleaner.html",
            "description": "Cleaner manages a set of object references and corresponding cleaning actions. "
        },
        {
            "name": "Cleaner.Cleanable",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/Cleaner.Cleanable.html",
            "description": "Cleanable represents an object and a cleaning action registered in a Cleaner . "
        },
        {
            "name": "ClientInfoStatus",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ClientInfoStatus.html",
            "description": "Enumeration for status of the reason that a property could not be set via a call to Connection.setClientInfo "
        },
        {
            "name": "Clip",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Clip.html",
            "description": "The Clip interface represents a special kind of data line whose audio data can be loaded prior to playback, instead of being streamed in real time. "
        },
        {
            "name": "Clipboard",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html",
            "description": "A class that implements a mechanism to transfer data using cut/copy/paste operations. "
        },
        {
            "name": "ClipboardOwner",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/ClipboardOwner.html",
            "description": "Defines the interface for classes that will provide data to a clipboard. "
        },
        {
            "name": "Clob",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Clob.html",
            "description": "The mapping in the Java programming language for the SQL CLOB type. "
        },
        {
            "name": "Clock",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Clock.html",
            "description": "A clock providing access to the current instant, date and time using a time-zone. "
        },
        {
            "name": "Cloneable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Cloneable.html",
            "description": "A class implements the Cloneable interface to indicate to the Object.clone() method that it is legal for that method to make a field-for-field copy of instances of that class. "
        },
        {
            "name": "CloneNotSupportedException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/CloneNotSupportedException.html",
            "description": "Thrown to indicate that the clone method in class Object has been called to clone an object, but that the object's class does not implement the Cloneable interface. "
        },
        {
            "name": "Closeable",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Closeable.html",
            "description": "A Closeable is a source or destination of data that can be closed. "
        },
        {
            "name": "ClosedByInterruptException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ClosedByInterruptException.html",
            "description": "Checked exception received by a thread when another thread interrupts it while it is blocked in an I/O operation upon a channel. "
        },
        {
            "name": "ClosedChannelException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ClosedChannelException.html",
            "description": "Checked exception thrown when an attempt is made to invoke or complete an I/O operation upon channel that is closed, or at least closed to that operation. "
        },
        {
            "name": "ClosedConnectionException",
            "package": "com.sun.jdi.connect.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/spi/ClosedConnectionException.html",
            "description": "This exception may be thrown as a result of an asynchronous close of a Connection while an I/O operation is in progress. "
        },
        {
            "name": "ClosedDirectoryStreamException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ClosedDirectoryStreamException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an operation on a directory stream that is closed. "
        },
        {
            "name": "ClosedFileSystemException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ClosedFileSystemException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an operation on a file and the file system is closed. "
        },
        {
            "name": "ClosedSelectorException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ClosedSelectorException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a closed selector. "
        },
        {
            "name": "ClosedWatchServiceException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ClosedWatchServiceException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an operation on a watch service that is closed. "
        },
        {
            "name": "CMMException",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/CMMException.html",
            "description": "This exception is thrown if the native CMM returns an error. "
        },
        {
            "name": "CoderMalfunctionError",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CoderMalfunctionError.html",
            "description": "Error thrown when the decodeLoop method of a CharsetDecoder , or the encodeLoop method of a CharsetEncoder , throws an unexpected exception. "
        },
        {
            "name": "CoderResult",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CoderResult.html",
            "description": "A description of the result state of a coder. "
        },
        {
            "name": "CodeSigner",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/CodeSigner.html",
            "description": "This class encapsulates information about a code signer. "
        },
        {
            "name": "CodeSource",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/CodeSource.html",
            "description": "This class extends the concept of a codebase to encapsulate not only the location (URL) but also the certificate chains that were used to verify signed code originating from that location. "
        },
        {
            "name": "CodingErrorAction",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/CodingErrorAction.html",
            "description": "A typesafe enumeration for coding-error actions. "
        },
        {
            "name": "CollationElementIterator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/CollationElementIterator.html",
            "description": "The CollationElementIterator class is used as an iterator to walk through each character of an international string. "
        },
        {
            "name": "CollationKey",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/CollationKey.html",
            "description": "A CollationKey represents a String under the rules of a specific Collator object. "
        },
        {
            "name": "Collator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Collator.html",
            "description": "The Collator class performs locale-sensitive String comparison. "
        },
        {
            "name": "CollatorProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/CollatorProvider.html",
            "description": "An abstract class for service providers that provide concrete implementations of the Collator class. "
        },
        {
            "name": "Collection",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Collection.html",
            "description": "The root interface in the collection hierarchy . "
        },
        {
            "name": "CollectionCertStoreParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CollectionCertStoreParameters.html",
            "description": "Parameters used as input for the Collection CertStore algorithm. "
        },
        {
            "name": "Collections",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Collections.html",
            "description": "This class consists exclusively of static methods that operate on or return collections. "
        },
        {
            "name": "Collector",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/Collector.html",
            "description": "A mutable reduction operation that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. "
        },
        {
            "name": "Collector.Characteristics",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/Collector.Characteristics.html",
            "description": "Characteristics indicating properties of a Collector , which can be used to optimize reduction implementations. "
        },
        {
            "name": "Collectors",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/Collectors.html",
            "description": "Implementations of Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc. "
        },
        {
            "name": "Color",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Color.html",
            "description": "The Color class is used to encapsulate colors in the default sRGB color space or colors in arbitrary color spaces identified by a ColorSpace . "
        },
        {
            "name": "ColorChooserComponentFactory",
            "package": "javax.swing.colorchooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/colorchooser/ColorChooserComponentFactory.html",
            "description": "A class designed to produce preconfigured \"accessory\" objects to insert into color choosers. "
        },
        {
            "name": "ColorChooserUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ColorChooserUI.html",
            "description": "Pluggable look and feel interface for JColorChooser. "
        },
        {
            "name": "ColorConvertOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ColorConvertOp.html",
            "description": "This class performs a pixel-by-pixel color conversion of the data in the source image. "
        },
        {
            "name": "ColorModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ColorModel.html",
            "description": "The ColorModel abstract class encapsulates the methods for translating a pixel value to color components (for example, red, green, and blue) and an alpha component. "
        },
        {
            "name": "ColorSelectionModel",
            "package": "javax.swing.colorchooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/colorchooser/ColorSelectionModel.html",
            "description": "A model that supports selecting a Color . "
        },
        {
            "name": "ColorSpace",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ColorSpace.html",
            "description": "This abstract class is used to serve as a color space tag to identify the specific color space of a Color object or, via a ColorModel object, of an Image , a BufferedImage , or a GraphicsDevice . "
        },
        {
            "name": "ColorSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/ColorSupported.html",
            "description": "Class ColorSupported is a printing attribute class, an enumeration, that identifies whether the device is capable of any type of color printing at all, including highlight color as well as full process color. "
        },
        {
            "name": "ColorType",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html",
            "description": "A typesafe enumeration of colors that can be fetched from a style. "
        },
        {
            "name": "ColorUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ColorUIResource.html",
            "description": "A subclass of Color that implements UIResource. "
        },
        {
            "name": "ComboBoxEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ComboBoxEditor.html",
            "description": "The editor component used for JComboBox components. "
        },
        {
            "name": "ComboBoxModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ComboBoxModel.html",
            "description": "A data model for a combo box. "
        },
        {
            "name": "ComboBoxUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html",
            "description": "Pluggable look and feel interface for JComboBox. "
        },
        {
            "name": "ComboPopup",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/ComboPopup.html",
            "description": "The interface which defines the methods required for the implementation of the popup portion of a combo box. "
        },
        {
            "name": "CommandAPDU",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/CommandAPDU.html",
            "description": "A command APDU following the structure defined in ISO/IEC 7816-4. "
        },
        {
            "name": "Comment",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/Comment.html",
            "description": "An interface for comment events "
        },
        {
            "name": "Comment",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Comment.html",
            "description": "This interface inherits from CharacterData and represents the content of a comment, i.e., all the characters between the starting ' <!-- ' and ending ' --> '. "
        },
        {
            "name": "CommentTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/CommentTree.html",
            "description": "An embedded HTML comment. "
        },
        {
            "name": "CommonDataSource",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/CommonDataSource.html",
            "description": "Interface that defines the methods which are common between DataSource , XADataSource and ConnectionPoolDataSource . "
        },
        {
            "name": "CommunicationException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/CommunicationException.html",
            "description": "This exception is thrown when the client is unable to communicate with the directory or naming service. "
        },
        {
            "name": "CompactNumberFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/CompactNumberFormat.html",
            "description": "CompactNumberFormat is a concrete subclass of NumberFormat that formats a decimal number in its compact form. "
        },
        {
            "name": "Comparable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Comparable.html",
            "description": "This interface imposes a total ordering on the objects of each class that implements it. "
        },
        {
            "name": "Comparator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Comparator.html",
            "description": "A comparison function, which imposes a total ordering on some collection of objects. "
        },
        {
            "name": "Compilable",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/Compilable.html",
            "description": "The optional interface implemented by ScriptEngines whose methods compile scripts to a form that can be executed repeatedly without recompilation. "
        },
        {
            "name": "CompilationMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/CompilationMXBean.html",
            "description": "The management interface for the compilation system of the Java virtual machine. "
        },
        {
            "name": "CompilationUnitTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/CompilationUnitTree.html",
            "description": "Represents the abstract syntax tree for compilation units (source files) and package declarations (package-info.java). "
        },
        {
            "name": "CompiledScript",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/CompiledScript.html",
            "description": "Extended by classes that store results of compilations. "
        },
        {
            "name": "Compiler",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Compiler.html",
            "description": "JIT compilers and their technologies vary too widely to be controlled effectively by a standardized interface. "
        },
        {
            "name": "CompletableFuture",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CompletableFuture.html",
            "description": "A Future that may be explicitly completed (setting its value and status), and may be used as a CompletionStage , supporting dependent functions and actions that trigger upon its completion. "
        },
        {
            "name": "CompletableFuture.AsynchronousCompletionTask",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CompletableFuture.AsynchronousCompletionTask.html",
            "description": "A marker interface identifying asynchronous tasks produced by async methods. "
        },
        {
            "name": "Completion",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Completion.html",
            "description": "A suggested completion for an annotation. "
        },
        {
            "name": "CompletionException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CompletionException.html",
            "description": "Exception thrown when an error or other exception is encountered in the course of completing a result or task. "
        },
        {
            "name": "CompletionHandler",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/CompletionHandler.html",
            "description": "A handler for consuming the result of an asynchronous I/O operation. "
        },
        {
            "name": "Completions",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Completions.html",
            "description": "Utility class for assembling Completion objects. "
        },
        {
            "name": "CompletionService",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CompletionService.html",
            "description": "A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks. "
        },
        {
            "name": "CompletionStage",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CompletionStage.html",
            "description": "A stage of a possibly asynchronous computation, that performs an action or computes a value when another CompletionStage completes. "
        },
        {
            "name": "Component",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Component.html",
            "description": "A component is an object having a graphical representation that can be displayed on the screen and that can interact with the user. "
        },
        {
            "name": "Component.BaselineResizeBehavior",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Component.BaselineResizeBehavior.html",
            "description": "Enumeration of the common ways the baseline of a component can change as the size changes. "
        },
        {
            "name": "ComponentAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ComponentAdapter.html",
            "description": "An abstract adapter class for receiving component events. "
        },
        {
            "name": "ComponentColorModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ComponentColorModel.html",
            "description": "A ColorModel class that works with pixel values that represent color and alpha information as separate samples and that store each sample in a separate data element. "
        },
        {
            "name": "ComponentEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ComponentEvent.html",
            "description": "A low-level event which indicates that a component moved, changed size, or changed visibility (also, the root class for the other component-level events). "
        },
        {
            "name": "ComponentInputMap",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ComponentInputMap.html",
            "description": "A ComponentInputMap is an InputMap associated with a particular JComponent . "
        },
        {
            "name": "ComponentInputMapUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ComponentInputMapUIResource.html",
            "description": "A subclass of javax.swing.ComponentInputMap that implements UIResource. "
        },
        {
            "name": "ComponentListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ComponentListener.html",
            "description": "The listener interface for receiving component events. "
        },
        {
            "name": "ComponentOrientation",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ComponentOrientation.html",
            "description": "The ComponentOrientation class encapsulates the language-sensitive orientation that is to be used to order the elements of a component or of text. "
        },
        {
            "name": "ComponentSampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ComponentSampleModel.html",
            "description": "This class represents image data which is stored such that each sample  of a pixel occupies one data element of the DataBuffer. "
        },
        {
            "name": "ComponentUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html",
            "description": "The base class for all UI delegate objects in the Swing pluggable look and feel architecture. "
        },
        {
            "name": "ComponentView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ComponentView.html",
            "description": "Component decorator that implements the view interface. "
        },
        {
            "name": "Composite",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Composite.html",
            "description": "The Composite interface, along with CompositeContext , defines the methods to compose a draw primitive with the underlying graphics area. "
        },
        {
            "name": "CompositeContext",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/CompositeContext.html",
            "description": "The CompositeContext interface defines the encapsulated and optimized environment for a compositing operation. "
        },
        {
            "name": "CompositeData",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/CompositeData.html",
            "description": "The CompositeData interface specifies the behavior of a specific type of complex open data objects which represent composite data structures. "
        },
        {
            "name": "CompositeDataInvocationHandler",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/CompositeDataInvocationHandler.html",
            "description": "An InvocationHandler that forwards getter methods to a CompositeData . "
        },
        {
            "name": "CompositeDataSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/CompositeDataSupport.html",
            "description": "The CompositeDataSupport class is the open data class which implements the CompositeData interface. "
        },
        {
            "name": "CompositeDataView",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/CompositeDataView.html",
            "description": "A Java class can implement this interface to indicate how it is to be converted into a CompositeData by the MXBean framework. "
        },
        {
            "name": "CompositeGuardingDynamicLinker",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/CompositeGuardingDynamicLinker.html",
            "description": "A GuardingDynamicLinker that delegates sequentially to a list of other guarding dynamic linkers in its CompositeGuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices) . "
        },
        {
            "name": "CompositeName",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/CompositeName.html",
            "description": "This class represents a composite name -- a sequence of component names spanning multiple namespaces. "
        },
        {
            "name": "CompositeType",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/CompositeType.html",
            "description": "The CompositeType class is the open type class whose instances describe the types of CompositeData values. "
        },
        {
            "name": "CompositeTypeBasedGuardingDynamicLinker",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/CompositeTypeBasedGuardingDynamicLinker.html",
            "description": "A composite type-based guarding dynamic linker. "
        },
        {
            "name": "CompositeView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/CompositeView.html",
            "description": "CompositeView is an abstract View implementation which manages one or more child views. "
        },
        {
            "name": "CompoundAssignmentTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/CompoundAssignmentTree.html",
            "description": "A tree node for compound assignment operator. "
        },
        {
            "name": "CompoundBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/CompoundBorder.html",
            "description": "A composite Border class used to compose two Border objects into a single border by nesting an inside Border object within the insets of an outside Border object. "
        },
        {
            "name": "CompoundControl",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/CompoundControl.html",
            "description": "A CompoundControl , such as a graphic equalizer, provides control over two or more related properties, each of which is itself represented as a Control . "
        },
        {
            "name": "CompoundControl.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/CompoundControl.Type.html",
            "description": "An instance of the CompoundControl.Type inner class identifies one kind of compound control. "
        },
        {
            "name": "CompoundEdit",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/CompoundEdit.html",
            "description": "A concrete subclass of AbstractUndoableEdit, used to assemble little UndoableEdits into great big ones. "
        },
        {
            "name": "CompoundName",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/CompoundName.html",
            "description": "This class represents a compound name -- a name from a hierarchical name space. "
        },
        {
            "name": "Compression",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Compression.html",
            "description": "Class Compression is a printing attribute class, an enumeration, that specifies how print data is compressed. "
        },
        {
            "name": "ConcurrentHashMap",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html",
            "description": "A hash table supporting full concurrency of retrievals and high expected concurrency for updates. "
        },
        {
            "name": "ConcurrentHashMap.KeySetView",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.KeySetView.html",
            "description": "A view of a ConcurrentHashMap as a Set of keys, in which additions may optionally be enabled by mapping to a common value. "
        },
        {
            "name": "ConcurrentLinkedDeque",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentLinkedDeque.html",
            "description": "An unbounded concurrent deque based on linked nodes. "
        },
        {
            "name": "ConcurrentLinkedQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentLinkedQueue.html",
            "description": "An unbounded thread-safe queue based on linked nodes. "
        },
        {
            "name": "ConcurrentMap",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentMap.html",
            "description": "A Map providing thread safety and atomicity guarantees. "
        },
        {
            "name": "ConcurrentModificationException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ConcurrentModificationException.html",
            "description": "This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible. "
        },
        {
            "name": "ConcurrentNavigableMap",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentNavigableMap.html",
            "description": "A ConcurrentMap supporting NavigableMap operations, and recursively so for its navigable sub-maps. "
        },
        {
            "name": "ConcurrentSkipListMap",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentSkipListMap.html",
            "description": "A scalable concurrent ConcurrentNavigableMap implementation. "
        },
        {
            "name": "ConcurrentSkipListSet",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ConcurrentSkipListSet.html",
            "description": "A scalable concurrent NavigableSet implementation based on a ConcurrentSkipListMap . "
        },
        {
            "name": "Condition",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/Condition.html",
            "description": "Condition factors out the Object monitor methods ( wait , notify and notifyAll ) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations. "
        },
        {
            "name": "ConditionalExpressionTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ConditionalExpressionTree.html",
            "description": "A tree node for the conditional operator ? "
        },
        {
            "name": "ConfigFile",
            "package": "com.sun.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/login/ConfigFile.html",
            "description": "This class represents a default implementation for javax.security.auth.login.Configuration . "
        },
        {
            "name": "Configuration",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/Configuration.html",
            "description": "A configuration that is the result of resolution or resolution with service binding . "
        },
        {
            "name": "Configuration",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/Configuration.html",
            "description": "A Configuration object is responsible for specifying which LoginModules should be used for a particular application, and in what order the LoginModules should be invoked. "
        },
        {
            "name": "Configuration",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Configuration.html",
            "description": "A collection of settings and metadata describing the configuration. "
        },
        {
            "name": "Configuration.Parameters",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/Configuration.Parameters.html",
            "description": "This represents a marker interface for Configuration parameters. "
        },
        {
            "name": "ConfigurationException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ConfigurationException.html",
            "description": "This exception is thrown when there is a configuration problem. "
        },
        {
            "name": "ConfigurationInfo",
            "package": "jdk.management.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management.jfr/jdk/management/jfr/ConfigurationInfo.html",
            "description": "Management representation of a Configuration . "
        },
        {
            "name": "ConfigurationSpi",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/ConfigurationSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the Configuration class. "
        },
        {
            "name": "ConfirmationCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/ConfirmationCallback.html",
            "description": "Underlying security services instantiate and pass a ConfirmationCallback to the handle method of a CallbackHandler to ask for YES/NO, OK/CANCEL, YES/NO/CANCEL or other similar confirmations. "
        },
        {
            "name": "ConnectException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ConnectException.html",
            "description": "Signals that an error occurred while attempting to connect a socket to a remote address and port. "
        },
        {
            "name": "ConnectException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/ConnectException.html",
            "description": "A ConnectException is thrown if a connection is refused to the remote host for a remote method call. "
        },
        {
            "name": "ConnectIOException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/ConnectIOException.html",
            "description": "A ConnectIOException is thrown if an IOException occurs while making a connection to the remote host for a remote method call. "
        },
        {
            "name": "Connection",
            "package": "com.sun.jdi.connect.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/spi/Connection.html",
            "description": "A connection between a debugger and a target VM which it debugs. "
        },
        {
            "name": "Connection",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Connection.html",
            "description": "A connection (session) with a specific database. "
        },
        {
            "name": "ConnectionBuilder",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ConnectionBuilder.html",
            "description": "A builder created from a DataSource object, used to establish a connection to the database that the data source object represents. "
        },
        {
            "name": "ConnectionEvent",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/ConnectionEvent.html",
            "description": "An Event object that provides information about the source of a connection-related event. "
        },
        {
            "name": "ConnectionEventListener",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/ConnectionEventListener.html",
            "description": "An object that registers to be notified of events generated by a PooledConnection object. "
        },
        {
            "name": "ConnectionPendingException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ConnectionPendingException.html",
            "description": "Unchecked exception thrown when an attempt is made to connect a SocketChannel for which a non-blocking connection operation is already in progress. "
        },
        {
            "name": "ConnectionPoolDataSource",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/ConnectionPoolDataSource.html",
            "description": "A factory for PooledConnection objects. "
        },
        {
            "name": "Connector",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.html",
            "description": "A method of connection between a debugger and a target VM. "
        },
        {
            "name": "Connector.Argument",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.Argument.html",
            "description": "Specification for and value of a Connector argument. "
        },
        {
            "name": "Connector.BooleanArgument",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.BooleanArgument.html",
            "description": "Specification for and value of a Connector argument, whose value is Boolean. "
        },
        {
            "name": "Connector.IntegerArgument",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.IntegerArgument.html",
            "description": "Specification for and value of a Connector argument, whose value is an integer. "
        },
        {
            "name": "Connector.SelectedArgument",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.SelectedArgument.html",
            "description": "Specification for and value of a Connector argument, whose value is a String selected from a list of choices. "
        },
        {
            "name": "Connector.StringArgument",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.StringArgument.html",
            "description": "Specification for and value of a Connector argument, whose value is a String. "
        },
        {
            "name": "Console",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Console.html",
            "description": "Methods to access the character-based console device, if any, associated with the current Java virtual machine. "
        },
        {
            "name": "ConsoleHandler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/ConsoleHandler.html",
            "description": "This Handler publishes log records to System.err . "
        },
        {
            "name": "Constable",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/Constable.html",
            "description": "Represents a type which is constable . "
        },
        {
            "name": "ConstantBootstraps",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/ConstantBootstraps.html",
            "description": "Bootstrap methods for dynamically-computed constants. "
        },
        {
            "name": "ConstantCallSite",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/ConstantCallSite.html",
            "description": "A ConstantCallSite is a CallSite whose target is permanent, and can never be changed. "
        },
        {
            "name": "ConstantDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/ConstantDesc.html",
            "description": "A nominal descriptor for a loadable constant value, as defined in JVMS 4.4. "
        },
        {
            "name": "ConstantDescs",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/ConstantDescs.html",
            "description": "Predefined values of nominal descriptor for common constants, including descriptors for primitive class types and other common platform types, and descriptors for method handles for standard bootstrap methods. "
        },
        {
            "name": "Constructor",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Constructor.html",
            "description": "Constructor provides information about, and access to, a single constructor for a class. "
        },
        {
            "name": "ConstructorParameters",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ConstructorParameters.html",
            "description": "An annotation on a constructor that shows how the parameters of that constructor correspond to the constructed object's getter methods. "
        },
        {
            "name": "ConstructorProperties",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/ConstructorProperties.html",
            "description": "An annotation on a constructor that shows how the parameters of   that constructor correspond to the constructed object's getter   methods. "
        },
        {
            "name": "Consumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/Consumer.html",
            "description": "Represents an operation that accepts a single input argument and returns no result. "
        },
        {
            "name": "Container",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Container.html",
            "description": "A generic Abstract Window Toolkit(AWT) container object is a component that can contain other AWT components. "
        },
        {
            "name": "ContainerAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ContainerAdapter.html",
            "description": "An abstract adapter class for receiving container events. "
        },
        {
            "name": "ContainerEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ContainerEvent.html",
            "description": "A low-level event which indicates that a container's contents changed because a component was added or removed. "
        },
        {
            "name": "ContainerListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ContainerListener.html",
            "description": "The listener interface for receiving container events. "
        },
        {
            "name": "ContainerOrderFocusTraversalPolicy",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ContainerOrderFocusTraversalPolicy.html",
            "description": "A FocusTraversalPolicy that determines traversal order based on the order of child Components in a Container. "
        },
        {
            "name": "ContentHandler",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ContentHandler.html",
            "description": "The abstract class ContentHandler is the superclass of all classes that read an Object from a URLConnection . "
        },
        {
            "name": "ContentHandler",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ContentHandler.html",
            "description": "Receive notification of the logical content of a document. "
        },
        {
            "name": "ContentHandlerFactory",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ContentHandlerFactory.html",
            "description": "This interface defines a factory for content handlers. "
        },
        {
            "name": "ContentModel",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/ContentModel.html",
            "description": "A representation of a content model. "
        },
        {
            "name": "ContentSigner",
            "package": "com.sun.jarsigner",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jartool/com/sun/jarsigner/ContentSigner.html",
            "description": "This class has been deprecated. "
        },
        {
            "name": "ContentSignerParameters",
            "package": "com.sun.jarsigner",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jartool/com/sun/jarsigner/ContentSignerParameters.html",
            "description": "This class has been deprecated. "
        },
        {
            "name": "ContentType",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/ContentType.html",
            "description": "Meta annotation, specifies that an annotation represents a content type, such as a time span or a frequency. "
        },
        {
            "name": "Context",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/Context.html",
            "description": "This interface represents a naming context, which consists of a set of name-to-object bindings. "
        },
        {
            "name": "ContextNotEmptyException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ContextNotEmptyException.html",
            "description": "This exception is thrown when attempting to destroy a context that is not empty. "
        },
        {
            "name": "ContextualRenderedImageFactory",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/ContextualRenderedImageFactory.html",
            "description": "ContextualRenderedImageFactory provides an interface for the functionality that may differ between instances of RenderableImageOp. "
        },
        {
            "name": "ContinueTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ContinueTree.html",
            "description": "A tree node for a continue statement. "
        },
        {
            "name": "Control",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/Control.html",
            "description": "This interface represents an LDAPv3 control as defined in RFC 2251 . "
        },
        {
            "name": "Control",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Control.html",
            "description": "Lines often have a set of controls, such as gain and pan, that affect the audio signal passing through the line. "
        },
        {
            "name": "Control.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Control.Type.html",
            "description": "An instance of the Type class represents the type of the control. "
        },
        {
            "name": "ControlFactory",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/ControlFactory.html",
            "description": "This abstract class represents a factory for creating LDAPv3 controls. "
        },
        {
            "name": "ControllerEventListener",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/ControllerEventListener.html",
            "description": "The ControllerEventListener interface should be implemented by classes whose instances need to be notified when a Sequencer has processed a requested type of MIDI control-change event. "
        },
        {
            "name": "ConversionComparator",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/ConversionComparator.html",
            "description": "Optional interface to be implemented by GuardingTypeConverterFactory implementers. "
        },
        {
            "name": "ConversionComparator.Comparison",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/ConversionComparator.Comparison.html",
            "description": "Enumeration of possible outcomes of comparing one conversion to another. "
        },
        {
            "name": "ConvolveOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ConvolveOp.html",
            "description": "This class implements a convolution from the source to the destination. "
        },
        {
            "name": "CookieHandler",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CookieHandler.html",
            "description": "A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler. "
        },
        {
            "name": "CookieManager",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CookieManager.html",
            "description": "CookieManager provides a concrete implementation of CookieHandler , which separates the storage of cookies from the policy surrounding accepting and rejecting cookies. "
        },
        {
            "name": "CookiePolicy",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CookiePolicy.html",
            "description": "CookiePolicy implementations decide which cookies should be accepted and which should be rejected. "
        },
        {
            "name": "CookieStore",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/CookieStore.html",
            "description": "A CookieStore object represents a storage for cookie. "
        },
        {
            "name": "Copies",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Copies.html",
            "description": "Class Copies is an integer valued printing attribute class that specifies the number of copies to be printed. "
        },
        {
            "name": "CopiesSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/CopiesSupported.html",
            "description": "Class CopiesSupported is a printing attribute class, a set of integers, that gives the supported values for a Copies attribute. "
        },
        {
            "name": "CopyOnWriteArrayList",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CopyOnWriteArrayList.html",
            "description": "A thread-safe variant of ArrayList in which all mutative operations ( add , set , and so on) are implemented by making a fresh copy of the underlying array. "
        },
        {
            "name": "CopyOnWriteArraySet",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CopyOnWriteArraySet.html",
            "description": "A Set that uses an internal CopyOnWriteArrayList for all of its operations. "
        },
        {
            "name": "CopyOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/CopyOption.html",
            "description": "An object that configures how to copy or move a file. "
        },
        {
            "name": "CountDownLatch",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CountDownLatch.html",
            "description": "A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes. "
        },
        {
            "name": "CountedCompleter",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CountedCompleter.html",
            "description": "A ForkJoinTask with a completion action performed when triggered and there are no remaining pending actions. "
        },
        {
            "name": "Counter",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/Counter.html",
            "description": "The Counter interface is used to represent any counter or counters function value. "
        },
        {
            "name": "CounterMonitor",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/CounterMonitor.html",
            "description": "Defines a monitor MBean designed to observe the values of a counter attribute. "
        },
        {
            "name": "CounterMonitorMBean",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html",
            "description": "Exposes the remote management interface of the counter monitor MBean. "
        },
        {
            "name": "CRC32",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/CRC32.html",
            "description": "A class that can be used to compute the CRC-32 of a data stream. "
        },
        {
            "name": "CRC32C",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/CRC32C.html",
            "description": "A class that can be used to compute the CRC-32C of a data stream. "
        },
        {
            "name": "CredentialException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/CredentialException.html",
            "description": "A generic credential exception. "
        },
        {
            "name": "CredentialExpiredException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/CredentialExpiredException.html",
            "description": "Signals that a Credential has expired. "
        },
        {
            "name": "CredentialNotFoundException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/CredentialNotFoundException.html",
            "description": "Signals that a credential was not found. "
        },
        {
            "name": "CRL",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CRL.html",
            "description": "This class is an abstraction of certificate revocation lists (CRLs) that have different formats but important common uses. "
        },
        {
            "name": "CRLException",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CRLException.html",
            "description": "CRL (Certificate Revocation List) Exception. "
        },
        {
            "name": "CRLReason",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CRLReason.html",
            "description": "The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in RFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile . "
        },
        {
            "name": "CRLSelector",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/CRLSelector.html",
            "description": "A selector that defines a set of criteria for selecting CRL s. "
        },
        {
            "name": "CropImageFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/CropImageFilter.html",
            "description": "An ImageFilter class for cropping images. "
        },
        {
            "name": "CryptoPrimitive",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/CryptoPrimitive.html",
            "description": "An enumeration of cryptographic primitives. "
        },
        {
            "name": "CSS",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/CSS.html",
            "description": "Defines a set of CSS attributes as a typesafe enumeration. "
        },
        {
            "name": "CSS.Attribute",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html",
            "description": "Definitions to be used as a key on AttributeSet's that might hold CSS attributes. "
        },
        {
            "name": "CSS2Properties",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSS2Properties.html",
            "description": "The CSS2Properties interface represents a convenience mechanism for retrieving and setting properties within a CSSStyleDeclaration . "
        },
        {
            "name": "CSSCharsetRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSCharsetRule.html",
            "description": "The CSSCharsetRule interface represents a @charset rule in a CSS style sheet. "
        },
        {
            "name": "CSSFontFaceRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSFontFaceRule.html",
            "description": "The CSSFontFaceRule interface represents a @font-face rule in a CSS style sheet. "
        },
        {
            "name": "CSSImportRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSImportRule.html",
            "description": "The CSSImportRule interface represents a @import rule within a CSS style sheet. "
        },
        {
            "name": "CSSMediaRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSMediaRule.html",
            "description": "The CSSMediaRule interface represents a @media rule in a CSS style sheet. "
        },
        {
            "name": "CSSPageRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSPageRule.html",
            "description": "The CSSPageRule interface represents a @page rule within a CSS style sheet. "
        },
        {
            "name": "CSSPrimitiveValue",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSPrimitiveValue.html",
            "description": "The CSSPrimitiveValue interface represents a single CSS value . "
        },
        {
            "name": "CSSRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSRule.html",
            "description": "The CSSRule interface is the abstract base interface for any type of CSS statement. "
        },
        {
            "name": "CSSRuleList",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSRuleList.html",
            "description": "The CSSRuleList interface provides the abstraction of an ordered collection of CSS rules. "
        },
        {
            "name": "CSSStyleDeclaration",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSStyleDeclaration.html",
            "description": "The CSSStyleDeclaration interface represents a single CSS declaration block. "
        },
        {
            "name": "CSSStyleRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSStyleRule.html",
            "description": "The CSSStyleRule interface represents a single rule set in a CSS style sheet. "
        },
        {
            "name": "CSSStyleSheet",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSStyleSheet.html",
            "description": "The CSSStyleSheet interface is a concrete interface used to represent a CSS style sheet i.e., a style sheet whose content type is \"text/css\". "
        },
        {
            "name": "CSSUnknownRule",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSUnknownRule.html",
            "description": "The CSSUnknownRule interface represents an at-rule not supported by this user agent. "
        },
        {
            "name": "CSSValue",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSValue.html",
            "description": "The CSSValue interface represents a simple or a complex value. "
        },
        {
            "name": "CSSValueList",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/CSSValueList.html",
            "description": "The CSSValueList interface provides the abstraction of an ordered collection of CSS values. "
        },
        {
            "name": "CubicCurve2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/CubicCurve2D.html",
            "description": "The CubicCurve2D class defines a cubic parametric curve segment in (x,y) coordinate space. "
        },
        {
            "name": "CubicCurve2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/CubicCurve2D.Double.html",
            "description": "A cubic parametric curve segment specified with double coordinates. "
        },
        {
            "name": "CubicCurve2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/CubicCurve2D.Float.html",
            "description": "A cubic parametric curve segment specified with float coordinates. "
        },
        {
            "name": "Currency",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Currency.html",
            "description": "Represents a currency. "
        },
        {
            "name": "CurrencyNameProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/CurrencyNameProvider.html",
            "description": "An abstract class for service providers that provide localized currency symbols and display names for the Currency class. "
        },
        {
            "name": "Cursor",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Cursor.html",
            "description": "A class to encapsulate the bitmap representation of the mouse cursor. "
        },
        {
            "name": "Customizer",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Customizer.html",
            "description": "A customizer class provides a complete custom GUI for customizing a target Java Bean. "
        },
        {
            "name": "CyclicBarrier",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/CyclicBarrier.html",
            "description": "A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. "
        },
        {
            "name": "Data",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/Data.html",
            "description": "An abstract representation of the result of dereferencing a URIReference or the input/output of subsequent Transform s. "
        },
        {
            "name": "DataAmount",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/DataAmount.html",
            "description": "Event field annotation, specifies that a value represents an amount of data (for example, bytes). "
        },
        {
            "name": "DatabaseMetaData",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/DatabaseMetaData.html",
            "description": "Comprehensive information about the database as a whole. "
        },
        {
            "name": "DataBuffer",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBuffer.html",
            "description": "This class exists to wrap one or more data arrays. "
        },
        {
            "name": "DataBufferByte",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferByte.html",
            "description": "This class extends DataBuffer and stores data internally as bytes. "
        },
        {
            "name": "DataBufferDouble",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferDouble.html",
            "description": "This class extends DataBuffer and stores data internally in double form. "
        },
        {
            "name": "DataBufferFloat",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferFloat.html",
            "description": "This class extends DataBuffer and stores data internally in float form. "
        },
        {
            "name": "DataBufferInt",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferInt.html",
            "description": "This class extends DataBuffer and stores data internally as integers. "
        },
        {
            "name": "DataBufferShort",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferShort.html",
            "description": "This class extends DataBuffer and stores data internally as shorts. "
        },
        {
            "name": "DataBufferUShort",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DataBufferUShort.html",
            "description": "This class extends DataBuffer and stores data internally as shorts. "
        },
        {
            "name": "DataFlavor",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html",
            "description": "A DataFlavor provides meta information about data. "
        },
        {
            "name": "DataFormatException",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/DataFormatException.html",
            "description": "Signals that a data format error has occurred. "
        },
        {
            "name": "DatagramChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/DatagramChannel.html",
            "description": "A selectable channel for datagram-oriented sockets. "
        },
        {
            "name": "DatagramPacket",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/DatagramPacket.html",
            "description": "This class represents a datagram packet. "
        },
        {
            "name": "DatagramSocket",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/DatagramSocket.html",
            "description": "This class represents a socket for sending and receiving datagram packets. "
        },
        {
            "name": "DatagramSocketImpl",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/DatagramSocketImpl.html",
            "description": "Abstract datagram and multicast socket implementation base class. "
        },
        {
            "name": "DatagramSocketImplFactory",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/DatagramSocketImplFactory.html",
            "description": "This interface defines a factory for datagram socket implementations. "
        },
        {
            "name": "DataInput",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/DataInput.html",
            "description": "The DataInput interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. "
        },
        {
            "name": "DataInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/DataInputStream.html",
            "description": "A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way. "
        },
        {
            "name": "DataLine",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/DataLine.html",
            "description": "DataLine adds media-related functionality to its superinterface, Line . "
        },
        {
            "name": "DataLine.Info",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/DataLine.Info.html",
            "description": "Besides the class information inherited from its superclass, DataLine.Info provides additional information specific to data lines. "
        },
        {
            "name": "DataOutput",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/DataOutput.html",
            "description": "The DataOutput interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. "
        },
        {
            "name": "DataOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/DataOutputStream.html",
            "description": "A data output stream lets an application write primitive Java data types to an output stream in a portable way. "
        },
        {
            "name": "DataSource",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/DataSource.html",
            "description": "A factory for connections to the physical data source that this DataSource object represents. "
        },
        {
            "name": "DataTruncation",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/DataTruncation.html",
            "description": "An exception  thrown as a DataTruncation exception (on writes) or reported as a DataTruncation warning (on reads)  when a data values is unexpectedly truncated for reasons other than its having  exceeded MaxFieldSize . "
        },
        {
            "name": "DatatypeConfigurationException",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/DatatypeConfigurationException.html",
            "description": "Indicates a serious configuration error. "
        },
        {
            "name": "DatatypeConstants",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html",
            "description": "Utility class to contain basic Datatype values as constants. "
        },
        {
            "name": "DatatypeConstants.Field",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.Field.html",
            "description": "Type-safe enum class that represents six fields of the Duration class. "
        },
        {
            "name": "DatatypeFactory",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/DatatypeFactory.html",
            "description": "Factory that creates new javax.xml.datatype Object s that map XML to/from Java Object s. "
        },
        {
            "name": "Date",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Date.html",
            "description": "A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE value. "
        },
        {
            "name": "Date",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Date.html",
            "description": "The class Date represents a specific instant in time, with millisecond precision. "
        },
        {
            "name": "DateFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/DateFormat.html",
            "description": "DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. "
        },
        {
            "name": "DateFormat.Field",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/DateFormat.Field.html",
            "description": "Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from DateFormat.formatToCharacterIterator and as field identifiers in FieldPosition . "
        },
        {
            "name": "DateFormatProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/DateFormatProvider.html",
            "description": "An abstract class for service providers that provide concrete implementations of the DateFormat class. "
        },
        {
            "name": "DateFormatSymbols",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/DateFormatSymbols.html",
            "description": "DateFormatSymbols is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. "
        },
        {
            "name": "DateFormatSymbolsProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/DateFormatSymbolsProvider.html",
            "description": "An abstract class for service providers that provide instances of the DateFormatSymbols class. "
        },
        {
            "name": "DateFormatter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DateFormatter.html",
            "description": "DateFormatter is an InternationalFormatter that does its formatting by way of an instance of java.text.DateFormat . "
        },
        {
            "name": "DateTimeAtCompleted",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DateTimeAtCompleted.html",
            "description": "Class DateTimeAtCompleted is a printing attribute class, a date-time attribute, that indicates the date and time at which the Print Job completed (or was canceled or aborted). "
        },
        {
            "name": "DateTimeAtCreation",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DateTimeAtCreation.html",
            "description": "Class DateTimeAtCreation is a printing attribute class, a date-time attribute, that indicates the date and time at which the Print Job was created. "
        },
        {
            "name": "DateTimeAtProcessing",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DateTimeAtProcessing.html",
            "description": "Class DateTimeAtProcessing is a printing attribute class, a date-time attribute, that indicates the date and time at which the Print Job first began processing. "
        },
        {
            "name": "DateTimeException",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/DateTimeException.html",
            "description": "Exception used to indicate a problem while calculating a date-time. "
        },
        {
            "name": "DateTimeFormatter",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/DateTimeFormatter.html",
            "description": "Formatter for printing and parsing date-time objects. "
        },
        {
            "name": "DateTimeFormatterBuilder",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/DateTimeFormatterBuilder.html",
            "description": "Builder to create date-time formatters. "
        },
        {
            "name": "DateTimeParseException",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/DateTimeParseException.html",
            "description": "An exception thrown when an error occurs during parsing. "
        },
        {
            "name": "DateTimeSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/DateTimeSyntax.html",
            "description": "Class DateTimeSyntax is an abstract base class providing the common implementation of all attributes whose value is a date and time. "
        },
        {
            "name": "DayOfWeek",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/DayOfWeek.html",
            "description": "A day-of-week, such as 'Tuesday'. "
        },
        {
            "name": "DebugGraphics",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DebugGraphics.html",
            "description": "Graphics subclass supporting graphics debugging. "
        },
        {
            "name": "DecimalFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/DecimalFormat.html",
            "description": "DecimalFormat is a concrete subclass of NumberFormat that formats decimal numbers. "
        },
        {
            "name": "DecimalFormatSymbols",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/DecimalFormatSymbols.html",
            "description": "This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by DecimalFormat to format numbers. "
        },
        {
            "name": "DecimalFormatSymbolsProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/DecimalFormatSymbolsProvider.html",
            "description": "An abstract class for service providers that provide instances of the DecimalFormatSymbols class. "
        },
        {
            "name": "DecimalStyle",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/DecimalStyle.html",
            "description": "Localized decimal style used in date and time formatting. "
        },
        {
            "name": "DeclarationSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/DeclarationSnippet.html",
            "description": "Grouping for all declaration Snippets: variable declarations ( VarSnippet ), method declarations ( MethodSnippet ), and type declarations ( TypeDeclSnippet ). "
        },
        {
            "name": "DeclaredType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/DeclaredType.html",
            "description": "Represents a declared type, either a class type or an interface type. "
        },
        {
            "name": "DeclHandler",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/DeclHandler.html",
            "description": "SAX2 extension handler for DTD declaration events. "
        },
        {
            "name": "DefaultBoundedRangeModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultBoundedRangeModel.html",
            "description": "A generic implementation of BoundedRangeModel. "
        },
        {
            "name": "DefaultButtonModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultButtonModel.html",
            "description": "The default implementation of a Button component's data model. "
        },
        {
            "name": "DefaultCaret",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultCaret.html",
            "description": "A default implementation of Caret. "
        },
        {
            "name": "DefaultCellEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultCellEditor.html",
            "description": "The default editor for table and tree cells. "
        },
        {
            "name": "DefaultColorSelectionModel",
            "package": "javax.swing.colorchooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/colorchooser/DefaultColorSelectionModel.html",
            "description": "A generic implementation of ColorSelectionModel . "
        },
        {
            "name": "DefaultComboBoxModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultComboBoxModel.html",
            "description": "The default model for combo boxes. "
        },
        {
            "name": "DefaultDesktopManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultDesktopManager.html",
            "description": "This is an implementation of the DesktopManager . "
        },
        {
            "name": "DefaultEditorKit",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html",
            "description": "This is the set of things needed by a text component to be a reasonably functioning editor for some type of text document. "
        },
        {
            "name": "DefaultEditorKit.BeepAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.BeepAction.html",
            "description": "Creates a beep. "
        },
        {
            "name": "DefaultEditorKit.CopyAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.CopyAction.html",
            "description": "Copies the selected region and place its contents into the system clipboard. "
        },
        {
            "name": "DefaultEditorKit.CutAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.CutAction.html",
            "description": "Cuts the selected region and place its contents into the system clipboard. "
        },
        {
            "name": "DefaultEditorKit.DefaultKeyTypedAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.DefaultKeyTypedAction.html",
            "description": "The action that is executed by default if a key typed event is received and there is no keymap entry. "
        },
        {
            "name": "DefaultEditorKit.InsertBreakAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.InsertBreakAction.html",
            "description": "Places a line/paragraph break into the document. "
        },
        {
            "name": "DefaultEditorKit.InsertContentAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.InsertContentAction.html",
            "description": "Places content into the associated document. "
        },
        {
            "name": "DefaultEditorKit.InsertTabAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.InsertTabAction.html",
            "description": "Places a tab character into the document. "
        },
        {
            "name": "DefaultEditorKit.PasteAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.PasteAction.html",
            "description": "Pastes the contents of the system clipboard into the selected region, or before the caret if nothing is selected. "
        },
        {
            "name": "DefaultFocusManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultFocusManager.html",
            "description": "This class has been obsoleted by the 1.4 focus APIs. "
        },
        {
            "name": "DefaultFocusTraversalPolicy",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/DefaultFocusTraversalPolicy.html",
            "description": "A FocusTraversalPolicy that determines traversal order based on the order of child Components in a Container. "
        },
        {
            "name": "DefaultFormatter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html",
            "description": "DefaultFormatter formats arbitrary objects. "
        },
        {
            "name": "DefaultFormatterFactory",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultFormatterFactory.html",
            "description": "An implementation of JFormattedTextField.AbstractFormatterFactory . "
        },
        {
            "name": "DefaultHandler",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/DefaultHandler.html",
            "description": "Default base class for SAX2 event handlers. "
        },
        {
            "name": "DefaultHandler2",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/DefaultHandler2.html",
            "description": "This class extends the SAX2 base handler class to support the SAX2 LexicalHandler , DeclHandler , and EntityResolver2 extensions. "
        },
        {
            "name": "DefaultHighlighter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultHighlighter.html",
            "description": "Implements the Highlighter interfaces. "
        },
        {
            "name": "DefaultHighlighter.DefaultHighlightPainter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultHighlighter.DefaultHighlightPainter.html",
            "description": "Simple highlight painter that fills a highlighted area with a solid color. "
        },
        {
            "name": "DefaultInternalObjectFilter",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/DefaultInternalObjectFilter.html",
            "description": "Default implementation for a DynamicLinkerFactory.setInternalObjectsFilter(MethodHandleTransformer) that delegates to a pair of filtering method handles. "
        },
        {
            "name": "DefaultKeyboardFocusManager",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/DefaultKeyboardFocusManager.html",
            "description": "The default KeyboardFocusManager for AWT applications. "
        },
        {
            "name": "DefaultListCellRenderer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html",
            "description": "Renders an item in a list. "
        },
        {
            "name": "DefaultListCellRenderer.UIResource",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.UIResource.html",
            "description": "A subclass of DefaultListCellRenderer that implements UIResource. "
        },
        {
            "name": "DefaultListModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultListModel.html",
            "description": "This class loosely implements the java.util.Vector API, in that it implements the 1.1.x version of java.util.Vector , has no collection class support, and notifies the ListDataListener s when changes occur. "
        },
        {
            "name": "DefaultListSelectionModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html",
            "description": "Default data model for list selections. "
        },
        {
            "name": "DefaultLoaderRepository",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/DefaultLoaderRepository.html",
            "description": "Use MBeanServer.getClassLoaderRepository() instead. "
        },
        {
            "name": "DefaultLoaderRepository",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/DefaultLoaderRepository.html",
            "description": "Use MBeanServer.getClassLoaderRepository() instead. "
        },
        {
            "name": "DefaultMenuLayout",
            "package": "javax.swing.plaf.basic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/basic/DefaultMenuLayout.html",
            "description": "The default layout manager for Popup menus and menubars. "
        },
        {
            "name": "DefaultMetalTheme",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/DefaultMetalTheme.html",
            "description": "A concrete implementation of MetalTheme providing the original look of the Java Look and Feel, code-named \"Steel\". "
        },
        {
            "name": "DefaultMutableTreeNode",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html",
            "description": "A DefaultMutableTreeNode is a general-purpose node in a tree data structure. "
        },
        {
            "name": "DefaultPersistenceDelegate",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/DefaultPersistenceDelegate.html",
            "description": "The DefaultPersistenceDelegate is a concrete implementation of the abstract PersistenceDelegate class and is the delegate used by default for classes about which no information is available. "
        },
        {
            "name": "DefaultRowSorter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultRowSorter.html",
            "description": "An implementation of RowSorter that provides sorting and filtering around a grid-based data model. "
        },
        {
            "name": "DefaultRowSorter.ModelWrapper",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultRowSorter.ModelWrapper.html",
            "description": "DefaultRowSorter.ModelWrapper is responsible for providing the data that gets sorted by DefaultRowSorter . "
        },
        {
            "name": "DefaultSingleSelectionModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DefaultSingleSelectionModel.html",
            "description": "A generic implementation of SingleSelectionModel. "
        },
        {
            "name": "DefaultStyledDocument",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html",
            "description": "A document that can be marked up with character and paragraph styles in a manner similar to the Rich Text Format. "
        },
        {
            "name": "DefaultStyledDocument.AttributeUndoableEdit",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.AttributeUndoableEdit.html",
            "description": "An UndoableEdit used to remember AttributeSet changes to an Element. "
        },
        {
            "name": "DefaultStyledDocument.ElementSpec",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.ElementSpec.html",
            "description": "Specification for building elements. "
        },
        {
            "name": "DefaultTableCellRenderer",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/DefaultTableCellRenderer.html",
            "description": "The standard class for rendering (displaying) individual cells in a JTable . "
        },
        {
            "name": "DefaultTableCellRenderer.UIResource",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/DefaultTableCellRenderer.UIResource.html",
            "description": "A subclass of DefaultTableCellRenderer that implements UIResource . "
        },
        {
            "name": "DefaultTableColumnModel",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/DefaultTableColumnModel.html",
            "description": "The standard column-handler for a JTable . "
        },
        {
            "name": "DefaultTableModel",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html",
            "description": "This is an implementation of TableModel that uses a Vector of Vectors to store the cell value objects. "
        },
        {
            "name": "DefaultTextUI",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DefaultTextUI.html",
            "description": ""
        },
        {
            "name": "DefaultTreeCellEditor",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/DefaultTreeCellEditor.html",
            "description": "A TreeCellEditor . "
        },
        {
            "name": "DefaultTreeCellRenderer",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/DefaultTreeCellRenderer.html",
            "description": "Displays an entry in a tree. "
        },
        {
            "name": "DefaultTreeModel",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html",
            "description": "A simple tree data model that uses TreeNodes. "
        },
        {
            "name": "DefaultTreeSelectionModel",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/DefaultTreeSelectionModel.html",
            "description": "Default implementation of TreeSelectionModel. "
        },
        {
            "name": "Deflater",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/Deflater.html",
            "description": "This class provides support for general purpose compression using the popular ZLIB compression library. "
        },
        {
            "name": "DeflaterInputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/DeflaterInputStream.html",
            "description": "Implements an input stream filter for compressing data in the \"deflate\" compression format. "
        },
        {
            "name": "DeflaterOutputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/DeflaterOutputStream.html",
            "description": "This class implements an output stream filter for compressing data in the \"deflate\" compression format. "
        },
        {
            "name": "Delayed",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Delayed.html",
            "description": "A mix-in style interface for marking objects that should be acted upon after a given delay. "
        },
        {
            "name": "DelayQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/DelayQueue.html",
            "description": "An unbounded blocking queue of Delayed elements, in which an element can only be taken when its delay has expired. "
        },
        {
            "name": "DelegationPermission",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/DelegationPermission.html",
            "description": "This class is used to restrict the usage of the Kerberos delegation model, ie: forwardable and proxiable tickets. "
        },
        {
            "name": "Deprecated",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Deprecated.html",
            "description": "A program element annotated @Deprecated is one that programmers are discouraged from using. "
        },
        {
            "name": "DeprecatedTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DeprecatedTree.html",
            "description": "A tree node for an @deprecated block tag. "
        },
        {
            "name": "Deque",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Deque.html",
            "description": "A linear collection that supports element insertion and removal at both ends. "
        },
        {
            "name": "Description",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Description.html",
            "description": "Annotation that describes an element by using a sentence or two. "
        },
        {
            "name": "Descriptor",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/Descriptor.html",
            "description": "Additional metadata for a JMX element. "
        },
        {
            "name": "DescriptorAccess",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/DescriptorAccess.html",
            "description": "This interface is used to gain access to descriptors of the Descriptor class which are associated with a JMX component, i.e. "
        },
        {
            "name": "DescriptorKey",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/DescriptorKey.html",
            "description": "Meta-annotation that describes how an annotation element relates to a field in a Descriptor . "
        },
        {
            "name": "DescriptorRead",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/DescriptorRead.html",
            "description": "Interface to read the Descriptor of a management interface element such as an MBeanInfo. "
        },
        {
            "name": "DescriptorSupport",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/DescriptorSupport.html",
            "description": "This class represents the metadata set for a ModelMBean element. "
        },
        {
            "name": "DESedeKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DESedeKeySpec.html",
            "description": "This class specifies a DES-EDE (\"triple-DES\") key. "
        },
        {
            "name": "DesignMode",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/DesignMode.html",
            "description": "This interface is intended to be implemented by, or delegated from, instances of java.beans.beancontext.BeanContext, in order to propagate to its nested hierarchy of java.beans.beancontext.BeanContextChild instances, the current \"designTime\" property. "
        },
        {
            "name": "DESKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DESKeySpec.html",
            "description": "This class specifies a DES key. "
        },
        {
            "name": "Desktop",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Desktop.html",
            "description": "The Desktop class allows interact with various desktop capabilities. "
        },
        {
            "name": "Desktop.Action",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Desktop.Action.html",
            "description": "Represents an action type. "
        },
        {
            "name": "DesktopIconUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/DesktopIconUI.html",
            "description": "Pluggable look and feel interface for JDesktopIcon. "
        },
        {
            "name": "DesktopManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DesktopManager.html",
            "description": "DesktopManager objects are owned by a JDesktopPane object. "
        },
        {
            "name": "DesktopPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/DesktopPaneUI.html",
            "description": "Pluggable look and feel interface for JDesktopPane. "
        },
        {
            "name": "Destination",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Destination.html",
            "description": "Class Destination is a printing attribute class, a URI , that is used to indicate an alternate destination for the spooled printer formatted data. "
        },
        {
            "name": "Destroyable",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/Destroyable.html",
            "description": "Objects such as credentials may optionally implement this interface to provide the capability to destroy its contents. "
        },
        {
            "name": "DestroyFailedException",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/DestroyFailedException.html",
            "description": "Signals that a destroy operation failed. "
        },
        {
            "name": "DGC",
            "package": "java.rmi.dgc",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/dgc/DGC.html",
            "description": "The DGC abstraction is used for the server side of the distributed garbage collection algorithm. "
        },
        {
            "name": "DHGenParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DHGenParameterSpec.html",
            "description": "This class specifies the set of parameters used for generating Diffie-Hellman (system) parameters for use in Diffie-Hellman key agreement. "
        },
        {
            "name": "DHKey",
            "package": "javax.crypto.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/interfaces/DHKey.html",
            "description": "The interface to a Diffie-Hellman key. "
        },
        {
            "name": "DHParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DHParameterSpec.html",
            "description": "This class specifies the set of parameters used with the Diffie-Hellman algorithm, as specified in PKCS #3: Diffie-Hellman Key-Agreement Standard . "
        },
        {
            "name": "DHPrivateKey",
            "package": "javax.crypto.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/interfaces/DHPrivateKey.html",
            "description": "The interface to a Diffie-Hellman private key. "
        },
        {
            "name": "DHPrivateKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DHPrivateKeySpec.html",
            "description": "This class specifies a Diffie-Hellman private key with its associated parameters. "
        },
        {
            "name": "DHPublicKey",
            "package": "javax.crypto.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/interfaces/DHPublicKey.html",
            "description": "The interface to a Diffie-Hellman public key. "
        },
        {
            "name": "DHPublicKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/DHPublicKeySpec.html",
            "description": "This class specifies a Diffie-Hellman public key with its associated parameters. "
        },
        {
            "name": "Diag",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/Diag.html",
            "description": "Diagnostic information for a Snippet. "
        },
        {
            "name": "Diagnostic",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/Diagnostic.html",
            "description": "Interface for diagnostics from tools. "
        },
        {
            "name": "Diagnostic.Kind",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/Diagnostic.Kind.html",
            "description": "Kinds of diagnostics, for example, error or warning. "
        },
        {
            "name": "DiagnosticCollector",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/DiagnosticCollector.html",
            "description": "Provides an easy way to collect diagnostics in a list. "
        },
        {
            "name": "DiagnosticCommandMBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/DiagnosticCommandMBean.html",
            "description": "Management interface for the diagnostic commands for the HotSpot Virtual Machine. "
        },
        {
            "name": "DiagnosticListener",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/DiagnosticListener.html",
            "description": "Interface for receiving diagnostics from tools. "
        },
        {
            "name": "Dialog",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Dialog.html",
            "description": "A Dialog is a top-level window with a title and a border that is typically used to take some form of input from the user. "
        },
        {
            "name": "Dialog.ModalExclusionType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Dialog.ModalExclusionType.html",
            "description": "Any top-level window can be marked not to be blocked by modal dialogs. "
        },
        {
            "name": "Dialog.ModalityType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Dialog.ModalityType.html",
            "description": "Modal dialogs block all input to some top-level windows. "
        },
        {
            "name": "DialogOwner",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DialogOwner.html",
            "description": "An attribute class used to support requesting a print or page setup dialog be kept displayed on top of all windows or some specific window. "
        },
        {
            "name": "DialogTypeSelection",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DialogTypeSelection.html",
            "description": "Class DialogTypeSelection is a printing attribute class, an enumeration, that indicates the user dialog type to be used for specifying printing options. "
        },
        {
            "name": "Dictionary",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Dictionary.html",
            "description": "The Dictionary class is the abstract parent of any class, such as Hashtable , which maps keys to values. "
        },
        {
            "name": "DigestException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DigestException.html",
            "description": "This is the generic Message Digest exception. "
        },
        {
            "name": "DigestInputStream",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DigestInputStream.html",
            "description": "A transparent stream that updates the associated message digest using the bits going through the stream. "
        },
        {
            "name": "DigestMethod",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/DigestMethod.html",
            "description": "A representation of the XML DigestMethod element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "DigestMethodParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/DigestMethodParameterSpec.html",
            "description": "A specification of algorithm parameters for a DigestMethod algorithm. "
        },
        {
            "name": "DigestOutputStream",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DigestOutputStream.html",
            "description": "A transparent stream that updates the associated message digest using the bits going through the stream. "
        },
        {
            "name": "Dimension",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Dimension.html",
            "description": "The Dimension class encapsulates the width and height of a component (in integer precision) in a single object. "
        },
        {
            "name": "Dimension2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Dimension2D.html",
            "description": "The Dimension2D class is to encapsulate a width and a height dimension. "
        },
        {
            "name": "DimensionUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/DimensionUIResource.html",
            "description": "A subclass of Dimension that implements UIResource . "
        },
        {
            "name": "DirContext",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/DirContext.html",
            "description": "The directory service interface, containing methods for examining and updating attributes associated with objects, and for searching the directory. "
        },
        {
            "name": "DirectColorModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/DirectColorModel.html",
            "description": "The DirectColorModel class is a ColorModel class that works with pixel values that represent RGB color and alpha information as separate samples and that pack all samples for a single pixel into a single int, short, or byte quantity. "
        },
        {
            "name": "DirectExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/DirectExecutionControl.html",
            "description": "An ExecutionControl implementation that runs in the current process. "
        },
        {
            "name": "DirectiveTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/DirectiveTree.html",
            "description": "A super-type for all the directives in a ModuleTree. "
        },
        {
            "name": "DirectMethodHandleDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/DirectMethodHandleDesc.html",
            "description": "A nominal descriptor for a direct MethodHandle . "
        },
        {
            "name": "DirectMethodHandleDesc.Kind",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/DirectMethodHandleDesc.Kind.html",
            "description": "Kinds of method handles that can be described with DirectMethodHandleDesc . "
        },
        {
            "name": "DirectoryIteratorException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/DirectoryIteratorException.html",
            "description": "Runtime exception thrown if an I/O error is encountered when iterating over the entries in a directory. "
        },
        {
            "name": "DirectoryManager",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/DirectoryManager.html",
            "description": "This class contains methods for supporting DirContext implementations. "
        },
        {
            "name": "DirectoryNotEmptyException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html",
            "description": "Checked exception thrown when a file system operation fails because a directory is not empty. "
        },
        {
            "name": "DirectoryStream",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/DirectoryStream.html",
            "description": "An object to iterate over the entries in a directory. "
        },
        {
            "name": "DirectoryStream.Filter",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/DirectoryStream.Filter.html",
            "description": "An interface that is implemented by objects that decide if a directory entry should be accepted or filtered. "
        },
        {
            "name": "DirObjectFactory",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/DirObjectFactory.html",
            "description": "This interface represents a factory for creating an object given an object and attributes about the object. "
        },
        {
            "name": "DirStateFactory",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/DirStateFactory.html",
            "description": "This interface represents a factory for obtaining the state of an object and corresponding attributes for binding. "
        },
        {
            "name": "DirStateFactory.Result",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/DirStateFactory.Result.html",
            "description": "An object/attributes pair for returning the result of DirStateFactory.getStateToBind(). "
        },
        {
            "name": "DisplayMode",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/DisplayMode.html",
            "description": "The DisplayMode class encapsulates the bit depth, height, width, and refresh rate of a GraphicsDevice . "
        },
        {
            "name": "DnDConstants",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DnDConstants.html",
            "description": "This class contains constant values representing the type of action(s) to be performed by a Drag and Drop operation. "
        },
        {
            "name": "Doc",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/Doc.html",
            "description": "Interface Doc specifies the interface for an object that supplies one piece of print data for a Print Job. "
        },
        {
            "name": "DocAttribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/DocAttribute.html",
            "description": "Interface DocAttribute is a tagging interface which a printing attribute class implements to indicate the attribute denotes a setting for a doc. "
        },
        {
            "name": "DocAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/DocAttributeSet.html",
            "description": "Interface DocAttributeSet specifies the interface for a set of doc attributes, i.e. printing attributes that implement interface DocAttribute . "
        },
        {
            "name": "DocCommentTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocCommentTree.html",
            "description": "The top level representation of a documentation comment. "
        },
        {
            "name": "DocFlavor",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.html",
            "description": "Class DocFlavor encapsulates an object that specifies the format in which print data is supplied to a DocPrintJob . "
        },
        {
            "name": "DocFlavor.BYTE_ARRAY",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html",
            "description": "Class DocFlavor.BYTE_ARRAY provides predefined static constant DocFlavor objects for example doc flavors using a byte array ( byte[] ) as the print data representation class. "
        },
        {
            "name": "DocFlavor.CHAR_ARRAY",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.CHAR_ARRAY.html",
            "description": "Class DocFlavor.CHAR_ARRAY provides predefined static constant DocFlavor objects for example doc flavors using a character array ( char[] ) as the print data representation class. "
        },
        {
            "name": "DocFlavor.INPUT_STREAM",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html",
            "description": "Class DocFlavor.INPUT_STREAM provides predefined static constant DocFlavor objects for example doc flavors using a byte stream ( java.io.InputStream ) as the print data representation class. "
        },
        {
            "name": "DocFlavor.READER",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.READER.html",
            "description": "Class DocFlavor.READER provides predefined static constant DocFlavor objects for example doc flavors using a character stream ( java.io.Reader ) as the print data representation class. "
        },
        {
            "name": "DocFlavor.SERVICE_FORMATTED",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html",
            "description": "Class DocFlavor.SERVICE_FORMATTED provides predefined static constant DocFlavor objects for example doc flavors for service formatted print data. "
        },
        {
            "name": "DocFlavor.STRING",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.STRING.html",
            "description": "Class DocFlavor.STRING provides predefined static constant DocFlavor objects for example doc flavors using a string ( java.lang.String ) as the print data representation class. "
        },
        {
            "name": "DocFlavor.URL",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocFlavor.URL.html",
            "description": "Class DocFlavor.URL provides predefined static constant DocFlavor objects. "
        },
        {
            "name": "Doclet",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Doclet.html",
            "description": "The user doclet must implement this interface, as described in the package description . "
        },
        {
            "name": "Doclet.Option",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Doclet.Option.html",
            "description": "An encapsulation of option name, aliases, parameters and descriptions as used by the Doclet. "
        },
        {
            "name": "Doclet.Option.Kind",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Doclet.Option.Kind.html",
            "description": "The kind of an option. "
        },
        {
            "name": "DocletEnvironment",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/DocletEnvironment.html",
            "description": "Represents the operating environment of a single invocation of the doclet. "
        },
        {
            "name": "DocletEnvironment.ModuleMode",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/DocletEnvironment.ModuleMode.html",
            "description": "The mode specifying the level of detail of module documentation. "
        },
        {
            "name": "DocPrintJob",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/DocPrintJob.html",
            "description": "This interface represents a print job that can print a specified document with a set of job attributes. "
        },
        {
            "name": "DocRootTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocRootTree.html",
            "description": "A tree node for an @docroot inline tag. "
        },
        {
            "name": "DocSourcePositions",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocSourcePositions.html",
            "description": "Provides methods to obtain the position of a DocTree within a javadoc comment. "
        },
        {
            "name": "DocTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocTree.html",
            "description": "Common interface for all nodes in a documentation syntax tree. "
        },
        {
            "name": "DocTree.Kind",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocTree.Kind.html",
            "description": "Enumerates all kinds of trees. "
        },
        {
            "name": "DocTreeFactory",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocTreeFactory.html",
            "description": "Factory for creating DocTree nodes. "
        },
        {
            "name": "DocTreePath",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocTreePath.html",
            "description": "A path of tree nodes, typically used to represent the sequence of ancestor nodes of a tree node up to the top level DocCommentTree node. "
        },
        {
            "name": "DocTreePathScanner",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocTreePathScanner.html",
            "description": "A DocTreeVisitor that visits all the child tree nodes, and provides support for maintaining a path for the parent nodes. "
        },
        {
            "name": "DocTrees",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocTrees.html",
            "description": "Provides access to syntax trees for doc comments. "
        },
        {
            "name": "DocTreeScanner",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/DocTreeScanner.html",
            "description": "A TreeVisitor that visits all the child tree nodes. "
        },
        {
            "name": "DocTreeVisitor",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocTreeVisitor.html",
            "description": "A visitor of trees, in the style of the visitor design pattern. "
        },
        {
            "name": "DocTypeTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/DocTypeTree.html",
            "description": "A tree node for a doctype declaration. "
        },
        {
            "name": "Document",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Document.html",
            "description": "The Document is a container for text that serves as the model for swing text components. "
        },
        {
            "name": "Document",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Document.html",
            "description": "The Document interface represents the entire HTML or XML document. "
        },
        {
            "name": "DocumentationTool",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/DocumentationTool.html",
            "description": "Interface to invoke Java programming language documentation tools from programs. "
        },
        {
            "name": "DocumentationTool.DocumentationTask",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/DocumentationTool.DocumentationTask.html",
            "description": "Interface representing a future for a documentation task. "
        },
        {
            "name": "DocumentationTool.Location",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/DocumentationTool.Location.html",
            "description": "Locations specific to DocumentationTool . "
        },
        {
            "name": "DocumentBuilder",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/DocumentBuilder.html",
            "description": "Defines the API to obtain DOM Document instances from an XML document. "
        },
        {
            "name": "DocumentBuilderFactory",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/DocumentBuilderFactory.html",
            "description": "Defines a factory API that enables applications to obtain a parser that produces DOM object trees from XML documents. "
        },
        {
            "name": "DocumentCSS",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/DocumentCSS.html",
            "description": "This interface represents a document with a CSS view. "
        },
        {
            "name": "Documented",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Documented.html",
            "description": "If the annotation @Documented is present on the declaration of an annotation type A , then any @A annotation on an element is considered part of the element's public contract. "
        },
        {
            "name": "DocumentEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/DocumentEvent.html",
            "description": "Interface for document change notifications. "
        },
        {
            "name": "DocumentEvent",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/DocumentEvent.html",
            "description": "The DocumentEvent interface provides a mechanism by which the user can create an Event of a type supported by the implementation. "
        },
        {
            "name": "DocumentEvent.ElementChange",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/DocumentEvent.ElementChange.html",
            "description": "Describes changes made to a specific element. "
        },
        {
            "name": "DocumentEvent.EventType",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/DocumentEvent.EventType.html",
            "description": "Enumeration for document event types "
        },
        {
            "name": "DocumentFilter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DocumentFilter.html",
            "description": "DocumentFilter , as the name implies, is a filter for the Document mutation methods. "
        },
        {
            "name": "DocumentFilter.FilterBypass",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/DocumentFilter.FilterBypass.html",
            "description": "Used as a way to circumvent calling back into the Document to change it. "
        },
        {
            "name": "DocumentFragment",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DocumentFragment.html",
            "description": "DocumentFragment is a \"lightweight\" or \"minimal\" Document object. "
        },
        {
            "name": "DocumentHandler",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/DocumentHandler.html",
            "description": "This interface has been replaced by the SAX2 ContentHandler interface, which includes Namespace support. "
        },
        {
            "name": "DocumentListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/DocumentListener.html",
            "description": "Interface for an observer to register to receive notifications of changes to a text document. "
        },
        {
            "name": "DocumentName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/DocumentName.html",
            "description": "Class DocumentName is a printing attribute class, a text attribute, that specifies the name of a document. "
        },
        {
            "name": "DocumentParser",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/DocumentParser.html",
            "description": "A Parser for HTML Documents (actually, you can specify a DTD, but you should really only use this class with the html dtd in swing). "
        },
        {
            "name": "DocumentRange",
            "package": "org.w3c.dom.ranges",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ranges/DocumentRange.html",
            "description": "See also the Document Object Model (DOM) Level 2 Traversal and Range Specification . "
        },
        {
            "name": "DocumentStyle",
            "package": "org.w3c.dom.stylesheets",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/stylesheets/DocumentStyle.html",
            "description": "The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document can be retrieved. "
        },
        {
            "name": "DocumentTraversal",
            "package": "org.w3c.dom.traversal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/traversal/DocumentTraversal.html",
            "description": "DocumentTraversal contains methods that create NodeIterators and TreeWalkers to traverse a node and its children in document order (depth first, pre-order traversal, which is equivalent to the order in which the start tags occur in the text representation of the document). "
        },
        {
            "name": "DocumentType",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DocumentType.html",
            "description": "Each Document has a doctype attribute whose value is either null or a DocumentType object. "
        },
        {
            "name": "DocumentView",
            "package": "org.w3c.dom.views",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/views/DocumentView.html",
            "description": "The DocumentView interface is implemented by Document objects in DOM implementations supporting DOM Views. "
        },
        {
            "name": "DomainCombiner",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DomainCombiner.html",
            "description": "A DomainCombiner provides a means to dynamically update the ProtectionDomains associated with the current AccessControlContext . "
        },
        {
            "name": "DomainLoadStoreParameter",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DomainLoadStoreParameter.html",
            "description": "Configuration data that specifies the keystores in a keystore domain. "
        },
        {
            "name": "DOMConfiguration",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMConfiguration.html",
            "description": "The DOMConfiguration interface represents the configuration of a document and maintains a table of recognized parameters. "
        },
        {
            "name": "DOMCryptoContext",
            "package": "javax.xml.crypto.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dom/DOMCryptoContext.html",
            "description": "This class provides a DOM-specific implementation of the XMLCryptoContext interface. "
        },
        {
            "name": "DOMError",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMError.html",
            "description": "DOMError is an interface that describes an error. "
        },
        {
            "name": "DOMErrorHandler",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMErrorHandler.html",
            "description": "DOMErrorHandler is a callback interface that the DOM implementation can call when reporting errors that happens while processing XML data, or when doing some other processing (e.g. validating a document). "
        },
        {
            "name": "DOMException",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMException.html",
            "description": "DOM operations only raise exceptions in \"exceptional\" circumstances, i.e., when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). "
        },
        {
            "name": "DOMImplementation",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMImplementation.html",
            "description": "The DOMImplementation interface provides a number of methods for performing operations that are independent of any particular instance of the document object model. "
        },
        {
            "name": "DOMImplementationCSS",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/DOMImplementationCSS.html",
            "description": "This interface allows the DOM user to create a CSSStyleSheet outside the context of a document. "
        },
        {
            "name": "DOMImplementationList",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMImplementationList.html",
            "description": "The DOMImplementationList interface provides the abstraction of an ordered collection of DOM implementations, without defining or constraining how this collection is implemented. "
        },
        {
            "name": "DOMImplementationLS",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/DOMImplementationLS.html",
            "description": "DOMImplementationLS contains the factory methods for creating Load and Save objects. "
        },
        {
            "name": "DOMImplementationRegistry",
            "package": "org.w3c.dom.bootstrap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/bootstrap/DOMImplementationRegistry.html",
            "description": "A factory that enables applications to obtain instances of DOMImplementation . "
        },
        {
            "name": "DOMImplementationSource",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMImplementationSource.html",
            "description": "This interface permits a DOM implementer to supply one or more implementations, based upon requested features and versions, as specified in DOM Features . "
        },
        {
            "name": "DOMLocator",
            "package": "javax.xml.transform.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/dom/DOMLocator.html",
            "description": "Indicates the position of a node in a source DOM, intended primarily for error reporting. "
        },
        {
            "name": "DOMLocator",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMLocator.html",
            "description": "DOMLocator is an interface that describes a location (e.g. "
        },
        {
            "name": "DOMResult",
            "package": "javax.xml.transform.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/dom/DOMResult.html",
            "description": "Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. "
        },
        {
            "name": "DOMSignContext",
            "package": "javax.xml.crypto.dsig.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/dom/DOMSignContext.html",
            "description": "A DOM-specific XMLSignContext . "
        },
        {
            "name": "DOMSource",
            "package": "javax.xml.transform.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/dom/DOMSource.html",
            "description": "Acts as a holder for a transformation Source tree in the form of a Document Object Model (DOM) tree. "
        },
        {
            "name": "DOMStringList",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/DOMStringList.html",
            "description": "The DOMStringList interface provides the abstraction of an ordered collection of DOMString values, without defining or constraining how this collection is implemented. "
        },
        {
            "name": "DOMStructure",
            "package": "javax.xml.crypto.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dom/DOMStructure.html",
            "description": "A DOM-specific XMLStructure . "
        },
        {
            "name": "DOMURIReference",
            "package": "javax.xml.crypto.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dom/DOMURIReference.html",
            "description": "A DOM-specific URIReference . "
        },
        {
            "name": "DOMValidateContext",
            "package": "javax.xml.crypto.dsig.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/dom/DOMValidateContext.html",
            "description": "A DOM-specific XMLValidateContext . "
        },
        {
            "name": "DosFileAttributes",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/DosFileAttributes.html",
            "description": "File attributes associated with a file in a file system that supports legacy \"DOS\" attributes. "
        },
        {
            "name": "DosFileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/DosFileAttributeView.html",
            "description": "A file attribute view that provides a view of the legacy \"DOS\" file attributes. "
        },
        {
            "name": "Double",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Double.html",
            "description": "The Double class wraps a value of the primitive type double in an object. "
        },
        {
            "name": "DoubleAccumulator",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/DoubleAccumulator.html",
            "description": "One or more variables that together maintain a running double value updated using a supplied function. "
        },
        {
            "name": "DoubleAdder",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/DoubleAdder.html",
            "description": "One or more variables that together maintain an initially zero double sum. "
        },
        {
            "name": "DoubleBinaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleBinaryOperator.html",
            "description": "Represents an operation upon two double -valued operands and producing a double -valued result. "
        },
        {
            "name": "DoubleBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/DoubleBuffer.html",
            "description": "A double buffer. "
        },
        {
            "name": "DoubleConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleConsumer.html",
            "description": "Represents an operation that accepts a single double -valued argument and returns no result. "
        },
        {
            "name": "DoubleFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleFunction.html",
            "description": "Represents a function that accepts a double-valued argument and produces a result. "
        },
        {
            "name": "DoublePredicate",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoublePredicate.html",
            "description": "Represents a predicate (boolean-valued function) of one double -valued argument. "
        },
        {
            "name": "DoubleStream",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/DoubleStream.html",
            "description": "A sequence of primitive double-valued elements supporting sequential and parallel aggregate operations. "
        },
        {
            "name": "DoubleStream.Builder",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/DoubleStream.Builder.html",
            "description": "A mutable builder for a DoubleStream . "
        },
        {
            "name": "DoubleSummaryStatistics",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/DoubleSummaryStatistics.html",
            "description": "A state object for collecting statistics such as count, min, max, sum, and average. "
        },
        {
            "name": "DoubleSupplier",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleSupplier.html",
            "description": "Represents a supplier of double -valued results. "
        },
        {
            "name": "DoubleToIntFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleToIntFunction.html",
            "description": "Represents a function that accepts a double-valued argument and produces an int-valued result. "
        },
        {
            "name": "DoubleToLongFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleToLongFunction.html",
            "description": "Represents a function that accepts a double-valued argument and produces a long-valued result. "
        },
        {
            "name": "DoubleType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/DoubleType.html",
            "description": "The type of all primitive double values accessed in the target VM. "
        },
        {
            "name": "DoubleUnaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/DoubleUnaryOperator.html",
            "description": "Represents an operation on a single double -valued operand that produces a double -valued result. "
        },
        {
            "name": "DoubleValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/DoubleValue.html",
            "description": "Provides access to a primitive double value in the target VM. "
        },
        {
            "name": "DoWhileLoopTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/DoWhileLoopTree.html",
            "description": "A tree node for a do statement. "
        },
        {
            "name": "DragGestureEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragGestureEvent.html",
            "description": "A DragGestureEvent is passed to DragGestureListener 's dragGestureRecognized() method when a particular DragGestureRecognizer detects that a platform dependent drag initiating gesture has occurred on the Component that it is tracking. "
        },
        {
            "name": "DragGestureListener",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragGestureListener.html",
            "description": "The listener interface for receiving drag gesture events. "
        },
        {
            "name": "DragGestureRecognizer",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragGestureRecognizer.html",
            "description": "The DragGestureRecognizer is an abstract base class for the specification of a platform-dependent listener that can be associated with a particular Component in order to identify platform-dependent drag initiating gestures. "
        },
        {
            "name": "DragSource",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSource.html",
            "description": "The DragSource is the entity responsible for the initiation of the Drag and Drop operation, and may be used in a number of scenarios:  1 default instance per JVM for the lifetime of that JVM. "
        },
        {
            "name": "DragSourceAdapter",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceAdapter.html",
            "description": "An abstract adapter class for receiving drag source events. "
        },
        {
            "name": "DragSourceContext",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceContext.html",
            "description": "The DragSourceContext class is responsible for managing the initiator side of the Drag and Drop protocol. "
        },
        {
            "name": "DragSourceDragEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceDragEvent.html",
            "description": "The DragSourceDragEvent is delivered from the DragSourceContextPeer , via the DragSourceContext , to the DragSourceListener registered with that DragSourceContext and with its associated DragSource . "
        },
        {
            "name": "DragSourceDropEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceDropEvent.html",
            "description": "The DragSourceDropEvent is delivered from the DragSourceContextPeer , via the DragSourceContext , to the dragDropEnd method of DragSourceListener s registered with that DragSourceContext and with its associated DragSource . "
        },
        {
            "name": "DragSourceEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceEvent.html",
            "description": "This class is the base class for DragSourceDragEvent and DragSourceDropEvent . "
        },
        {
            "name": "DragSourceListener",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceListener.html",
            "description": "The DragSourceListener defines the event interface for originators of Drag and Drop operations to track the state of the user's gesture, and to provide appropriate \"drag over\" feedback to the user throughout the Drag and Drop operation. "
        },
        {
            "name": "DragSourceMotionListener",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DragSourceMotionListener.html",
            "description": "A listener interface for receiving mouse motion events during a drag operation. "
        },
        {
            "name": "DrbgParameters",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DrbgParameters.html",
            "description": "This class specifies the parameters used by a DRBG (Deterministic Random Bit Generator). "
        },
        {
            "name": "DrbgParameters.Capability",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DrbgParameters.Capability.html",
            "description": "The reseedable and prediction resistance capabilities of a DRBG. "
        },
        {
            "name": "DrbgParameters.Instantiation",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DrbgParameters.Instantiation.html",
            "description": "DRBG parameters for instantiation. "
        },
        {
            "name": "DrbgParameters.NextBytes",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DrbgParameters.NextBytes.html",
            "description": "DRBG parameters for random bits generation. "
        },
        {
            "name": "DrbgParameters.Reseed",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/DrbgParameters.Reseed.html",
            "description": "DRBG parameters for reseed. "
        },
        {
            "name": "Driver",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Driver.html",
            "description": "The interface that every driver class must implement. "
        },
        {
            "name": "DriverAction",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/DriverAction.html",
            "description": "An interface that must be implemented when a Driver wants to be notified by DriverManager . "
        },
        {
            "name": "DriverManager",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/DriverManager.html",
            "description": "The basic service for managing a set of JDBC drivers. "
        },
        {
            "name": "DriverPropertyInfo",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/DriverPropertyInfo.html",
            "description": "Driver properties for making a connection. "
        },
        {
            "name": "DropMode",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/DropMode.html",
            "description": "Drop modes, used to determine the method by which a component tracks and indicates a drop location during drag and drop. "
        },
        {
            "name": "DropTarget",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTarget.html",
            "description": "The DropTarget is associated with a Component when that Component wishes to accept drops during Drag and Drop operations. "
        },
        {
            "name": "DropTarget.DropTargetAutoScroller",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTarget.DropTargetAutoScroller.html",
            "description": "this protected nested class implements autoscrolling "
        },
        {
            "name": "DropTargetAdapter",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetAdapter.html",
            "description": "An abstract adapter class for receiving drop target events. "
        },
        {
            "name": "DropTargetContext",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetContext.html",
            "description": "A DropTargetContext is created whenever the logical cursor associated with a Drag and Drop operation coincides with the visible geometry of a Component associated with a DropTarget . "
        },
        {
            "name": "DropTargetDragEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetDragEvent.html",
            "description": "The DropTargetDragEvent is delivered to a DropTargetListener via its dragEnter() and dragOver() methods. "
        },
        {
            "name": "DropTargetDropEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetDropEvent.html",
            "description": "The DropTargetDropEvent is delivered via the DropTargetListener drop() method. "
        },
        {
            "name": "DropTargetEvent",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetEvent.html",
            "description": "The DropTargetEvent is the base class for both the DropTargetDragEvent and the DropTargetDropEvent . "
        },
        {
            "name": "DropTargetListener",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/DropTargetListener.html",
            "description": "The DropTargetListener interface is the callback interface used by the DropTarget class to provide notification of DnD operations that involve the subject DropTarget . "
        },
        {
            "name": "DSAGenParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/DSAGenParameterSpec.html",
            "description": "This immutable class specifies the set of parameters used for generating DSA parameters as specified in FIPS 186-3 Digital Signature Standard (DSS) . "
        },
        {
            "name": "DSAKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/DSAKey.html",
            "description": "The interface to a DSA public or private key. "
        },
        {
            "name": "DSAKeyPairGenerator",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/DSAKeyPairGenerator.html",
            "description": "An interface to an object capable of generating DSA key pairs. "
        },
        {
            "name": "DSAParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/DSAParameterSpec.html",
            "description": "This class specifies the set of parameters used with the DSA algorithm. "
        },
        {
            "name": "DSAParams",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/DSAParams.html",
            "description": "Interface to a DSA-specific set of key parameters, which defines a DSA key family . "
        },
        {
            "name": "DSAPrivateKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/DSAPrivateKey.html",
            "description": "The standard interface to a DSA private key. "
        },
        {
            "name": "DSAPrivateKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/DSAPrivateKeySpec.html",
            "description": "This class specifies a DSA private key with its associated parameters. "
        },
        {
            "name": "DSAPublicKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/DSAPublicKey.html",
            "description": "The interface to a DSA public key. "
        },
        {
            "name": "DSAPublicKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/DSAPublicKeySpec.html",
            "description": "This class specifies a DSA public key with its associated parameters. "
        },
        {
            "name": "DTD",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/DTD.html",
            "description": "The representation of an SGML DTD. "
        },
        {
            "name": "DTD",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/DTD.html",
            "description": "This is the top level interface for events dealing with DTDs "
        },
        {
            "name": "DTDConstants",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html",
            "description": "SGML constants used in a DTD. "
        },
        {
            "name": "DTDHandler",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/DTDHandler.html",
            "description": "Receive notification of basic DTD-related events. "
        },
        {
            "name": "DuplicateFormatFlagsException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/DuplicateFormatFlagsException.html",
            "description": "Unchecked exception thrown when duplicate flags are provided in the format specifier. "
        },
        {
            "name": "DuplicateRequestException",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/DuplicateRequestException.html",
            "description": "Thrown to indicate a duplicate event request. "
        },
        {
            "name": "Duration",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Duration.html",
            "description": "A time-based amount of time, such as '34.5 seconds'. "
        },
        {
            "name": "Duration",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/Duration.html",
            "description": "Immutable representation of a time span as defined in the W3C XML Schema 1.0 specification. "
        },
        {
            "name": "DynamicCallSiteDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/DynamicCallSiteDesc.html",
            "description": "A nominal descriptor for an invokedynamic call site. "
        },
        {
            "name": "DynamicConstantDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/DynamicConstantDesc.html",
            "description": "A nominal descriptor for a dynamic constant (one described in the constant pool with Constant_Dynamic_info .) "
        },
        {
            "name": "DynamicLinker",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/DynamicLinker.html",
            "description": "The linker for RelinkableCallSite objects. "
        },
        {
            "name": "DynamicLinkerFactory",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/DynamicLinkerFactory.html",
            "description": "A factory class for creating DynamicLinker objects. "
        },
        {
            "name": "DynamicMBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/DynamicMBean.html",
            "description": "Defines the methods that should be implemented by a Dynamic MBean (MBean that exposes a dynamic management interface). "
        },
        {
            "name": "ECField",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECField.html",
            "description": "This interface represents an elliptic curve (EC) finite field. "
        },
        {
            "name": "ECFieldF2m",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECFieldF2m.html",
            "description": "This immutable class defines an elliptic curve (EC) characteristic 2 finite field. "
        },
        {
            "name": "ECFieldFp",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECFieldFp.html",
            "description": "This immutable class defines an elliptic curve (EC) prime finite field. "
        },
        {
            "name": "ECGenParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECGenParameterSpec.html",
            "description": "This immutable class specifies the set of parameters used for generating elliptic curve (EC) domain parameters. "
        },
        {
            "name": "ECKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/ECKey.html",
            "description": "The interface to an elliptic curve (EC) key. "
        },
        {
            "name": "ECParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECParameterSpec.html",
            "description": "This immutable class specifies the set of domain parameters used with elliptic curve cryptography (ECC). "
        },
        {
            "name": "ECPoint",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECPoint.html",
            "description": "This immutable class represents a point on an elliptic curve (EC) in affine coordinates. "
        },
        {
            "name": "ECPrivateKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/ECPrivateKey.html",
            "description": "The interface to an elliptic curve (EC) private key. "
        },
        {
            "name": "ECPrivateKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECPrivateKeySpec.html",
            "description": "This immutable class specifies an elliptic curve private key with its associated parameters. "
        },
        {
            "name": "ECPublicKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/ECPublicKey.html",
            "description": "The interface to an elliptic curve (EC) public key. "
        },
        {
            "name": "ECPublicKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/ECPublicKeySpec.html",
            "description": "This immutable class specifies an elliptic curve public key with its associated parameters. "
        },
        {
            "name": "EdDSAParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EdDSAParameterSpec.html",
            "description": "A class used to specify EdDSA signature and verification parameters. "
        },
        {
            "name": "EdECKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/EdECKey.html",
            "description": "An interface for an elliptic curve public/private key as defined by RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) . "
        },
        {
            "name": "EdECPoint",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EdECPoint.html",
            "description": "An elliptic curve point used to specify keys as defined by RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) . "
        },
        {
            "name": "EdECPrivateKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/EdECPrivateKey.html",
            "description": "An interface for an elliptic curve private key as defined by RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) . "
        },
        {
            "name": "EdECPrivateKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EdECPrivateKeySpec.html",
            "description": "A class representing elliptic curve private keys as defined in RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) , including the curve and other algorithm parameters. "
        },
        {
            "name": "EdECPublicKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/EdECPublicKey.html",
            "description": "An interface for an elliptic curve public key as defined by RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) . "
        },
        {
            "name": "EdECPublicKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EdECPublicKeySpec.html",
            "description": "A class representing elliptic curve public keys as defined in RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) , including the curve and other algorithm parameters. "
        },
        {
            "name": "EditorKit",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/EditorKit.html",
            "description": "Establishes the set of things needed by a text component to be a reasonably functioning editor for some type of text content. "
        },
        {
            "name": "Element",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/Element.html",
            "description": "Represents a program element such as a module, package, class, or method. "
        },
        {
            "name": "Element",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Element.html",
            "description": "Interface to describe a structural piece of a document. "
        },
        {
            "name": "Element",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/Element.html",
            "description": "An element as described in a DTD using the ELEMENT construct. "
        },
        {
            "name": "Element",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Element.html",
            "description": "The Element interface represents an element in an HTML or XML document. "
        },
        {
            "name": "ElementCSSInlineStyle",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/ElementCSSInlineStyle.html",
            "description": "Inline style information attached to elements is exposed through the style attribute. "
        },
        {
            "name": "ElementFilter",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementFilter.html",
            "description": "Filters for selecting just the elements of interest from a collection of elements. "
        },
        {
            "name": "ElementIterator",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ElementIterator.html",
            "description": "ElementIterator , as the name suggests, iterates over the Element tree. "
        },
        {
            "name": "ElementKind",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ElementKind.html",
            "description": "The kind of an element. "
        },
        {
            "name": "ElementKindVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementKindVisitor14.html",
            "description": "Associated with records, a preview feature of the Java language. A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_14 source version. "
        },
        {
            "name": "ElementKindVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementKindVisitor6.html",
            "description": "A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "ElementKindVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementKindVisitor7.html",
            "description": "A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "ElementKindVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementKindVisitor8.html",
            "description": "A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "ElementKindVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementKindVisitor9.html",
            "description": "A visitor of program elements based on their kind with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "Elements",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/Elements.html",
            "description": "Utility methods for operating on program elements. "
        },
        {
            "name": "Elements.Origin",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html",
            "description": "The origin of an element or other language model item. "
        },
        {
            "name": "ElementScanner14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementScanner14.html",
            "description": "Associated with records, a preview feature of the Java language. A scanning visitor of program elements with default behavior appropriate for the RELEASE_14 source version. "
        },
        {
            "name": "ElementScanner6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementScanner6.html",
            "description": "A scanning visitor of program elements with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "ElementScanner7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementScanner7.html",
            "description": "A scanning visitor of program elements with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "ElementScanner8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementScanner8.html",
            "description": "A scanning visitor of program elements with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "ElementScanner9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/ElementScanner9.html",
            "description": "A scanning visitor of program elements with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "ElementTraversal",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ElementTraversal.html",
            "description": "The ElementTraversal interface is a set of read-only attributes which allow an author to easily navigate between elements in a document. "
        },
        {
            "name": "ElementType",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/ElementType.html",
            "description": "The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. "
        },
        {
            "name": "ElementVisitor",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ElementVisitor.html",
            "description": "A visitor of program elements, in the style of the visitor design pattern. "
        },
        {
            "name": "Ellipse2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Ellipse2D.html",
            "description": "The Ellipse2D class describes an ellipse that is defined by a framing rectangle. "
        },
        {
            "name": "Ellipse2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Ellipse2D.Double.html",
            "description": "The Double class defines an ellipse specified in double precision. "
        },
        {
            "name": "Ellipse2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Ellipse2D.Float.html",
            "description": "The Float class defines an ellipse specified in float precision. "
        },
        {
            "name": "EllipticCurve",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EllipticCurve.html",
            "description": "This immutable class holds the necessary values needed to represent an elliptic curve. "
        },
        {
            "name": "EmptyBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/EmptyBorder.html",
            "description": "A class which provides an empty, transparent border which takes up space but does no drawing. "
        },
        {
            "name": "EmptyStackException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EmptyStackException.html",
            "description": "Thrown by methods in the Stack class to indicate that the stack is empty. "
        },
        {
            "name": "EmptyStatementTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/EmptyStatementTree.html",
            "description": "A tree node for an empty (skip) statement. "
        },
        {
            "name": "Enabled",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Enabled.html",
            "description": "Event annotation, determines if an event should be enabled by default. "
        },
        {
            "name": "EncodedKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/EncodedKeySpec.html",
            "description": "This class represents a public or private key in encoded format. "
        },
        {
            "name": "Encoder",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Encoder.html",
            "description": "An Encoder is a class which can be used to create files or streams that encode the state of a collection of JavaBeans in terms of their public APIs. "
        },
        {
            "name": "EncryptedPrivateKeyInfo",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/EncryptedPrivateKeyInfo.html",
            "description": "This class implements the EncryptedPrivateKeyInfo type as defined in PKCS #8. "
        },
        {
            "name": "EncryptionKey",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/EncryptionKey.html",
            "description": "This class encapsulates an EncryptionKey used in Kerberos. "
        },
        {
            "name": "EndDocument",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/EndDocument.html",
            "description": "A marker interface for the end of the document "
        },
        {
            "name": "EndElement",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/EndElement.html",
            "description": "An interface for the end element event. "
        },
        {
            "name": "EndElementTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/EndElementTree.html",
            "description": "A tree node for the end of an HTML element. "
        },
        {
            "name": "EnhancedForLoopTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/EnhancedForLoopTree.html",
            "description": "A tree node for an \"enhanced\" for loop statement. "
        },
        {
            "name": "Entity",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/Entity.html",
            "description": "An entity is described in a DTD using the ENTITY construct. "
        },
        {
            "name": "Entity",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Entity.html",
            "description": "This interface represents a known entity, either parsed or unparsed, in an XML document. "
        },
        {
            "name": "EntityDeclaration",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/EntityDeclaration.html",
            "description": "An interface for handling Entity Declarations This interface is used to record and report unparsed entity declarations. "
        },
        {
            "name": "EntityReference",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/EntityReference.html",
            "description": "An interface for handling Entity events. "
        },
        {
            "name": "EntityReference",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/EntityReference.html",
            "description": "EntityReference nodes may be used to represent an entity reference in the tree. "
        },
        {
            "name": "EntityResolver",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/EntityResolver.html",
            "description": "Basic interface for resolving entities. "
        },
        {
            "name": "EntityResolver2",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/EntityResolver2.html",
            "description": "Extended interface for mapping external entity references to input sources, or providing a missing external subset. "
        },
        {
            "name": "EntityTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/EntityTree.html",
            "description": "A tree node for an HTML entity. "
        },
        {
            "name": "Enum",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Enum.html",
            "description": "This is the common base class of all Java language enumeration types. "
        },
        {
            "name": "Enum.EnumDesc",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Enum.EnumDesc.html",
            "description": "A nominal descriptor for an enum constant. "
        },
        {
            "name": "EnumConstantNotPresentException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/EnumConstantNotPresentException.html",
            "description": "Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name. "
        },
        {
            "name": "EnumControl",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/EnumControl.html",
            "description": "An EnumControl provides control over a set of discrete possible values, each represented by an object. "
        },
        {
            "name": "EnumControl.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/EnumControl.Type.html",
            "description": "An instance of the EnumControl.Type inner class identifies one kind of enumerated control. "
        },
        {
            "name": "Enumeration",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Enumeration.html",
            "description": "An object that implements the Enumeration interface generates a series of elements, one at a time. "
        },
        {
            "name": "EnumMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EnumMap.html",
            "description": "A specialized Map implementation for use with enum type keys. "
        },
        {
            "name": "EnumSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EnumSet.html",
            "description": "A specialized Set implementation for use with enum types. "
        },
        {
            "name": "EnumSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html",
            "description": "Class EnumSyntax is an abstract base class providing the common implementation of all \"type safe enumeration\" objects. "
        },
        {
            "name": "EOFException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/EOFException.html",
            "description": "Signals that an end of file or end of stream has been reached unexpectedly during input. "
        },
        {
            "name": "Era",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/Era.html",
            "description": "An era of the time-line. "
        },
        {
            "name": "ErroneousSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/ErroneousSnippet.html",
            "description": "A snippet of code that is not valid Java programming language code. "
        },
        {
            "name": "ErroneousTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ErroneousTree.html",
            "description": "A tree node to stand in for a malformed text "
        },
        {
            "name": "ErroneousTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ErroneousTree.html",
            "description": "A tree node to stand in for a malformed expression. "
        },
        {
            "name": "Error",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Error.html",
            "description": "An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. "
        },
        {
            "name": "ErrorHandler",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ErrorHandler.html",
            "description": "Basic interface for SAX error handlers. "
        },
        {
            "name": "ErrorListener",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/ErrorListener.html",
            "description": "The listener interface used by a TransformerFactory or Transformer to notify callers of error messages that occur during a transformation process. "
        },
        {
            "name": "ErrorManager",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/ErrorManager.html",
            "description": "ErrorManager objects can be attached to Handlers to process any error that occurs on a Handler during Logging. "
        },
        {
            "name": "ErrorType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/ErrorType.html",
            "description": "Represents a class or interface type that cannot be properly modeled. "
        },
        {
            "name": "EtchedBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/EtchedBorder.html",
            "description": "A class which implements a simple etched border which can either be etched-in or etched-out. "
        },
        {
            "name": "EvalException",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/EvalException.html",
            "description": "Wraps an throwable thrown in the executing client. "
        },
        {
            "name": "Event",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/Event.html",
            "description": "An occurrence in a target VM that is of interest to a debugger. "
        },
        {
            "name": "Event",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Event.html",
            "description": "It is recommended that AWTEvent and its subclasses be             used instead "
        },
        {
            "name": "Event",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Event.html",
            "description": "Base class for events, to be subclassed in order to define events and their fields. "
        },
        {
            "name": "Event",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/Event.html",
            "description": "The Event interface is used to provide contextual information about an event to the handler processing the event. "
        },
        {
            "name": "EventContext",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/EventContext.html",
            "description": "Contains methods for registering/deregistering listeners to be notified of events fired when objects named in a context changes. "
        },
        {
            "name": "EventDirContext",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/EventDirContext.html",
            "description": "Contains methods for registering listeners to be notified of events fired when objects named in a directory context changes. "
        },
        {
            "name": "EventException",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/EventException.html",
            "description": "Event operations may throw an EventException as specified in their method descriptions. "
        },
        {
            "name": "EventFactory",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/EventFactory.html",
            "description": "Class for defining an event at runtime. "
        },
        {
            "name": "EventFilter",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/EventFilter.html",
            "description": "This interface declares a simple filter interface that one can create to filter XMLEventReaders "
        },
        {
            "name": "EventHandler",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/EventHandler.html",
            "description": "The EventHandler class provides support for dynamically generating event listeners whose methods execute a simple statement involving an incoming event object and a target object. "
        },
        {
            "name": "EventID",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventID.html",
            "description": "EventID contains integer constants that map to event support in AWT and Swing. "
        },
        {
            "name": "EventIterator",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/EventIterator.html",
            "description": "EventIterators are unmodifiable. "
        },
        {
            "name": "EventListener",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EventListener.html",
            "description": "A tagging interface that all event listener interfaces must extend. "
        },
        {
            "name": "EventListener",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/EventListener.html",
            "description": "The EventListener interface is the primary method for handling events. "
        },
        {
            "name": "EventListenerList",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/EventListenerList.html",
            "description": "A class that holds a list of EventListeners. "
        },
        {
            "name": "EventListenerProxy",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EventListenerProxy.html",
            "description": "An abstract wrapper class for an EventListener class which associates a set of additional parameters with the listener. "
        },
        {
            "name": "EventObject",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/EventObject.html",
            "description": "The root class from which all event state objects shall be derived. "
        },
        {
            "name": "EventQueue",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/EventQueue.html",
            "description": "Manager of incoming debugger events for a target VM. "
        },
        {
            "name": "EventQueue",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/EventQueue.html",
            "description": "EventQueue is a platform-independent class that queues events, both from the underlying peer classes and from trusted application classes. "
        },
        {
            "name": "EventQueueMonitor",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html",
            "description": "The EventQueueMonitor class provides key core functionality for Assistive Technologies (and other system-level technologies that need some of the same things that Assistive Technology needs). "
        },
        {
            "name": "EventReaderDelegate",
            "package": "javax.xml.stream.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/util/EventReaderDelegate.html",
            "description": "This is the base class for deriving an XMLEventReader filter. "
        },
        {
            "name": "EventRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/EventRequest.html",
            "description": "Represents a request for notification of an event. "
        },
        {
            "name": "EventRequestManager",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/EventRequestManager.html",
            "description": "Manages the creation and deletion of EventRequest s. "
        },
        {
            "name": "EventSet",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/EventSet.html",
            "description": "Several Event objects may be created at a given time by the target VirtualMachine . "
        },
        {
            "name": "EventSetDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/EventSetDescriptor.html",
            "description": "An EventSetDescriptor describes a group of events that a given Java bean fires. "
        },
        {
            "name": "EventSettings",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/EventSettings.html",
            "description": "Convenience class for applying event settings to a recording. "
        },
        {
            "name": "EventStream",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html",
            "description": "Represents a stream of events. "
        },
        {
            "name": "EventTarget",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/EventTarget.html",
            "description": "The EventTarget interface is implemented by all Nodes in an implementation which supports the DOM Event Model. "
        },
        {
            "name": "EventType",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/EventType.html",
            "description": "Describes an event, its fields, settings and annotations. "
        },
        {
            "name": "EventTypeInfo",
            "package": "jdk.management.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management.jfr/jdk/management/jfr/EventTypeInfo.html",
            "description": "Management representation of an EventType . "
        },
        {
            "name": "ExcC14NParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/ExcC14NParameterSpec.html",
            "description": "Parameters for the W3C Recommendation: Exclusive XML Canonicalization (C14N) algorithm . "
        },
        {
            "name": "Exception",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Exception.html",
            "description": "The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch. "
        },
        {
            "name": "ExceptionEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ExceptionEvent.html",
            "description": "Notification of an exception in the target VM. "
        },
        {
            "name": "ExceptionInInitializerError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ExceptionInInitializerError.html",
            "description": "Signals that an unexpected exception has occurred in a static initializer. "
        },
        {
            "name": "ExceptionListener",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/ExceptionListener.html",
            "description": "An ExceptionListener is notified of internal exceptions. "
        },
        {
            "name": "ExceptionRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ExceptionRequest.html",
            "description": "Request for notification when an exception occurs in the target VM. "
        },
        {
            "name": "Exchanger",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Exchanger.html",
            "description": "A synchronization point at which threads can pair and swap elements within pairs. "
        },
        {
            "name": "Executable",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Executable.html",
            "description": "A shared superclass for the common functionality of Method and Constructor . "
        },
        {
            "name": "ExecutableElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ExecutableElement.html",
            "description": "Represents a method, constructor, or initializer (static or instance) of a class or interface, including annotation type elements. "
        },
        {
            "name": "ExecutableType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/ExecutableType.html",
            "description": "Represents the type of an executable. "
        },
        {
            "name": "ExecutionControl",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.html",
            "description": "This interface specifies the functionality that must provided to implement a pluggable JShell execution engine. "
        },
        {
            "name": "ExecutionControl.ClassBytecodes",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.ClassBytecodes.html",
            "description": "Bundles class name with class bytecodes. "
        },
        {
            "name": "ExecutionControl.ClassInstallException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.ClassInstallException.html",
            "description": "A class install (load or redefine) encountered a problem. "
        },
        {
            "name": "ExecutionControl.EngineTerminationException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.EngineTerminationException.html",
            "description": "Unbidden execution engine termination has occurred. "
        },
        {
            "name": "ExecutionControl.ExecutionControlException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.ExecutionControlException.html",
            "description": "The abstract base of all ExecutionControl exceptions. "
        },
        {
            "name": "ExecutionControl.InternalException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.InternalException.html",
            "description": "An internal problem has occurred. "
        },
        {
            "name": "ExecutionControl.NotImplementedException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.NotImplementedException.html",
            "description": "The command is not implemented. "
        },
        {
            "name": "ExecutionControl.ResolutionException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.ResolutionException.html",
            "description": "An exception indicating that a DeclarationSnippet with unresolved references has been encountered. "
        },
        {
            "name": "ExecutionControl.RunException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.RunException.html",
            "description": "The abstract base of of exceptions specific to running user code. "
        },
        {
            "name": "ExecutionControl.StoppedException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.StoppedException.html",
            "description": "An exception indicating that an ExecutionControl.invoke(java.lang.String, java.lang.String) (or theoretically a ExecutionControl.varValue(java.lang.String, java.lang.String) ) has been interrupted by a ExecutionControl.stop() . "
        },
        {
            "name": "ExecutionControl.UserException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControl.UserException.html",
            "description": "A 'normal' user exception occurred. "
        },
        {
            "name": "ExecutionControlProvider",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionControlProvider.html",
            "description": "The provider used by JShell to generate the execution engine needed to evaluate Snippets. "
        },
        {
            "name": "ExecutionEnv",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/ExecutionEnv.html",
            "description": "Functionality made available to a pluggable JShell execution engine. "
        },
        {
            "name": "ExecutionException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ExecutionException.html",
            "description": "Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. "
        },
        {
            "name": "Executor",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Executor.html",
            "description": "An object that executes submitted Runnable tasks. "
        },
        {
            "name": "ExecutorCompletionService",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html",
            "description": "A CompletionService that uses a supplied Executor to execute tasks. "
        },
        {
            "name": "Executors",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Executors.html",
            "description": "Factory and utility methods for Executor , ExecutorService , ScheduledExecutorService , ThreadFactory , and Callable classes defined in this package. "
        },
        {
            "name": "ExecutorService",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ExecutorService.html",
            "description": "An Executor that provides methods to manage termination and methods that can produce a Future for tracking progress of one or more asynchronous tasks. "
        },
        {
            "name": "ExemptionMechanism",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/ExemptionMechanism.html",
            "description": "This class provides the functionality of an exemption mechanism, examples of which are key recovery , key weakening , and key escrow . "
        },
        {
            "name": "ExemptionMechanismException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/ExemptionMechanismException.html",
            "description": "This is the generic ExemptionMechanism exception. "
        },
        {
            "name": "ExemptionMechanismSpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/ExemptionMechanismSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the ExemptionMechanism class. "
        },
        {
            "name": "ExifGPSTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/ExifGPSTagSet.html",
            "description": "A class representing the tags found in an Exif GPS Info IFD. "
        },
        {
            "name": "ExifInteroperabilityTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/ExifInteroperabilityTagSet.html",
            "description": "A class representing the tags found in an Exif Interoperability IFD. "
        },
        {
            "name": "ExifParentTIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/ExifParentTIFFTagSet.html",
            "description": "A class containing the TIFF tags used to reference the Exif and GPS IFDs. "
        },
        {
            "name": "ExifTIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/ExifTIFFTagSet.html",
            "description": "A class representing the tags found in an Exif IFD. "
        },
        {
            "name": "ExpandVetoException",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/ExpandVetoException.html",
            "description": "Exception used to stop an expand/collapse from happening. "
        },
        {
            "name": "Experimental",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Experimental.html",
            "description": "Annotation that specifies that an element is experimental and may change without notice. "
        },
        {
            "name": "ExportException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/ExportException.html",
            "description": "An ExportException is a RemoteException thrown if an attempt to export a remote object fails. "
        },
        {
            "name": "ExportsTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ExportsTree.html",
            "description": "A tree node for an 'exports' directive in a module declaration. "
        },
        {
            "name": "Expression",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Expression.html",
            "description": "An Expression object represents a primitive expression in which a single method is applied to a target and a set of arguments to return a result - as in \"a.getFoo()\" . "
        },
        {
            "name": "ExpressionSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/ExpressionSnippet.html",
            "description": "Snippet for an assignment or variable-value expression. "
        },
        {
            "name": "ExpressionStatementTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ExpressionStatementTree.html",
            "description": "A tree node for an expression statement. "
        },
        {
            "name": "ExpressionTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ExpressionTree.html",
            "description": "A tree node used as the base class for the different types of expressions. "
        },
        {
            "name": "ExtendedGSSContext",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/ExtendedGSSContext.html",
            "description": "The extended GSSContext interface for supporting additional functionalities not defined by org.ietf.jgss.GSSContext , such as querying context-specific attributes. "
        },
        {
            "name": "ExtendedGSSCredential",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/ExtendedGSSCredential.html",
            "description": "The extended GSSCredential interface for supporting additional functionalities not defined by org.ietf.jgss.GSSCredential . "
        },
        {
            "name": "ExtendedMapMode",
            "package": "jdk.nio.mapmode",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.nio.mapmode/jdk/nio/mapmode/ExtendedMapMode.html",
            "description": "JDK-specific map modes. "
        },
        {
            "name": "ExtendedRequest",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/ExtendedRequest.html",
            "description": "This interface represents an LDAPv3 extended operation request as defined in RFC 2251 . "
        },
        {
            "name": "ExtendedResponse",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/ExtendedResponse.html",
            "description": "This interface represents an LDAP extended operation response as defined in RFC 2251 . "
        },
        {
            "name": "ExtendedSocketOptions",
            "package": "jdk.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.net/jdk/net/ExtendedSocketOptions.html",
            "description": "Defines extended socket options, beyond those defined in StandardSocketOptions . "
        },
        {
            "name": "ExtendedSSLSession",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/ExtendedSSLSession.html",
            "description": "Extends the SSLSession interface to support additional session attributes. "
        },
        {
            "name": "Extension",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/Extension.html",
            "description": "This interface represents an X.509 extension. "
        },
        {
            "name": "Externalizable",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Externalizable.html",
            "description": "Only the identity of the class of an Externalizable instance is written in the serialization stream and it is the responsibility of the class to save and restore the contents of its instances. "
        },
        {
            "name": "FactoryConfigurationError",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/FactoryConfigurationError.html",
            "description": "Thrown when a problem with configuration with the Parser Factories exists. "
        },
        {
            "name": "FactoryConfigurationError",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/FactoryConfigurationError.html",
            "description": "An error class for reporting factory configuration errors. "
        },
        {
            "name": "FailedLoginException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/FailedLoginException.html",
            "description": "Signals that user authentication failed. "
        },
        {
            "name": "FailOverExecutionControlProvider",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/FailOverExecutionControlProvider.html",
            "description": "Tries other providers in sequence until one works. "
        },
        {
            "name": "FaxTIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/FaxTIFFTagSet.html",
            "description": "A class representing the extra tags found in a TIFF-F (RFC 2036) file. "
        },
        {
            "name": "FeatureDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/FeatureDescriptor.html",
            "description": "The FeatureDescriptor class is the common baseclass for PropertyDescriptor, EventSetDescriptor, and MethodDescriptor, etc. "
        },
        {
            "name": "Fidelity",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Fidelity.html",
            "description": "Class Fidelity is a printing attribute class, an enumeration, that indicates whether total fidelity to client supplied print request attributes is required. "
        },
        {
            "name": "Field",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Field.html",
            "description": "A class or instance variable in the target VM. "
        },
        {
            "name": "Field",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Field.html",
            "description": "A Field provides information about, and dynamic access to, a single field of a class or an interface. "
        },
        {
            "name": "FieldPosition",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/FieldPosition.html",
            "description": "FieldPosition is a simple class used by Format and its subclasses to identify fields in formatted output. "
        },
        {
            "name": "FieldView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/FieldView.html",
            "description": "Extends the multi-line plain text view to be suitable for a single-line editor view. "
        },
        {
            "name": "File",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/File.html",
            "description": "An abstract representation of file and directory pathnames. "
        },
        {
            "name": "FileAlreadyExistsException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html",
            "description": "Checked exception thrown when an attempt is made to create a file or directory and a file of that name already exists. "
        },
        {
            "name": "FileAttribute",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/FileAttribute.html",
            "description": "An object that encapsulates the value of a file attribute that can be set atomically when creating a new file or directory by invoking the createFile or createDirectory methods. "
        },
        {
            "name": "FileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/FileAttributeView.html",
            "description": "An attribute view that is a read-only or updatable view of non-opaque values associated with a file in a filesystem. "
        },
        {
            "name": "FileCacheImageInputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/FileCacheImageInputStream.html",
            "description": "An implementation of ImageInputStream that gets its input from a regular InputStream . "
        },
        {
            "name": "FileCacheImageOutputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/FileCacheImageOutputStream.html",
            "description": "An implementation of ImageOutputStream that writes its output to a regular OutputStream . "
        },
        {
            "name": "FileChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/FileChannel.html",
            "description": "A channel for reading, writing, mapping, and manipulating a file. "
        },
        {
            "name": "FileChannel.MapMode",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/FileChannel.MapMode.html",
            "description": "A file-mapping mode. "
        },
        {
            "name": "FileChooserUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/FileChooserUI.html",
            "description": "Pluggable look and feel interface for JFileChooser . "
        },
        {
            "name": "FileDescriptor",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileDescriptor.html",
            "description": "Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes. "
        },
        {
            "name": "FileDialog",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/FileDialog.html",
            "description": "The FileDialog class displays a dialog window from which the user can select a file. "
        },
        {
            "name": "FileFilter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileFilter.html",
            "description": "A filter for abstract pathnames. "
        },
        {
            "name": "FileFilter",
            "package": "javax.swing.filechooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/filechooser/FileFilter.html",
            "description": "FileFilter is an abstract class used by JFileChooser for filtering the set of files shown to the user. "
        },
        {
            "name": "FileHandler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/FileHandler.html",
            "description": "Simple file logging Handler . "
        },
        {
            "name": "FileImageInputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/FileImageInputStream.html",
            "description": "An implementation of ImageInputStream that gets its input from a File or RandomAccessFile . "
        },
        {
            "name": "FileImageOutputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/FileImageOutputStream.html",
            "description": "An implementation of ImageOutputStream that writes its output directly to a File or RandomAccessFile . "
        },
        {
            "name": "FileInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileInputStream.html",
            "description": "A FileInputStream obtains input bytes from a file in a file system. "
        },
        {
            "name": "FileLock",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/FileLock.html",
            "description": "A token representing a lock on a region of a file. "
        },
        {
            "name": "FileLockInterruptionException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/FileLockInterruptionException.html",
            "description": "Checked exception received by a thread when another thread interrupts it while it is waiting to acquire a file lock. "
        },
        {
            "name": "FileNameExtensionFilter",
            "package": "javax.swing.filechooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/filechooser/FileNameExtensionFilter.html",
            "description": "An implementation of FileFilter that filters using a specified set of extensions. "
        },
        {
            "name": "FilenameFilter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilenameFilter.html",
            "description": "Instances of classes that implement this interface are used to filter filenames. "
        },
        {
            "name": "FileNameMap",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/FileNameMap.html",
            "description": "A simple interface which provides a mechanism to map between a file name and a MIME type string. "
        },
        {
            "name": "FileNotFoundException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileNotFoundException.html",
            "description": "Signals that an attempt to open the file denoted by a specified pathname has failed. "
        },
        {
            "name": "FileObject",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/FileObject.html",
            "description": "File abstraction for tools. "
        },
        {
            "name": "FileOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileOutputStream.html",
            "description": "A file output stream is an output stream for writing data to a File or to a FileDescriptor . "
        },
        {
            "name": "FileOwnerAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/FileOwnerAttributeView.html",
            "description": "A file attribute view that supports reading or updating the owner of a file. "
        },
        {
            "name": "FilePermission",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilePermission.html",
            "description": "This class represents access to a file or directory. "
        },
        {
            "name": "Filer",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Filer.html",
            "description": "This interface supports the creation of new files by an annotation processor. "
        },
        {
            "name": "FileReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileReader.html",
            "description": "Reads text from character files using a default buffer size. "
        },
        {
            "name": "FilerException",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/FilerException.html",
            "description": "Indicates a Filer detected an attempt to open a file that would violate the guarantees provided by the Filer . "
        },
        {
            "name": "Files",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/Files.html",
            "description": "This class consists exclusively of static methods that operate on files, directories, or other types of files. "
        },
        {
            "name": "FilesEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/FilesEvent.html",
            "description": "Auxiliary event containing a list of files. "
        },
        {
            "name": "FileStore",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileStore.html",
            "description": "Storage for files. "
        },
        {
            "name": "FileStoreAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/FileStoreAttributeView.html",
            "description": "An attribute view that is a read-only or updatable view of the attributes of a FileStore . "
        },
        {
            "name": "FileSystem",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystem.html",
            "description": "Provides an interface to a file system and is the factory for objects to access files and other objects in the file system. "
        },
        {
            "name": "FileSystemAlreadyExistsException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystemAlreadyExistsException.html",
            "description": "Runtime exception thrown when an attempt is made to create a file system that already exists. "
        },
        {
            "name": "FileSystemException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystemException.html",
            "description": "Thrown when a file system operation fails on one or two files. "
        },
        {
            "name": "FileSystemLoopException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystemLoopException.html",
            "description": "Checked exception thrown when a file system loop, or cycle, is encountered. "
        },
        {
            "name": "FileSystemNotFoundException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystemNotFoundException.html",
            "description": "Runtime exception thrown when a file system cannot be found. "
        },
        {
            "name": "FileSystemProvider",
            "package": "java.nio.file.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/spi/FileSystemProvider.html",
            "description": "Service-provider class for file systems. "
        },
        {
            "name": "FileSystems",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileSystems.html",
            "description": "Factory methods for file systems. "
        },
        {
            "name": "FileSystemView",
            "package": "javax.swing.filechooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/filechooser/FileSystemView.html",
            "description": "FileSystemView is JFileChooser's gateway to the file system. "
        },
        {
            "name": "FileTime",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/FileTime.html",
            "description": "Represents the value of a file's time stamp attribute. "
        },
        {
            "name": "FileTypeDetector",
            "package": "java.nio.file.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/spi/FileTypeDetector.html",
            "description": "A file type detector for probing a file to guess its file type. "
        },
        {
            "name": "FileView",
            "package": "javax.swing.filechooser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/filechooser/FileView.html",
            "description": "FileView defines an abstract class that can be implemented to provide the filechooser with UI information for a File . "
        },
        {
            "name": "FileVisitOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileVisitOption.html",
            "description": "Defines the file tree traversal options. "
        },
        {
            "name": "FileVisitor",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileVisitor.html",
            "description": "A visitor of files. "
        },
        {
            "name": "FileVisitResult",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/FileVisitResult.html",
            "description": "The result type of a FileVisitor . "
        },
        {
            "name": "FileWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FileWriter.html",
            "description": "Writes text to character files using a default buffer size. "
        },
        {
            "name": "Filter",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Filter.html",
            "description": "A filter used to pre- and post-process incoming requests. "
        },
        {
            "name": "Filter",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/Filter.html",
            "description": "A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels. "
        },
        {
            "name": "Filter.Chain",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Filter.Chain.html",
            "description": "a chain of filters associated with a HttpServer. "
        },
        {
            "name": "FilteredImageSource",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/FilteredImageSource.html",
            "description": "This class is an implementation of the ImageProducer interface which takes an existing image and a filter object and uses them to produce image data for a new filtered version of the original image. "
        },
        {
            "name": "FilteredRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/FilteredRowSet.html",
            "description": "The standard interface that all standard implementations of FilteredRowSet must implement. "
        },
        {
            "name": "FilterInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilterInputStream.html",
            "description": "A FilterInputStream contains some other input stream, which it uses as its  basic source of data, possibly transforming the data along the way or providing  additional functionality. "
        },
        {
            "name": "FilterOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilterOutputStream.html",
            "description": "This class is the superclass of all classes that filter output streams. "
        },
        {
            "name": "FilterReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilterReader.html",
            "description": "Abstract class for reading filtered character streams. "
        },
        {
            "name": "FilterWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/FilterWriter.html",
            "description": "Abstract class for writing filtered character streams. "
        },
        {
            "name": "FindException",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/FindException.html",
            "description": "Thrown by a ModuleFinder when an error occurs finding a module. "
        },
        {
            "name": "Finishings",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Finishings.html",
            "description": "Class Finishings is a printing attribute class, an enumeration, that identifies whether the printer applies a finishing operation of some kind of binding to each copy of each printed document in the job. "
        },
        {
            "name": "FixedHeightLayoutCache",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/FixedHeightLayoutCache.html",
            "description": "NOTE: This will become more open in a future release. "
        },
        {
            "name": "FlatteningPathIterator",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/FlatteningPathIterator.html",
            "description": "The FlatteningPathIterator class returns a flattened view of another PathIterator object. "
        },
        {
            "name": "FlavorEvent",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/FlavorEvent.html",
            "description": "FlavorEvent is used to notify interested parties that available DataFlavor s have changed in the Clipboard (the event source). "
        },
        {
            "name": "FlavorException",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/FlavorException.html",
            "description": "Interface FlavorException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a doc flavor or flavors (class DocFlavor ). "
        },
        {
            "name": "FlavorListener",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/FlavorListener.html",
            "description": "Defines an object which listens for FlavorEvent s. "
        },
        {
            "name": "FlavorMap",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/FlavorMap.html",
            "description": "A two-way Map between \"natives\" (Strings), which correspond to platform-specific data formats, and \"flavors\" (DataFlavors), which correspond to platform-independent MIME types. "
        },
        {
            "name": "FlavorTable",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/FlavorTable.html",
            "description": "A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map. "
        },
        {
            "name": "FlightRecorder",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/FlightRecorder.html",
            "description": "Class for accessing, controlling, and managing Flight Recorder. "
        },
        {
            "name": "FlightRecorderListener",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/FlightRecorderListener.html",
            "description": "Callback interface to monitor Flight Recorder's life cycle. "
        },
        {
            "name": "FlightRecorderMXBean",
            "package": "jdk.management.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management.jfr/jdk/management/jfr/FlightRecorderMXBean.html",
            "description": "Management interface for controlling Flight Recorder. "
        },
        {
            "name": "FlightRecorderPermission",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/FlightRecorderPermission.html",
            "description": "Permission for controlling access to Flight Recorder. "
        },
        {
            "name": "Float",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Float.html",
            "description": "The Float class wraps a value of primitive type float in an object. "
        },
        {
            "name": "FloatBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/FloatBuffer.html",
            "description": "A float buffer. "
        },
        {
            "name": "FloatControl",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/FloatControl.html",
            "description": "A FloatControl object provides control over a range of floating-point values. "
        },
        {
            "name": "FloatControl.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/FloatControl.Type.html",
            "description": "An instance of the FloatControl.Type inner class identifies one kind of float control. "
        },
        {
            "name": "FloatType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/FloatType.html",
            "description": "The type of all primitive float values accessed in the target VM. "
        },
        {
            "name": "FloatValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/FloatValue.html",
            "description": "Provides access to a primitive float value in the target VM. "
        },
        {
            "name": "Flow",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Flow.html",
            "description": "Interrelated interfaces and static methods for establishing flow-controlled components in which Publishers produce items consumed by one or more Subscribers , each managed by a Subscription . "
        },
        {
            "name": "Flow.Processor",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Flow.Processor.html",
            "description": "A component that acts as both a Subscriber and Publisher. "
        },
        {
            "name": "Flow.Publisher",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Flow.Publisher.html",
            "description": "A producer of items (and related control messages) received by Subscribers. "
        },
        {
            "name": "Flow.Subscriber",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html",
            "description": "A receiver of messages. "
        },
        {
            "name": "Flow.Subscription",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Flow.Subscription.html",
            "description": "Message control linking a Flow.Publisher and Flow.Subscriber . "
        },
        {
            "name": "FlowLayout",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/FlowLayout.html",
            "description": "A flow layout arranges components in a directional flow, much like lines of text in a paragraph. "
        },
        {
            "name": "FlowView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/FlowView.html",
            "description": "A View that tries to flow it's children into some partially constrained space. "
        },
        {
            "name": "FlowView.FlowStrategy",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/FlowView.FlowStrategy.html",
            "description": "Strategy for maintaining the physical form of the flow. "
        },
        {
            "name": "Flushable",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Flushable.html",
            "description": "A Flushable is a destination of data that can be flushed. "
        },
        {
            "name": "FocusAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/FocusAdapter.html",
            "description": "An abstract adapter class for receiving keyboard focus events. "
        },
        {
            "name": "FocusEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/FocusEvent.html",
            "description": "A low-level event which indicates that a Component has gained or lost the input focus. "
        },
        {
            "name": "FocusEvent.Cause",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/FocusEvent.Cause.html",
            "description": "This enum represents the cause of a FocusEvent - the reason why it occurred. "
        },
        {
            "name": "FocusListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/FocusListener.html",
            "description": "The listener interface for receiving keyboard focus events on a component. "
        },
        {
            "name": "FocusManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/FocusManager.html",
            "description": "This class has been obsoleted by the 1.4 focus APIs. "
        },
        {
            "name": "FocusTraversalPolicy",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html",
            "description": "A FocusTraversalPolicy defines the order in which Components with a particular focus cycle root are traversed. "
        },
        {
            "name": "Font",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Font.html",
            "description": "The Font class represents fonts, which are used to render text in a visible way. "
        },
        {
            "name": "FontFormatException",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/FontFormatException.html",
            "description": "Thrown by method createFont in the Font class to indicate that the specified font is bad. "
        },
        {
            "name": "FontMetrics",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/FontMetrics.html",
            "description": "The FontMetrics class defines a font metrics object, which encapsulates information about the rendering of a particular font on a particular screen. "
        },
        {
            "name": "FontRenderContext",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/FontRenderContext.html",
            "description": "The FontRenderContext class is a container for the   information needed to correctly measure text. "
        },
        {
            "name": "FontUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/FontUIResource.html",
            "description": "A subclass of java.awt.Font that implements UIResource. "
        },
        {
            "name": "ForkJoinPool",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ForkJoinPool.html",
            "description": "An ExecutorService for running ForkJoinTask s. "
        },
        {
            "name": "ForkJoinPool.ForkJoinWorkerThreadFactory",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html",
            "description": "Factory for creating new ForkJoinWorkerThread s. "
        },
        {
            "name": "ForkJoinPool.ManagedBlocker",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ForkJoinPool.ManagedBlocker.html",
            "description": "Interface for extending managed parallelism for tasks running in ForkJoinPool s. "
        },
        {
            "name": "ForkJoinTask",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ForkJoinTask.html",
            "description": "Abstract base class for tasks that run within a ForkJoinPool . "
        },
        {
            "name": "ForkJoinWorkerThread",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ForkJoinWorkerThread.html",
            "description": "A thread managed by a ForkJoinPool , which executes ForkJoinTask s. "
        },
        {
            "name": "ForLoopTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ForLoopTree.html",
            "description": "A tree node for a basic for loop statement. "
        },
        {
            "name": "Format",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Format.html",
            "description": "Format is an abstract base class for formatting locale-sensitive information such as dates, messages, and numbers. "
        },
        {
            "name": "Format.Field",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Format.Field.html",
            "description": "Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from Format.formatToCharacterIterator and as field identifiers in FieldPosition . "
        },
        {
            "name": "FormatConversionProvider",
            "package": "javax.sound.sampled.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/spi/FormatConversionProvider.html",
            "description": "A format conversion provider provides format conversion services from one or more input formats to one or more output formats. "
        },
        {
            "name": "FormatFlagsConversionMismatchException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/FormatFlagsConversionMismatchException.html",
            "description": "Unchecked exception thrown when a conversion and flag are incompatible. "
        },
        {
            "name": "FormatStyle",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/FormatStyle.html",
            "description": "Enumeration of the style of a localized date, time or date-time formatter. "
        },
        {
            "name": "Formattable",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Formattable.html",
            "description": "The Formattable interface must be implemented by any class that needs to perform custom formatting using the 's' conversion specifier of Formatter . "
        },
        {
            "name": "FormattableFlags",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/FormattableFlags.html",
            "description": "FormattableFlags are passed to the Formattable.formatTo() method and modify the output format for Formattables . "
        },
        {
            "name": "Formatter",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Formatter.html",
            "description": "An interpreter for printf-style format strings. "
        },
        {
            "name": "Formatter",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/Formatter.html",
            "description": "A Formatter provides support for formatting LogRecords. "
        },
        {
            "name": "Formatter.BigDecimalLayoutForm",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Formatter.BigDecimalLayoutForm.html",
            "description": "Enum for BigDecimal formatting. "
        },
        {
            "name": "FormatterClosedException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/FormatterClosedException.html",
            "description": "Unchecked exception thrown when the formatter has been closed. "
        },
        {
            "name": "FormSubmitEvent",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/FormSubmitEvent.html",
            "description": "FormSubmitEvent is used to notify interested parties that a form was submitted. "
        },
        {
            "name": "FormSubmitEvent.MethodType",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/FormSubmitEvent.MethodType.html",
            "description": "Represents an HTML form method type. "
        },
        {
            "name": "FormView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/FormView.html",
            "description": "Component decorator that implements the view interface for form elements, <input>, <textarea>, and <select>. "
        },
        {
            "name": "ForwardingFileObject",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/ForwardingFileObject.html",
            "description": "Forwards calls to a given file object. "
        },
        {
            "name": "ForwardingJavaFileManager",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/ForwardingJavaFileManager.html",
            "description": "Forwards calls to a given file manager. "
        },
        {
            "name": "ForwardingJavaFileObject",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/ForwardingJavaFileObject.html",
            "description": "Forwards calls to a given file object. "
        },
        {
            "name": "Frame",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Frame.html",
            "description": "A Frame is a top-level window with a title and a border. "
        },
        {
            "name": "Frequency",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Frequency.html",
            "description": "Event field annotation, specifies that the value is a frequency, measured in Hz. "
        },
        {
            "name": "Function",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/Function.html",
            "description": "Represents a function that accepts one argument and produces a result. "
        },
        {
            "name": "FunctionalInterface",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/FunctionalInterface.html",
            "description": "An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification. "
        },
        {
            "name": "Future",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Future.html",
            "description": "A Future represents the result of an asynchronous computation. "
        },
        {
            "name": "FutureTask",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/FutureTask.html",
            "description": "A cancellable asynchronous computation. "
        },
        {
            "name": "GapContent",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/GapContent.html",
            "description": "An implementation of the AbstractDocument.Content interface implemented using a gapped buffer similar to that used by emacs. "
        },
        {
            "name": "GarbageCollectionNotificationInfo",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html",
            "description": "The information about a garbage collection "
        },
        {
            "name": "GarbageCollectorMXBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/GarbageCollectorMXBean.html",
            "description": "Platform-specific management interface for a garbage collector which performs collections in cycles. "
        },
        {
            "name": "GarbageCollectorMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/GarbageCollectorMXBean.html",
            "description": "The management interface for the garbage collection of the Java virtual machine. "
        },
        {
            "name": "GatheringByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/GatheringByteChannel.html",
            "description": "A channel that can write bytes from a sequence of buffers. "
        },
        {
            "name": "GaugeMonitor",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/GaugeMonitor.html",
            "description": "Defines a monitor MBean designed to observe the values of a gauge attribute. "
        },
        {
            "name": "GaugeMonitorMBean",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/GaugeMonitorMBean.html",
            "description": "Exposes the remote management interface of the gauge monitor MBean. "
        },
        {
            "name": "GcInfo",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/GcInfo.html",
            "description": "Garbage collection information. "
        },
        {
            "name": "GCMParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/GCMParameterSpec.html",
            "description": "Specifies the set of parameters required by a Cipher using the Galois/Counter Mode (GCM) mode. "
        },
        {
            "name": "GeneralPath",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/GeneralPath.html",
            "description": "The GeneralPath class represents a geometric path constructed from straight lines, and quadratic and cubic (B\u00e9zier) curves. "
        },
        {
            "name": "GeneralSecurityException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/GeneralSecurityException.html",
            "description": "The GeneralSecurityException class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it. "
        },
        {
            "name": "Generated",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Generated.html",
            "description": "The Generated annotation is used to mark source code that has been generated. "
        },
        {
            "name": "GenericArrayType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/GenericArrayType.html",
            "description": "GenericArrayType represents an array type whose component type is either a parameterized type or a type variable. "
        },
        {
            "name": "GenericDeclaration",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/GenericDeclaration.html",
            "description": "A common interface for all entities that declare type variables. "
        },
        {
            "name": "GenericSignatureFormatError",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html",
            "description": "Thrown when a syntactically malformed signature attribute is encountered by a reflective method that needs to interpret the generic signature information for a type, method or constructor. "
        },
        {
            "name": "GeoTIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/GeoTIFFTagSet.html",
            "description": "A class representing the tags found in a GeoTIFF IFD. "
        },
        {
            "name": "GlyphJustificationInfo",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/GlyphJustificationInfo.html",
            "description": "The GlyphJustificationInfo class represents information about the justification properties of a glyph. "
        },
        {
            "name": "GlyphMetrics",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/GlyphMetrics.html",
            "description": "The GlyphMetrics class represents information for a single glyph. "
        },
        {
            "name": "GlyphVector",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/GlyphVector.html",
            "description": "A GlyphVector object is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space which corresponds to the device on which the GlyphVector is ultimately displayed. "
        },
        {
            "name": "GlyphView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/GlyphView.html",
            "description": "A GlyphView is a styled chunk of text that represents a view mapped over an element in the text model. "
        },
        {
            "name": "GlyphView.GlyphPainter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/GlyphView.GlyphPainter.html",
            "description": "A class to perform rendering of the glyphs. "
        },
        {
            "name": "GradientPaint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GradientPaint.html",
            "description": "The GradientPaint class provides a way to fill a Shape with a linear color gradient pattern. "
        },
        {
            "name": "GraphicAttribute",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/GraphicAttribute.html",
            "description": "This class is used with the CHAR_REPLACEMENT attribute. "
        },
        {
            "name": "Graphics",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Graphics.html",
            "description": "The Graphics class is the abstract base class for all graphics contexts that allow an application to draw onto components that are realized on various devices, as well as onto off-screen images. "
        },
        {
            "name": "Graphics2D",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Graphics2D.html",
            "description": "This Graphics2D class extends the Graphics class to provide more sophisticated control over geometry, coordinate transformations, color management, and text layout. "
        },
        {
            "name": "GraphicsConfigTemplate",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GraphicsConfigTemplate.html",
            "description": "The GraphicsConfigTemplate class is used to obtain a valid GraphicsConfiguration . "
        },
        {
            "name": "GraphicsConfiguration",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GraphicsConfiguration.html",
            "description": "The GraphicsConfiguration class describes the characteristics of a graphics destination such as a printer or monitor. "
        },
        {
            "name": "GraphicsDevice",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GraphicsDevice.html",
            "description": "The GraphicsDevice class describes the graphics devices that might be available in a particular graphics environment. "
        },
        {
            "name": "GraphicsDevice.WindowTranslucency",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html",
            "description": "Kinds of translucency supported by the underlying system. "
        },
        {
            "name": "GraphicsEnvironment",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GraphicsEnvironment.html",
            "description": "The GraphicsEnvironment class describes the collection of GraphicsDevice objects and Font objects available to a Java(tm) application on a particular platform. "
        },
        {
            "name": "GrayFilter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/GrayFilter.html",
            "description": "An image filter that \"disables\" an image by turning it into a grayscale image, and brightening the pixels in the image. "
        },
        {
            "name": "GregorianCalendar",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/GregorianCalendar.html",
            "description": "GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world. "
        },
        {
            "name": "GridBagConstraints",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GridBagConstraints.html",
            "description": "The GridBagConstraints class specifies constraints for components that are laid out using the GridBagLayout class. "
        },
        {
            "name": "GridBagLayout",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GridBagLayout.html",
            "description": "The GridBagLayout class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size. "
        },
        {
            "name": "GridBagLayoutInfo",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GridBagLayoutInfo.html",
            "description": "The GridBagLayoutInfo is an utility class for GridBagLayout layout manager. "
        },
        {
            "name": "GridLayout",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/GridLayout.html",
            "description": "The GridLayout class is a layout manager that lays out a container's components in a rectangular grid. "
        },
        {
            "name": "GroupLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/GroupLayout.html",
            "description": "GroupLayout is a LayoutManager that hierarchically groups components in order to position them in a Container . "
        },
        {
            "name": "GroupLayout",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/GroupLayout.html",
            "description": "A group layout is used to combine together multiple member layouts . "
        },
        {
            "name": "GroupLayout.Alignment",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/GroupLayout.Alignment.html",
            "description": "Enumeration of the possible ways ParallelGroup can align its children. "
        },
        {
            "name": "GroupPrincipal",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/GroupPrincipal.html",
            "description": "A UserPrincipal representing a group identity , used to determine access rights to objects in a file system. "
        },
        {
            "name": "GSSContext",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/GSSContext.html",
            "description": "This interface encapsulates the GSS-API security context and provides the security services that are available over the context. "
        },
        {
            "name": "GSSCredential",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/GSSCredential.html",
            "description": "This interface encapsulates the GSS-API credentials for an entity. "
        },
        {
            "name": "GSSException",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/GSSException.html",
            "description": "This exception is thrown whenever a GSS-API error occurs, including any mechanism specific error. "
        },
        {
            "name": "GSSManager",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/GSSManager.html",
            "description": "This class serves as a factory for other important GSS-API classes and also provides information about the mechanisms that are supported. "
        },
        {
            "name": "GSSName",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/GSSName.html",
            "description": "This interface encapsulates a single GSS-API principal entity. "
        },
        {
            "name": "GSSUtil",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/GSSUtil.html",
            "description": "GSS-API Utilities for using in conjunction with Sun Microsystem's implementation of Java GSS-API. "
        },
        {
            "name": "Guard",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Guard.html",
            "description": "This interface represents a guard, which is an object that is used to protect access to another object. "
        },
        {
            "name": "GuardedInvocation",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardedInvocation.html",
            "description": "Represents a conditionally valid method handle. "
        },
        {
            "name": "GuardedInvocationTransformer",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardedInvocationTransformer.html",
            "description": "Interface for objects that are used to transform one guarded invocation into another one. "
        },
        {
            "name": "GuardedObject",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/GuardedObject.html",
            "description": "A GuardedObject is an object that is used to protect access to another object. "
        },
        {
            "name": "GuardingDynamicLinker",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinker.html",
            "description": "The base interface for language-specific dynamic linkers. "
        },
        {
            "name": "GuardingDynamicLinkerExporter",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinkerExporter.html",
            "description": "A class acting as a supplier of guarding dynamic linkers that can be automatically loaded by other language runtimes. "
        },
        {
            "name": "GuardingTypeConverterFactory",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingTypeConverterFactory.html",
            "description": "Optional interface that can be implemented by GuardingDynamicLinker implementations to provide language-specific type conversion capabilities. "
        },
        {
            "name": "Guards",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/Guards.html",
            "description": "Utility methods for creating typical guards for MethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle) and for adjusting their method types. "
        },
        {
            "name": "GUIInitializedListener",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/GUIInitializedListener.html",
            "description": "The GUIInitializedListener interface is used by the EventQueueMonitor class to notify an interested party when the GUI subsystem has been initialized. "
        },
        {
            "name": "GZIPInputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/GZIPInputStream.html",
            "description": "This class implements a stream filter for reading compressed data in the GZIP file format. "
        },
        {
            "name": "GZIPOutputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/GZIPOutputStream.html",
            "description": "This class implements a stream filter for writing compressed data in the GZIP file format. "
        },
        {
            "name": "Handler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/Handler.html",
            "description": "A Handler object takes log messages from a Logger and exports them. "
        },
        {
            "name": "HandlerBase",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/HandlerBase.html",
            "description": "This class works with the deprecated DocumentHandler interface. "
        },
        {
            "name": "HandlerResult",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/HandlerResult.html",
            "description": "Defines notification handler results. "
        },
        {
            "name": "HandshakeCompletedEvent",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/HandshakeCompletedEvent.html",
            "description": "This event indicates that an SSL handshake completed on a given SSL connection. "
        },
        {
            "name": "HandshakeCompletedListener",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/HandshakeCompletedListener.html",
            "description": "This interface is implemented by any class which wants to receive notifications about the completion of an SSL protocol handshake on a given SSL connection. "
        },
        {
            "name": "HasControls",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/HasControls.html",
            "description": "This interface is for returning controls with objects returned in NamingEnumerations. "
        },
        {
            "name": "HashAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/HashAttributeSet.html",
            "description": "Class HashAttributeSet provides an AttributeSet implementation with characteristics of a hash map. "
        },
        {
            "name": "HashDocAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/HashDocAttributeSet.html",
            "description": "Class HashDocAttributeSet provides an attribute set which inherits its implementation from class HashAttributeSet and enforces the semantic restrictions of interface DocAttributeSet . "
        },
        {
            "name": "HashMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/HashMap.html",
            "description": "Hash table based implementation of the Map interface. "
        },
        {
            "name": "HashPrintJobAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/HashPrintJobAttributeSet.html",
            "description": "Class HashPrintJobAttributeSet provides an attribute set which inherits its implementation from class HashAttributeSet and enforces the semantic restrictions of interface PrintJobAttributeSet . "
        },
        {
            "name": "HashPrintRequestAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/HashPrintRequestAttributeSet.html",
            "description": "Class HashPrintRequestAttributeSet inherits its implementation from class HashAttributeSet and enforces the semantic restrictions of interface PrintRequestAttributeSet . "
        },
        {
            "name": "HashPrintServiceAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/HashPrintServiceAttributeSet.html",
            "description": "Class HashPrintServiceAttributeSet provides an attribute set which inherits its implementation from class HashAttributeSet and enforces the semantic restrictions of interface PrintServiceAttributeSet . "
        },
        {
            "name": "HashSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/HashSet.html",
            "description": "This class implements the Set interface, backed by a hash table (actually a HashMap instance). "
        },
        {
            "name": "Hashtable",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Hashtable.html",
            "description": "This class implements a hash table, which maps keys to values. "
        },
        {
            "name": "Headers",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/Headers.html",
            "description": "HTTP request and response headers are represented by this class which implements the interface Map < String , List < String >>. "
        },
        {
            "name": "HeadlessException",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/HeadlessException.html",
            "description": "Thrown when code that is dependent on a keyboard, display, or mouse is called in an environment that does not support a keyboard, display, or mouse. "
        },
        {
            "name": "HiddenTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/HiddenTree.html",
            "description": "A tree node for an @hidden block tag. "
        },
        {
            "name": "HierarchyBoundsAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/HierarchyBoundsAdapter.html",
            "description": "An abstract adapter class for receiving ancestor moved and resized events. "
        },
        {
            "name": "HierarchyBoundsListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/HierarchyBoundsListener.html",
            "description": "The listener interface for receiving ancestor moved and resized events. "
        },
        {
            "name": "HierarchyEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/HierarchyEvent.html",
            "description": "An event which indicates a change to the Component hierarchy to which Component belongs. "
        },
        {
            "name": "HierarchyListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/HierarchyListener.html",
            "description": "The listener interface for receiving hierarchy changed events. "
        },
        {
            "name": "Highlighter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Highlighter.html",
            "description": "An interface for an object that allows one to mark up the background with colored areas. "
        },
        {
            "name": "Highlighter.Highlight",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Highlighter.Highlight.html",
            "description": "A highlight. "
        },
        {
            "name": "Highlighter.HighlightPainter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Highlighter.HighlightPainter.html",
            "description": "Highlight renderer. "
        },
        {
            "name": "HijrahChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/HijrahChronology.html",
            "description": "The Hijrah calendar is a lunar calendar supporting Islamic calendars. "
        },
        {
            "name": "HijrahDate",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/HijrahDate.html",
            "description": "A date in the Hijrah calendar system. "
        },
        {
            "name": "HijrahEra",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/HijrahEra.html",
            "description": "An era in the Hijrah calendar system. "
        },
        {
            "name": "HMACParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/HMACParameterSpec.html",
            "description": "Parameters for the XML Signature HMAC Algorithm . "
        },
        {
            "name": "HostnameVerifier",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/HostnameVerifier.html",
            "description": "This class is the base interface for hostname verification. "
        },
        {
            "name": "HotSpotDiagnosticMXBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/HotSpotDiagnosticMXBean.html",
            "description": "Diagnostic management interface for the HotSpot Virtual Machine. "
        },
        {
            "name": "HTML",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTML.html",
            "description": "Constants used in the HTMLDocument . "
        },
        {
            "name": "HTML.Attribute",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html",
            "description": "Typesafe enumeration representing an HTML attribute. "
        },
        {
            "name": "HTML.Tag",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html",
            "description": "Typesafe enumeration for an HTML tag. "
        },
        {
            "name": "HTML.UnknownTag",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTML.UnknownTag.html",
            "description": "Class represents unknown HTML tag. "
        },
        {
            "name": "HTMLAnchorElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLAnchorElement.html",
            "description": "The anchor element. "
        },
        {
            "name": "HTMLAppletElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLAppletElement.html",
            "description": "An embedded Java applet. "
        },
        {
            "name": "HTMLAreaElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLAreaElement.html",
            "description": "Client-side image map area definition. "
        },
        {
            "name": "HTMLBaseElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLBaseElement.html",
            "description": "Document base URI. "
        },
        {
            "name": "HTMLBaseFontElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLBaseFontElement.html",
            "description": "Base font. "
        },
        {
            "name": "HTMLBodyElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.html",
            "description": "The HTML document body. "
        },
        {
            "name": "HTMLBRElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLBRElement.html",
            "description": "Force a line break. "
        },
        {
            "name": "HTMLButtonElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLButtonElement.html",
            "description": "Push button. "
        },
        {
            "name": "HTMLCollection",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLCollection.html",
            "description": "An HTMLCollection is a list of nodes. "
        },
        {
            "name": "HTMLDirectoryElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLDirectoryElement.html",
            "description": "Directory list. "
        },
        {
            "name": "HTMLDivElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLDivElement.html",
            "description": "Generic block container. "
        },
        {
            "name": "HTMLDListElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLDListElement.html",
            "description": "Definition list. "
        },
        {
            "name": "HTMLDocument",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLDocument.html",
            "description": "A document that models HTML. "
        },
        {
            "name": "HTMLDocument",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLDocument.html",
            "description": "An HTMLDocument is the root of the HTML hierarchy and holds the entire content. "
        },
        {
            "name": "HTMLDocument.Iterator",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLDocument.Iterator.html",
            "description": "An iterator to iterate over a particular type of tag. "
        },
        {
            "name": "HTMLDOMImplementation",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLDOMImplementation.html",
            "description": "The HTMLDOMImplementation interface extends the DOMImplementation interface with a method for creating an HTML document instance. "
        },
        {
            "name": "HTMLEditorKit",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.html",
            "description": "The Swing JEditorPane text component supports different kinds of content via a plug-in mechanism called an EditorKit. "
        },
        {
            "name": "HTMLEditorKit.HTMLFactory",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.HTMLFactory.html",
            "description": "A factory to build views for HTML. "
        },
        {
            "name": "HTMLEditorKit.HTMLTextAction",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.HTMLTextAction.html",
            "description": "An abstract Action providing some convenience methods that may be useful in inserting HTML into an existing document. "
        },
        {
            "name": "HTMLEditorKit.InsertHTMLTextAction",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.InsertHTMLTextAction.html",
            "description": "InsertHTMLTextAction can be used to insert an arbitrary string of HTML into an existing HTML document. "
        },
        {
            "name": "HTMLEditorKit.LinkController",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.LinkController.html",
            "description": "Class to watch the associated component and fire hyperlink events on it when appropriate. "
        },
        {
            "name": "HTMLEditorKit.Parser",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.Parser.html",
            "description": "Interface to be supported by the parser. "
        },
        {
            "name": "HTMLEditorKit.ParserCallback",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.ParserCallback.html",
            "description": "The result of parsing drives these callback methods. "
        },
        {
            "name": "HTMLElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLElement.html",
            "description": "All HTML element interfaces derive from this class. "
        },
        {
            "name": "HTMLFieldSetElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLFieldSetElement.html",
            "description": "Organizes form controls into logical groups. "
        },
        {
            "name": "HTMLFontElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLFontElement.html",
            "description": "Local change to font. "
        },
        {
            "name": "HTMLFormElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLFormElement.html",
            "description": "The FORM element encompasses behavior similar to a collection and an element. "
        },
        {
            "name": "HTMLFrameElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLFrameElement.html",
            "description": "Create a frame. "
        },
        {
            "name": "HTMLFrameHyperlinkEvent",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLFrameHyperlinkEvent.html",
            "description": "HTMLFrameHyperlinkEvent is used to notify interested parties that link was activated in a frame. "
        },
        {
            "name": "HTMLFrameSetElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLFrameSetElement.html",
            "description": "Create a grid of frames. "
        },
        {
            "name": "HTMLHeadElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLHeadElement.html",
            "description": "Document head information. "
        },
        {
            "name": "HTMLHeadingElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLHeadingElement.html",
            "description": "For the H1 to H6 elements. "
        },
        {
            "name": "HTMLHRElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLHRElement.html",
            "description": "Create a horizontal rule. "
        },
        {
            "name": "HTMLHtmlElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLHtmlElement.html",
            "description": "Root of an HTML document. "
        },
        {
            "name": "HTMLIFrameElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLIFrameElement.html",
            "description": "Inline subwindows. "
        },
        {
            "name": "HTMLImageElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLImageElement.html",
            "description": "Embedded image. "
        },
        {
            "name": "HTMLInputElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLInputElement.html",
            "description": "Form control. "
        },
        {
            "name": "HTMLIsIndexElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLIsIndexElement.html",
            "description": "This element is used for single-line text input. "
        },
        {
            "name": "HTMLLabelElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLLabelElement.html",
            "description": "Form field label text. "
        },
        {
            "name": "HTMLLegendElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLLegendElement.html",
            "description": "Provides a caption for a FIELDSET grouping. "
        },
        {
            "name": "HTMLLIElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLLIElement.html",
            "description": "List item. "
        },
        {
            "name": "HTMLLinkElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLLinkElement.html",
            "description": "The LINK element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa). "
        },
        {
            "name": "HTMLMapElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLMapElement.html",
            "description": "Client-side image map. "
        },
        {
            "name": "HTMLMenuElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLMenuElement.html",
            "description": "Menu list. "
        },
        {
            "name": "HTMLMetaElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLMetaElement.html",
            "description": "This contains generic meta-information about the document. "
        },
        {
            "name": "HTMLModElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLModElement.html",
            "description": "Notice of modification to part of a document. "
        },
        {
            "name": "HTMLObjectElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLObjectElement.html",
            "description": "Generic embedded object. "
        },
        {
            "name": "HTMLOListElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLOListElement.html",
            "description": "Ordered list. "
        },
        {
            "name": "HTMLOptGroupElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLOptGroupElement.html",
            "description": "Group options together in logical subdivisions. "
        },
        {
            "name": "HTMLOptionElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLOptionElement.html",
            "description": "A selectable choice. "
        },
        {
            "name": "HTMLParagraphElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLParagraphElement.html",
            "description": "Paragraphs. "
        },
        {
            "name": "HTMLParamElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLParamElement.html",
            "description": "Parameters fed to the OBJECT element. "
        },
        {
            "name": "HTMLPreElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLPreElement.html",
            "description": "Preformatted text. "
        },
        {
            "name": "HTMLQuoteElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLQuoteElement.html",
            "description": "For the Q and BLOCKQUOTE elements. "
        },
        {
            "name": "HTMLScriptElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLScriptElement.html",
            "description": "Script statements. "
        },
        {
            "name": "HTMLSelectElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLSelectElement.html",
            "description": "The select element allows the selection of an option. "
        },
        {
            "name": "HTMLStyleElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLStyleElement.html",
            "description": "Style information. "
        },
        {
            "name": "HTMLTableCaptionElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableCaptionElement.html",
            "description": "Table caption See the  CAPTION element definition in HTML 4.0. "
        },
        {
            "name": "HTMLTableCellElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableCellElement.html",
            "description": "The object used to represent the TH and TD elements. "
        },
        {
            "name": "HTMLTableColElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableColElement.html",
            "description": "Regroups the COL and COLGROUP elements. "
        },
        {
            "name": "HTMLTableElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableElement.html",
            "description": "The create* and delete* methods on the table allow authors to construct and modify tables. "
        },
        {
            "name": "HTMLTableRowElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableRowElement.html",
            "description": "A row in a table. "
        },
        {
            "name": "HTMLTableSectionElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTableSectionElement.html",
            "description": "The THEAD , TFOOT , and TBODY elements. "
        },
        {
            "name": "HTMLTextAreaElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTextAreaElement.html",
            "description": "Multi-line text field. "
        },
        {
            "name": "HTMLTitleElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLTitleElement.html",
            "description": "The document title. "
        },
        {
            "name": "HTMLUListElement",
            "package": "org.w3c.dom.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/html/HTMLUListElement.html",
            "description": "Unordered list. "
        },
        {
            "name": "HTMLWriter",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/HTMLWriter.html",
            "description": "This is a writer for HTMLDocuments. "
        },
        {
            "name": "HttpClient",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpClient.html",
            "description": "An HTTP Client. "
        },
        {
            "name": "HttpClient.Builder",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpClient.Builder.html",
            "description": "A builder of HTTP Clients . "
        },
        {
            "name": "HttpClient.Redirect",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpClient.Redirect.html",
            "description": "Defines the automatic redirection policy. "
        },
        {
            "name": "HttpClient.Version",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpClient.Version.html",
            "description": "The HTTP protocol version. "
        },
        {
            "name": "HttpConnectTimeoutException",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpConnectTimeoutException.html",
            "description": "Thrown when a connection, over which an HttpRequest is intended to be sent, is not successfully established within a specified time period. "
        },
        {
            "name": "HttpContext",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpContext.html",
            "description": "HttpContext represents a mapping between the root URI path of an application to a HttpHandler which is invoked to handle requests destined for that path on the associated HttpServer or HttpsServer. "
        },
        {
            "name": "HttpCookie",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/HttpCookie.html",
            "description": "An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent. "
        },
        {
            "name": "HttpExchange",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpExchange.html",
            "description": "This class encapsulates a HTTP request received and a response to be generated in one exchange. "
        },
        {
            "name": "HttpHandler",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpHandler.html",
            "description": "A handler which is invoked to process HTTP exchanges. "
        },
        {
            "name": "HttpHeaders",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpHeaders.html",
            "description": "A read-only view of a set of HTTP headers. "
        },
        {
            "name": "HttpPrincipal",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpPrincipal.html",
            "description": "Represents a user authenticated by HTTP Basic or Digest authentication. "
        },
        {
            "name": "HttpRequest",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpRequest.html",
            "description": "An HTTP request. "
        },
        {
            "name": "HttpRequest.BodyPublisher",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpRequest.BodyPublisher.html",
            "description": "A BodyPublisher converts high-level Java objects into a flow of byte buffers suitable for sending as a request body. "
        },
        {
            "name": "HttpRequest.BodyPublishers",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpRequest.BodyPublishers.html",
            "description": "Implementations of BodyPublisher that implement various useful publishers, such as publishing the request body from a String, or from a file. "
        },
        {
            "name": "HttpRequest.Builder",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html",
            "description": "A builder of HTTP requests . "
        },
        {
            "name": "HttpResponse",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.html",
            "description": "An HTTP response. "
        },
        {
            "name": "HttpResponse.BodyHandler",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandler.html",
            "description": "A handler for response bodies. "
        },
        {
            "name": "HttpResponse.BodyHandlers",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html",
            "description": "Implementations of BodyHandler that implement various useful handlers, such as handling the response body as a String, or streaming the response body to a file. "
        },
        {
            "name": "HttpResponse.BodySubscriber",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscriber.html",
            "description": "A BodySubscriber consumes response body bytes and converts them into a higher-level Java type. "
        },
        {
            "name": "HttpResponse.BodySubscribers",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html",
            "description": "Implementations of BodySubscriber that implement various useful subscribers, such as converting the response body bytes into a String, or streaming the bytes to a file. "
        },
        {
            "name": "HttpResponse.PushPromiseHandler",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.PushPromiseHandler.html",
            "description": "A handler for push promises. "
        },
        {
            "name": "HttpResponse.ResponseInfo",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpResponse.ResponseInfo.html",
            "description": "Initial response information supplied to a BodyHandler when a response is initially received and before the body is processed. "
        },
        {
            "name": "HttpRetryException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/HttpRetryException.html",
            "description": "Thrown to indicate that a HTTP request needs to be retried but cannot be retried automatically, due to streaming mode being enabled. "
        },
        {
            "name": "HttpsConfigurator",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpsConfigurator.html",
            "description": "This class is used to configure the https parameters for each incoming https connection on a HttpsServer. "
        },
        {
            "name": "HttpServer",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpServer.html",
            "description": "This class implements a simple HTTP server. "
        },
        {
            "name": "HttpServerProvider",
            "package": "com.sun.net.httpserver.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/spi/HttpServerProvider.html",
            "description": "Service provider class for HttpServer. "
        },
        {
            "name": "HttpsExchange",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpsExchange.html",
            "description": "This class encapsulates a HTTPS request received and a response to be generated in one exchange and defines the extensions to HttpExchange that are specific to the HTTPS protocol. "
        },
        {
            "name": "HttpsParameters",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpsParameters.html",
            "description": "Represents the set of parameters for each https connection negotiated with clients. "
        },
        {
            "name": "HttpsServer",
            "package": "com.sun.net.httpserver",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpsServer.html",
            "description": "This class is an extension of HttpServer which provides support for HTTPS. "
        },
        {
            "name": "HttpsURLConnection",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html",
            "description": "HttpsURLConnection extends HttpURLConnection with support for https-specific features. "
        },
        {
            "name": "HttpTimeoutException",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/HttpTimeoutException.html",
            "description": "Thrown when a response is not received within a specified time period. "
        },
        {
            "name": "HttpURLConnection",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/HttpURLConnection.html",
            "description": "A URLConnection with support for HTTP-specific features. "
        },
        {
            "name": "HyperlinkEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/HyperlinkEvent.html",
            "description": "HyperlinkEvent is used to notify interested parties that something has happened with respect to a hypertext link. "
        },
        {
            "name": "HyperlinkEvent.EventType",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/HyperlinkEvent.EventType.html",
            "description": "Defines the ENTERED, EXITED, and ACTIVATED event types, along with their string representations, returned by toString(). "
        },
        {
            "name": "HyperlinkListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/HyperlinkListener.html",
            "description": "HyperlinkListener "
        },
        {
            "name": "ICC_ColorSpace",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ICC_ColorSpace.html",
            "description": "The ICC_ColorSpace class is an implementation of the abstract ColorSpace class. "
        },
        {
            "name": "ICC_Profile",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ICC_Profile.html",
            "description": "A representation of color profile data for device independent and device dependent color spaces based on the International Color Consortium Specification ICC.1:2001-12, File Format for Color Profiles, (see http://www.color.org ). "
        },
        {
            "name": "ICC_ProfileGray",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ICC_ProfileGray.html",
            "description": "The ICC_ProfileGray class is a subclass of the ICC_Profile class that represents profiles which meet the following criteria: the color space type of the profile is TYPE_GRAY and the profile includes the grayTRCTag and mediaWhitePointTag tags. "
        },
        {
            "name": "ICC_ProfileRGB",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ICC_ProfileRGB.html",
            "description": "The ICC_ProfileRGB class is a subclass of the ICC_Profile class that represents profiles which meet the following criteria: the profile's color space type is RGB, and the profile includes the redColorantTag , greenColorantTag , blueColorantTag , redTRCTag , greenTRCTag , blueTRCTag , mediaWhitePointTag tags. "
        },
        {
            "name": "Icon",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Icon.html",
            "description": "A small fixed size picture, typically used to decorate components. "
        },
        {
            "name": "IconUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/IconUIResource.html",
            "description": "An Icon wrapper class which implements UIResource. "
        },
        {
            "name": "IconView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/IconView.html",
            "description": "Icon decorator that implements the view interface. "
        },
        {
            "name": "IdentifierTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/IdentifierTree.html",
            "description": "An identifier in a documentation comment. "
        },
        {
            "name": "IdentifierTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/IdentifierTree.html",
            "description": "A tree node for an identifier expression. "
        },
        {
            "name": "Identity",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Identity.html",
            "description": "This class is deprecated and subject to removal in a future     version of Java SE. "
        },
        {
            "name": "IdentityHashMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IdentityHashMap.html",
            "description": "This class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values). "
        },
        {
            "name": "IdentityScope",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/IdentityScope.html",
            "description": "This class is deprecated and subject to removal in a future     version of Java SE. "
        },
        {
            "name": "IDN",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/IDN.html",
            "description": "Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation. "
        },
        {
            "name": "IfTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/IfTree.html",
            "description": "A tree node for an if statement. "
        },
        {
            "name": "IIOByteBuffer",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/IIOByteBuffer.html",
            "description": "A class representing a mutable reference to an array of bytes and an offset and length within that array. "
        },
        {
            "name": "IIOException",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/IIOException.html",
            "description": "An exception class used for signaling run-time failure of reading and writing operations. "
        },
        {
            "name": "IIOImage",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/IIOImage.html",
            "description": "A simple container class to aggregate an image, a set of thumbnail (preview) images, and an object representing metadata associated with the image. "
        },
        {
            "name": "IIOInvalidTreeException",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOInvalidTreeException.html",
            "description": "An IIOInvalidTreeException is thrown when an attempt by an IIOMetadata object to parse a tree of IIOMetadataNode s fails. "
        },
        {
            "name": "IIOMetadata",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOMetadata.html",
            "description": "An abstract class to be extended by objects that represent metadata (non-image data) associated with images and streams. "
        },
        {
            "name": "IIOMetadataController",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOMetadataController.html",
            "description": "An interface to be implemented by objects that can determine the settings of an IIOMetadata object, either by putting up a GUI to obtain values from a user, or by other means. "
        },
        {
            "name": "IIOMetadataFormat",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOMetadataFormat.html",
            "description": "An object describing the structure of metadata documents returned from IIOMetadata.getAsTree and passed to IIOMetadata.setFromTree and mergeTree . "
        },
        {
            "name": "IIOMetadataFormatImpl",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOMetadataFormatImpl.html",
            "description": "A concrete class providing a reusable implementation of the IIOMetadataFormat interface. "
        },
        {
            "name": "IIOMetadataNode",
            "package": "javax.imageio.metadata",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/metadata/IIOMetadataNode.html",
            "description": "A class representing a node in a meta-data tree, which implements the org.w3c.dom.Element interface and additionally allows for the storage of non-textual objects via the getUserObject and setUserObject methods. "
        },
        {
            "name": "IIOParam",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/IIOParam.html",
            "description": "A superclass of all classes describing how streams should be decoded or encoded. "
        },
        {
            "name": "IIOParamController",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/IIOParamController.html",
            "description": "An interface to be implemented by objects that can determine the settings of an IIOParam object, either by putting up a GUI to obtain values from a user, or by other means. "
        },
        {
            "name": "IIOReadProgressListener",
            "package": "javax.imageio.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/event/IIOReadProgressListener.html",
            "description": "An interface used by ImageReader implementations to notify callers of their image and thumbnail reading methods of progress. "
        },
        {
            "name": "IIOReadUpdateListener",
            "package": "javax.imageio.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/event/IIOReadUpdateListener.html",
            "description": "An interface used by ImageReader implementations to notify callers of their image and thumbnail reading methods of pixel updates. "
        },
        {
            "name": "IIOReadWarningListener",
            "package": "javax.imageio.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/event/IIOReadWarningListener.html",
            "description": "An interface used by ImageReader implementations to notify callers of their image and thumbnail reading methods of warnings (non-fatal errors). "
        },
        {
            "name": "IIORegistry",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/IIORegistry.html",
            "description": "A registry for Image I/O service provider instances. "
        },
        {
            "name": "IIOServiceProvider",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/IIOServiceProvider.html",
            "description": "A superinterface for functionality common to all Image I/O service provider interfaces (SPIs). "
        },
        {
            "name": "IIOWriteProgressListener",
            "package": "javax.imageio.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/event/IIOWriteProgressListener.html",
            "description": "An interface used by ImageWriter implementations to notify callers of their image writing methods of progress. "
        },
        {
            "name": "IIOWriteWarningListener",
            "package": "javax.imageio.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/event/IIOWriteWarningListener.html",
            "description": "An interface used by ImageWriter implementations to notify callers of their image and thumbnail reading methods of warnings (non-fatal errors). "
        },
        {
            "name": "IllegalAccessError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalAccessError.html",
            "description": "Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to. "
        },
        {
            "name": "IllegalAccessException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalAccessException.html",
            "description": "An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor. "
        },
        {
            "name": "IllegalArgumentException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalArgumentException.html",
            "description": "Thrown to indicate that a method has been passed an illegal or inappropriate argument. "
        },
        {
            "name": "IllegalBlockingModeException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/IllegalBlockingModeException.html",
            "description": "Unchecked exception thrown when a blocking-mode-specific operation is invoked upon a channel in the incorrect blocking mode. "
        },
        {
            "name": "IllegalBlockSizeException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/IllegalBlockSizeException.html",
            "description": "This exception is thrown when the length of data provided to a block cipher is incorrect, i.e., does not match the block size of the cipher. "
        },
        {
            "name": "IllegalCallerException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalCallerException.html",
            "description": "Thrown to indicate that a method has been called by an inappropriate caller. "
        },
        {
            "name": "IllegalChannelGroupException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/IllegalChannelGroupException.html",
            "description": "Unchecked exception thrown when an attempt is made to open a channel in a group that was not created by the same provider. "
        },
        {
            "name": "IllegalCharsetNameException",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html",
            "description": "Unchecked exception thrown when a string that is not a legal charset name is used as such. "
        },
        {
            "name": "IllegalClassFormatException",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/IllegalClassFormatException.html",
            "description": "Thrown by an implementation of ClassFileTransformer.transform when its input parameters are invalid. "
        },
        {
            "name": "IllegalComponentStateException",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/IllegalComponentStateException.html",
            "description": "Signals that an AWT component is not in an appropriate state for the requested operation. "
        },
        {
            "name": "IllegalConnectorArgumentsException",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/IllegalConnectorArgumentsException.html",
            "description": "Thrown to indicate an invalid argument or inconsistent passed to a Connector . "
        },
        {
            "name": "IllegalFormatCodePointException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatCodePointException.html",
            "description": "Unchecked exception thrown when a character with an invalid Unicode code point as defined by Character.isValidCodePoint(int) is passed to the Formatter . "
        },
        {
            "name": "IllegalFormatConversionException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatConversionException.html",
            "description": "Unchecked exception thrown when the argument corresponding to the format specifier is of an incompatible type. "
        },
        {
            "name": "IllegalFormatException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatException.html",
            "description": "Unchecked exception thrown when a format string contains an illegal syntax or a format specifier that is incompatible with the given arguments. "
        },
        {
            "name": "IllegalFormatFlagsException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatFlagsException.html",
            "description": "Unchecked exception thrown when an illegal combination flags is given. "
        },
        {
            "name": "IllegalFormatPrecisionException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatPrecisionException.html",
            "description": "Unchecked exception thrown when the precision is a negative value other than -1 , the conversion does not support a precision, or the value is otherwise unsupported. "
        },
        {
            "name": "IllegalFormatWidthException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllegalFormatWidthException.html",
            "description": "Unchecked exception thrown when the format width is a negative value other than -1 or is otherwise unsupported. "
        },
        {
            "name": "IllegalMonitorStateException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalMonitorStateException.html",
            "description": "Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor. "
        },
        {
            "name": "IllegalPathStateException",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/IllegalPathStateException.html",
            "description": "The IllegalPathStateException represents an exception that is thrown if an operation is performed on a path that is in an illegal state with respect to the particular operation being performed, such as appending a path segment to a GeneralPath without an initial moveto. "
        },
        {
            "name": "IllegalReceiveException",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/IllegalReceiveException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke the receive method of SctpChannel or SctpMultiChannel from a notification handler. "
        },
        {
            "name": "IllegalSelectorException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/IllegalSelectorException.html",
            "description": "Unchecked exception thrown when an attempt is made to register a channel with a selector that was not created by the provider that created the channel. "
        },
        {
            "name": "IllegalStateException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalStateException.html",
            "description": "Signals that a method has been invoked at an illegal or inappropriate time. "
        },
        {
            "name": "IllegalThreadStateException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IllegalThreadStateException.html",
            "description": "Thrown to indicate that a thread is not in an appropriate state for the requested operation. "
        },
        {
            "name": "IllegalUnbindException",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/IllegalUnbindException.html",
            "description": "Unchecked exception thrown when an attempt is made to remove an address that is not bound to the channel, or remove an address from a channel that has only one address bound to it. "
        },
        {
            "name": "IllformedLocaleException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IllformedLocaleException.html",
            "description": "Thrown by methods in Locale and Locale.Builder to indicate that an argument is not a well-formed BCP 47 tag. "
        },
        {
            "name": "Image",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Image.html",
            "description": "The abstract class Image is the superclass of all classes that represent graphical images. "
        },
        {
            "name": "ImageCapabilities",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ImageCapabilities.html",
            "description": "Capabilities and properties of images. "
        },
        {
            "name": "ImageConsumer",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ImageConsumer.html",
            "description": "The interface for objects expressing interest in image data through the ImageProducer interfaces. "
        },
        {
            "name": "ImageFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ImageFilter.html",
            "description": "This class implements a filter for the set of interface methods that are used to deliver data from an ImageProducer to an ImageConsumer. "
        },
        {
            "name": "ImageGraphicAttribute",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/ImageGraphicAttribute.html",
            "description": "The ImageGraphicAttribute class is an implementation of GraphicAttribute which draws images in a TextLayout . "
        },
        {
            "name": "ImageIcon",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ImageIcon.html",
            "description": "An implementation of the Icon interface that paints Icons from Images. "
        },
        {
            "name": "ImageInputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/ImageInputStream.html",
            "description": "A seekable input stream interface for use by ImageReader s. "
        },
        {
            "name": "ImageInputStreamImpl",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/ImageInputStreamImpl.html",
            "description": "An abstract class implementing the ImageInputStream interface. "
        },
        {
            "name": "ImageInputStreamSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageInputStreamSpi.html",
            "description": "The service provider interface (SPI) for ImageInputStream s. "
        },
        {
            "name": "ImageIO",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageIO.html",
            "description": "A class containing static convenience methods for locating ImageReader s and ImageWriter s, and performing simple encoding and decoding. "
        },
        {
            "name": "ImageObserver",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ImageObserver.html",
            "description": "An asynchronous update interface for receiving notifications about Image information as the Image is constructed. "
        },
        {
            "name": "ImageOutputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/ImageOutputStream.html",
            "description": "A seekable output stream interface for use by ImageWriter s. "
        },
        {
            "name": "ImageOutputStreamImpl",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/ImageOutputStreamImpl.html",
            "description": "An abstract class implementing the ImageOutputStream interface. "
        },
        {
            "name": "ImageOutputStreamSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageOutputStreamSpi.html",
            "description": "The service provider interface (SPI) for ImageOutputStream s. "
        },
        {
            "name": "ImageProducer",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ImageProducer.html",
            "description": "The interface for objects which can produce the image data for Images. "
        },
        {
            "name": "ImageReader",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageReader.html",
            "description": "An abstract superclass for parsing and decoding of images. "
        },
        {
            "name": "ImageReaderSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageReaderSpi.html",
            "description": "The service provider interface (SPI) for ImageReader s. "
        },
        {
            "name": "ImageReaderWriterSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html",
            "description": "A superclass containing instance variables and methods common to ImageReaderSpi and ImageWriterSpi . "
        },
        {
            "name": "ImageReadParam",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageReadParam.html",
            "description": "A class describing how a stream is to be decoded. "
        },
        {
            "name": "ImageTranscoder",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageTranscoder.html",
            "description": "An interface providing metadata transcoding capability. "
        },
        {
            "name": "ImageTranscoderSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageTranscoderSpi.html",
            "description": "The service provider interface (SPI) for ImageTranscoder s. "
        },
        {
            "name": "ImageTypeSpecifier",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageTypeSpecifier.html",
            "description": "A class that allows the format of an image (in particular, its SampleModel and ColorModel ) to be specified in a convenient manner. "
        },
        {
            "name": "ImageView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/ImageView.html",
            "description": "View of an Image, intended to support the HTML <IMG> tag. "
        },
        {
            "name": "ImageWriteParam",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageWriteParam.html",
            "description": "A class describing how a stream is to be encoded. "
        },
        {
            "name": "ImageWriter",
            "package": "javax.imageio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/ImageWriter.html",
            "description": "An abstract superclass for encoding and writing images. "
        },
        {
            "name": "ImageWriterSpi",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ImageWriterSpi.html",
            "description": "The service provider interface (SPI) for ImageWriter s. "
        },
        {
            "name": "ImagingOpException",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ImagingOpException.html",
            "description": "The ImagingOpException is thrown if one of the BufferedImageOp or RasterOp filter methods cannot process the image. "
        },
        {
            "name": "ImmutableDescriptor",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ImmutableDescriptor.html",
            "description": "An immutable descriptor. "
        },
        {
            "name": "ImportSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/ImportSnippet.html",
            "description": "Snippet for an import declaration. "
        },
        {
            "name": "ImportTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ImportTree.html",
            "description": "A tree node for an import declaration. "
        },
        {
            "name": "InaccessibleObjectException",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/InaccessibleObjectException.html",
            "description": "Thrown when Java language access checks cannot be suppressed. "
        },
        {
            "name": "IncompatibleClassChangeError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IncompatibleClassChangeError.html",
            "description": "Thrown when an incompatible class change has occurred to some class definition. "
        },
        {
            "name": "IncompatibleThreadStateException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/IncompatibleThreadStateException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed while the specified thread is in its current state. "
        },
        {
            "name": "IncompleteAnnotationException",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html",
            "description": "Thrown to indicate that a program has attempted to access an element of an annotation type that was added to the annotation type definition after the annotation was compiled (or serialized). "
        },
        {
            "name": "InconsistentDebugInfoException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InconsistentDebugInfoException.html",
            "description": "Thrown to indicate that there is an inconistency in the debug information provided by the target VM. "
        },
        {
            "name": "IndexColorModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/IndexColorModel.html",
            "description": "The IndexColorModel class is a ColorModel class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space. "
        },
        {
            "name": "IndexedPropertyChangeEvent",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/IndexedPropertyChangeEvent.html",
            "description": "An \"IndexedPropertyChange\" event gets delivered whenever a component that conforms to the JavaBeans specification (a \"bean\") changes a bound indexed property. "
        },
        {
            "name": "IndexedPropertyDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/IndexedPropertyDescriptor.html",
            "description": "An IndexedPropertyDescriptor describes a property that acts like an array and has an indexed read and/or indexed write method to access specific elements of the array. "
        },
        {
            "name": "IndexOutOfBoundsException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/IndexOutOfBoundsException.html",
            "description": "Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range. "
        },
        {
            "name": "IndexTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/IndexTree.html",
            "description": "A tree node for an @index or @index inline tag. "
        },
        {
            "name": "Inet4Address",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Inet4Address.html",
            "description": "This class represents an Internet Protocol version 4 (IPv4) address. "
        },
        {
            "name": "Inet6Address",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Inet6Address.html",
            "description": "This class represents an Internet Protocol version 6 (IPv6) address. "
        },
        {
            "name": "InetAddress",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/InetAddress.html",
            "description": "This class represents an Internet Protocol (IP) address. "
        },
        {
            "name": "InetSocketAddress",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/InetSocketAddress.html",
            "description": "This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname. "
        },
        {
            "name": "Inflater",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/Inflater.html",
            "description": "This class provides support for general purpose decompression using the popular ZLIB compression library. "
        },
        {
            "name": "InflaterInputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/InflaterInputStream.html",
            "description": "This class implements a stream filter for uncompressing data in the \"deflate\" compression format. "
        },
        {
            "name": "InflaterOutputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/InflaterOutputStream.html",
            "description": "Implements an output stream filter for uncompressing data stored in the \"deflate\" compression format. "
        },
        {
            "name": "InheritableThreadLocal",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/InheritableThreadLocal.html",
            "description": "This class extends ThreadLocal to provide inheritance of values from parent thread to child thread: when a child thread is created, the child receives initial values for all inheritable thread-local variables for which the parent has values. "
        },
        {
            "name": "InheritDocTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/InheritDocTree.html",
            "description": "A tree node for an @inheritDoc inline tag. "
        },
        {
            "name": "Inherited",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Inherited.html",
            "description": "Indicates that an annotation type is automatically inherited. "
        },
        {
            "name": "InitialContext",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/InitialContext.html",
            "description": "This class is the starting context for performing naming operations. "
        },
        {
            "name": "InitialContextFactory",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/InitialContextFactory.html",
            "description": "This interface represents a factory that creates an initial context. "
        },
        {
            "name": "InitialContextFactoryBuilder",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/InitialContextFactoryBuilder.html",
            "description": "This interface represents a builder that creates initial context factories. "
        },
        {
            "name": "InitialDirContext",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InitialDirContext.html",
            "description": "This class is the starting context for performing directory operations. "
        },
        {
            "name": "InitialLdapContext",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/InitialLdapContext.html",
            "description": "This class is the starting context for performing LDAPv3-style extended operations and controls. "
        },
        {
            "name": "InlineTagTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/InlineTagTree.html",
            "description": "A tree node used as the base class for the different types of inline tags. "
        },
        {
            "name": "InlineView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/InlineView.html",
            "description": "Displays the inline element styles based upon css attributes. "
        },
        {
            "name": "InputContext",
            "package": "java.awt.im",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/InputContext.html",
            "description": "Provides methods to control text input facilities such as input methods and keyboard layouts. "
        },
        {
            "name": "InputEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/InputEvent.html",
            "description": "The root event class for all component-level input events. "
        },
        {
            "name": "InputMap",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/InputMap.html",
            "description": "InputMap provides a binding between an input event (currently only KeyStroke s are used) and an Object . "
        },
        {
            "name": "InputMapUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/InputMapUIResource.html",
            "description": "A subclass of javax.swing.InputMap that implements UIResource. "
        },
        {
            "name": "InputMethod",
            "package": "java.awt.im.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/spi/InputMethod.html",
            "description": "Defines the interface for an input method that supports complex text input. "
        },
        {
            "name": "InputMethodContext",
            "package": "java.awt.im.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/spi/InputMethodContext.html",
            "description": "Provides methods that input methods can use to communicate with their client components or to request other services. "
        },
        {
            "name": "InputMethodDescriptor",
            "package": "java.awt.im.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/spi/InputMethodDescriptor.html",
            "description": "Defines methods that provide sufficient information about an input method to enable selection and loading of that input method. "
        },
        {
            "name": "InputMethodEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/InputMethodEvent.html",
            "description": "Input method events contain information about text that is being composed using an input method. "
        },
        {
            "name": "InputMethodHighlight",
            "package": "java.awt.im",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/InputMethodHighlight.html",
            "description": "An InputMethodHighlight is used to describe the highlight attributes of text being composed. "
        },
        {
            "name": "InputMethodListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/InputMethodListener.html",
            "description": "The listener interface for receiving input method events. "
        },
        {
            "name": "InputMethodRequests",
            "package": "java.awt.im",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/InputMethodRequests.html",
            "description": "InputMethodRequests defines the requests that a text editing component has to handle in order to work with input methods. "
        },
        {
            "name": "InputMismatchException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/InputMismatchException.html",
            "description": "Thrown by a Scanner to indicate that the token retrieved does not match the pattern for the expected type, or that the token is out of range for the expected type. "
        },
        {
            "name": "InputSource",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/InputSource.html",
            "description": "A single input source for an XML entity. "
        },
        {
            "name": "InputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/InputStream.html",
            "description": "This abstract class is the superclass of all classes representing an input stream of bytes. "
        },
        {
            "name": "InputStreamReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/InputStreamReader.html",
            "description": "An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset . "
        },
        {
            "name": "InputSubset",
            "package": "java.awt.im",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/im/InputSubset.html",
            "description": "Defines additional Unicode subsets for use by input methods. "
        },
        {
            "name": "InputVerifier",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/InputVerifier.html",
            "description": "This class provides the validation mechanism for Swing components. "
        },
        {
            "name": "InquireSecContextPermission",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/InquireSecContextPermission.html",
            "description": "This class is used to protect various attributes of an established GSS security context that can be accessed using the ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType) method. "
        },
        {
            "name": "InquireType",
            "package": "com.sun.security.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.jgss/com/sun/security/jgss/InquireType.html",
            "description": "Attribute types that can be specified as an argument of ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType) "
        },
        {
            "name": "Insets",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Insets.html",
            "description": "An Insets object is a representation of the borders of a container. "
        },
        {
            "name": "InsetsUIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/InsetsUIResource.html",
            "description": "A subclass of Insets that implements UIResource. "
        },
        {
            "name": "InstanceAlreadyExistsException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/InstanceAlreadyExistsException.html",
            "description": "The MBean is already registered in the repository. "
        },
        {
            "name": "InstanceNotFoundException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/InstanceNotFoundException.html",
            "description": "The specified MBean does not exist in the repository. "
        },
        {
            "name": "InstanceOfTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/InstanceOfTree.html",
            "description": "A tree node for an instanceof expression. "
        },
        {
            "name": "Instant",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Instant.html",
            "description": "An instantaneous point on the time-line. "
        },
        {
            "name": "InstantiationError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/InstantiationError.html",
            "description": "Thrown when an application tries to use the Java new construct to instantiate an abstract class or an interface. "
        },
        {
            "name": "InstantiationException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/InstantiationException.html",
            "description": "Thrown when an application tries to create an instance of a class using the newInstance method in class Class , but the specified class object cannot be instantiated. "
        },
        {
            "name": "Instrument",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Instrument.html",
            "description": "An instrument is a sound-synthesis algorithm with certain parameter settings, usually designed to emulate a specific real-world musical instrument or to achieve a specific sort of sound effect. "
        },
        {
            "name": "Instrumentation",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/Instrumentation.html",
            "description": "This class provides services needed to instrument Java programming language code. "
        },
        {
            "name": "InsufficientResourcesException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/InsufficientResourcesException.html",
            "description": "This exception is thrown when resources are not available to complete the requested operation. "
        },
        {
            "name": "IntBinaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntBinaryOperator.html",
            "description": "Represents an operation upon two int -valued operands and producing an int -valued result. "
        },
        {
            "name": "IntBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/IntBuffer.html",
            "description": "An int buffer. "
        },
        {
            "name": "IntConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntConsumer.html",
            "description": "Represents an operation that accepts a single int -valued argument and returns no result. "
        },
        {
            "name": "Integer",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Integer.html",
            "description": "The Integer class wraps a value of the primitive type int in an object. "
        },
        {
            "name": "IntegerSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/IntegerSyntax.html",
            "description": "Class IntegerSyntax is an abstract base class providing the common implementation of all attributes with integer values. "
        },
        {
            "name": "IntegerType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/IntegerType.html",
            "description": "The type of all primitive int values accessed in the target VM. "
        },
        {
            "name": "IntegerValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/IntegerValue.html",
            "description": "Provides access to a primitive int value in the target VM. "
        },
        {
            "name": "InterfaceAddress",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/InterfaceAddress.html",
            "description": "This class represents a Network Interface address. "
        },
        {
            "name": "InterfaceType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InterfaceType.html",
            "description": "A mirror of an interface in the target VM. "
        },
        {
            "name": "InternalError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/InternalError.html",
            "description": "Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine. "
        },
        {
            "name": "InternalException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InternalException.html",
            "description": "Thrown to indicate that an unexpected internal error has occurred. "
        },
        {
            "name": "InternalFrameAdapter",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/InternalFrameAdapter.html",
            "description": "An abstract adapter class for receiving internal frame events. "
        },
        {
            "name": "InternalFrameEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/InternalFrameEvent.html",
            "description": "An AWTEvent that adds support for JInternalFrame objects as the event source. "
        },
        {
            "name": "InternalFrameFocusTraversalPolicy",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/InternalFrameFocusTraversalPolicy.html",
            "description": "A FocusTraversalPolicy which can optionally provide an algorithm for determining a JInternalFrame's initial Component. "
        },
        {
            "name": "InternalFrameListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/InternalFrameListener.html",
            "description": "The listener interface for receiving internal frame events. "
        },
        {
            "name": "InternalFrameUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/InternalFrameUI.html",
            "description": "Pluggable look and feel interface for JInternalFrame. "
        },
        {
            "name": "InternationalFormatter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/InternationalFormatter.html",
            "description": "InternationalFormatter extends DefaultFormatter , using an instance of java.text.Format to handle the conversion to a String, and the conversion from a String. "
        },
        {
            "name": "InterruptedByTimeoutException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/InterruptedByTimeoutException.html",
            "description": "Checked exception received by a thread when a timeout elapses before an asynchronous operation completes. "
        },
        {
            "name": "InterruptedException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/InterruptedException.html",
            "description": "Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. "
        },
        {
            "name": "InterruptedIOException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/InterruptedIOException.html",
            "description": "Signals that an I/O operation has been interrupted. "
        },
        {
            "name": "InterruptedNamingException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/InterruptedNamingException.html",
            "description": "This exception is thrown when the naming operation being invoked has been interrupted. "
        },
        {
            "name": "InterruptibleChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/InterruptibleChannel.html",
            "description": "A channel that can be asynchronously closed and interrupted. "
        },
        {
            "name": "IntersectionType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/IntersectionType.html",
            "description": "Represents an intersection type. "
        },
        {
            "name": "IntersectionTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/IntersectionTypeTree.html",
            "description": "A tree node for an intersection type in a cast expression. "
        },
        {
            "name": "IntFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntFunction.html",
            "description": "Represents a function that accepts an int-valued argument and produces a result. "
        },
        {
            "name": "IntPredicate",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntPredicate.html",
            "description": "Represents a predicate (boolean-valued function) of one int -valued argument. "
        },
        {
            "name": "IntrospectionException",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/IntrospectionException.html",
            "description": "Thrown when an exception happens during Introspection. "
        },
        {
            "name": "IntrospectionException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/IntrospectionException.html",
            "description": "An exception occurred during the introspection of an MBean. "
        },
        {
            "name": "Introspector",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Introspector.html",
            "description": "The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean. "
        },
        {
            "name": "IntStream",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/IntStream.html",
            "description": "A sequence of primitive int-valued elements supporting sequential and parallel aggregate operations. "
        },
        {
            "name": "IntStream.Builder",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/IntStream.Builder.html",
            "description": "A mutable builder for an IntStream . "
        },
        {
            "name": "IntSummaryStatistics",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/IntSummaryStatistics.html",
            "description": "A state object for collecting statistics such as count, min, max, sum, and average. "
        },
        {
            "name": "IntSupplier",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntSupplier.html",
            "description": "Represents a supplier of int -valued results. "
        },
        {
            "name": "IntToDoubleFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntToDoubleFunction.html",
            "description": "Represents a function that accepts an int-valued argument and produces a double-valued result. "
        },
        {
            "name": "IntToLongFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntToLongFunction.html",
            "description": "Represents a function that accepts an int-valued argument and produces a long-valued result. "
        },
        {
            "name": "IntUnaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/IntUnaryOperator.html",
            "description": "Represents an operation on a single int -valued operand that produces an int -valued result. "
        },
        {
            "name": "InvalidAlgorithmParameterException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html",
            "description": "This is the exception for invalid or inappropriate algorithm parameters. "
        },
        {
            "name": "InvalidApplicationException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/InvalidApplicationException.html",
            "description": "Thrown when an attempt is made to apply either of the following: A subquery expression to an MBean or a qualified attribute expression to an MBean of the wrong class. "
        },
        {
            "name": "InvalidAttributeIdentifierException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InvalidAttributeIdentifierException.html",
            "description": "This exception is thrown when an attempt is made to add to create an attribute with an invalid attribute identifier. "
        },
        {
            "name": "InvalidAttributesException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html",
            "description": "This exception is thrown when an attempt is made to add or modify an attribute set that has been specified incompletely or incorrectly. "
        },
        {
            "name": "InvalidAttributeValueException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/InvalidAttributeValueException.html",
            "description": "The value specified is not valid for the attribute. "
        },
        {
            "name": "InvalidAttributeValueException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InvalidAttributeValueException.html",
            "description": "This class is thrown when an attempt is made to add to an attribute a value that conflicts with the attribute's schema definition. "
        },
        {
            "name": "InvalidClassException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/InvalidClassException.html",
            "description": "Thrown when the Serialization runtime detects one of the following problems with a Class. "
        },
        {
            "name": "InvalidCodeIndexException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvalidCodeIndexException.html",
            "description": "This exception is no longer thrown "
        },
        {
            "name": "InvalidDnDOperationException",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/InvalidDnDOperationException.html",
            "description": "This exception is thrown by various methods in the java.awt.dnd package. "
        },
        {
            "name": "InvalidKeyException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/InvalidKeyException.html",
            "description": "This is the exception for invalid Keys (invalid encoding, wrong length, uninitialized, etc). "
        },
        {
            "name": "InvalidKeyException",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/InvalidKeyException.html",
            "description": "This runtime exception is thrown to indicate that a method parameter which was expected to be an item name of a composite data or a row index of a tabular data is not valid. "
        },
        {
            "name": "InvalidKeySpecException",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/InvalidKeySpecException.html",
            "description": "This is the exception for invalid key specifications. "
        },
        {
            "name": "InvalidLineNumberException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvalidLineNumberException.html",
            "description": "This exception is no longer thrown "
        },
        {
            "name": "InvalidMarkException",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/InvalidMarkException.html",
            "description": "Unchecked exception thrown when an attempt is made to reset a buffer when its mark is not defined. "
        },
        {
            "name": "InvalidMidiDataException",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/InvalidMidiDataException.html",
            "description": "An InvalidMidiDataException indicates that inappropriate MIDI data was encountered. "
        },
        {
            "name": "InvalidModuleDescriptorException",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/InvalidModuleDescriptorException.html",
            "description": "Thrown when reading a module descriptor and the module descriptor is found to be malformed or otherwise cannot be interpreted as a module descriptor. "
        },
        {
            "name": "InvalidModuleException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvalidModuleException.html",
            "description": "Thrown to indicate that the requested module is invalid or became invalid after the module was unloaded. "
        },
        {
            "name": "InvalidNameException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/InvalidNameException.html",
            "description": "This exception indicates that the name being specified does not conform to the naming syntax of a naming system. "
        },
        {
            "name": "InvalidObjectException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/InvalidObjectException.html",
            "description": "Indicates that one or more deserialized objects failed validation tests. "
        },
        {
            "name": "InvalidOpenTypeException",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/InvalidOpenTypeException.html",
            "description": "This runtime exception is thrown to indicate that the open type of an open data value is not the one expected. "
        },
        {
            "name": "InvalidParameterException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/InvalidParameterException.html",
            "description": "This exception, designed for use by the JCA/JCE engine classes, is thrown when an invalid parameter is passed to a method. "
        },
        {
            "name": "InvalidParameterSpecException",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/InvalidParameterSpecException.html",
            "description": "This is the exception for invalid parameter specifications. "
        },
        {
            "name": "InvalidPathException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/InvalidPathException.html",
            "description": "Unchecked exception thrown when path string cannot be converted into a Path because the path string contains invalid characters, or the path string is invalid for other file system specific reasons. "
        },
        {
            "name": "InvalidPreferencesFormatException",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/InvalidPreferencesFormatException.html",
            "description": "Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of preferences, as per the Preferences specification. "
        },
        {
            "name": "InvalidPropertiesFormatException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/InvalidPropertiesFormatException.html",
            "description": "Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of properties, as per the Properties specification. "
        },
        {
            "name": "InvalidRelationIdException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/InvalidRelationIdException.html",
            "description": "This exception is raised when relation id provided for a relation is already used. "
        },
        {
            "name": "InvalidRelationServiceException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/InvalidRelationServiceException.html",
            "description": "This exception is raised when an invalid Relation Service is provided. "
        },
        {
            "name": "InvalidRelationTypeException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/InvalidRelationTypeException.html",
            "description": "Invalid relation type. "
        },
        {
            "name": "InvalidRequestStateException",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/InvalidRequestStateException.html",
            "description": "Thrown to indicate that the requested event cannot be modified because it is enabled. "
        },
        {
            "name": "InvalidRoleInfoException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/InvalidRoleInfoException.html",
            "description": "This exception is raised when, in a role info, its minimum degree is greater than its maximum degree. "
        },
        {
            "name": "InvalidRoleValueException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html",
            "description": "Role value is invalid. "
        },
        {
            "name": "InvalidSearchControlsException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InvalidSearchControlsException.html",
            "description": "This exception is thrown when the specification of the SearchControls for a search operation is invalid. "
        },
        {
            "name": "InvalidSearchFilterException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/InvalidSearchFilterException.html",
            "description": "This exception is thrown when the specification of a search filter is invalid. "
        },
        {
            "name": "InvalidStackFrameException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvalidStackFrameException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed because the specified stack frame is no longer valid. "
        },
        {
            "name": "InvalidStreamException",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/InvalidStreamException.html",
            "description": "Unchecked exception thrown when an attempt is made to send a message to an invalid stream. "
        },
        {
            "name": "InvalidTargetObjectTypeException",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/InvalidTargetObjectTypeException.html",
            "description": "Exception thrown when an invalid target object type is specified. "
        },
        {
            "name": "InvalidTypeException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvalidTypeException.html",
            "description": "Thrown to indicate a type mismatch in setting the value of a field or variable, or in specifying the return value of a method. "
        },
        {
            "name": "Invocable",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/Invocable.html",
            "description": "The optional interface implemented by ScriptEngines whose methods allow the invocation of procedures in scripts that have previously been executed. "
        },
        {
            "name": "InvocationEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/InvocationEvent.html",
            "description": "An event which executes the run() method on a Runnable when dispatched by the AWT event dispatcher thread. "
        },
        {
            "name": "InvocationException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/InvocationException.html",
            "description": "Thrown to indicate an exception occurred in an invoked method within the target VM. "
        },
        {
            "name": "InvocationHandler",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/InvocationHandler.html",
            "description": "InvocationHandler is the interface implemented by the invocation handler of a proxy instance. "
        },
        {
            "name": "InvocationTargetException",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/InvocationTargetException.html",
            "description": "InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor. "
        },
        {
            "name": "IOError",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/IOError.html",
            "description": "Thrown when a serious I/O error has occurred. "
        },
        {
            "name": "IOException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/IOException.html",
            "description": "Signals that an I/O exception of some sort has occurred. "
        },
        {
            "name": "IsoChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/IsoChronology.html",
            "description": "The ISO calendar system. "
        },
        {
            "name": "IsoEra",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/IsoEra.html",
            "description": "An era in the ISO calendar system. "
        },
        {
            "name": "IsoFields",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/IsoFields.html",
            "description": "Fields and units specific to the ISO-8601 calendar system, including quarter-of-year and week-based-year. "
        },
        {
            "name": "ItemEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ItemEvent.html",
            "description": "A semantic event which indicates that an item was selected or deselected. "
        },
        {
            "name": "ItemListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/ItemListener.html",
            "description": "The listener interface for receiving item events. "
        },
        {
            "name": "ItemSelectable",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ItemSelectable.html",
            "description": "The interface for objects which contain a set of items for which zero or more can be selected. "
        },
        {
            "name": "Iterable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Iterable.html",
            "description": "Implementing this interface allows an object to be the target of the enhanced for statement (sometimes called the \"for-each loop\" statement). "
        },
        {
            "name": "Iterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Iterator.html",
            "description": "An iterator over a collection. "
        },
        {
            "name": "IvParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/IvParameterSpec.html",
            "description": "This class specifies an initialization vector (IV). "
        },
        {
            "name": "JapaneseChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/JapaneseChronology.html",
            "description": "The Japanese Imperial calendar system. "
        },
        {
            "name": "JapaneseDate",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/JapaneseDate.html",
            "description": "A date in the Japanese Imperial calendar system. "
        },
        {
            "name": "JapaneseEra",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/JapaneseEra.html",
            "description": "An era in the Japanese Imperial calendar system. "
        },
        {
            "name": "JApplet",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JApplet.html",
            "description": "The Applet API is deprecated, no replacement. "
        },
        {
            "name": "JarEntry",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/JarEntry.html",
            "description": "This class is used to represent a JAR file entry. "
        },
        {
            "name": "JarException",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/JarException.html",
            "description": "Signals that an error of some sort has occurred while reading from or writing to a JAR file. "
        },
        {
            "name": "JarFile",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/JarFile.html",
            "description": "The JarFile class is used to read the contents of a jar file from any file that can be opened with java.io.RandomAccessFile . "
        },
        {
            "name": "JarInputStream",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/JarInputStream.html",
            "description": "The JarInputStream class is used to read the contents of a JAR file from any input stream. "
        },
        {
            "name": "JarOutputStream",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/JarOutputStream.html",
            "description": "The JarOutputStream class is used to write the contents of a JAR file to any output stream. "
        },
        {
            "name": "JarSigner",
            "package": "jdk.security.jarsigner",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.html",
            "description": "An immutable utility class to sign a jar file. "
        },
        {
            "name": "JarSigner.Builder",
            "package": "jdk.security.jarsigner",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.Builder.html",
            "description": "A mutable builder class that can create an immutable JarSigner from various signing-related parameters. "
        },
        {
            "name": "JarSignerException",
            "package": "jdk.security.jarsigner",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jartool/jdk/security/jarsigner/JarSignerException.html",
            "description": "This exception is thrown when JarSigner.sign(java.util.zip.ZipFile, java.io.OutputStream) fails. "
        },
        {
            "name": "JarURLConnection",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/JarURLConnection.html",
            "description": "A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file. "
        },
        {
            "name": "JavaBean",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/JavaBean.html",
            "description": "An annotation used to specify some class-related information for the automatically generated BeanInfo classes. "
        },
        {
            "name": "JavaCompiler",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaCompiler.html",
            "description": "Interface to invoke Java programming language compilers from programs. "
        },
        {
            "name": "JavaCompiler.CompilationTask",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaCompiler.CompilationTask.html",
            "description": "Interface representing a future for a compilation task. "
        },
        {
            "name": "JavacTask",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/JavacTask.html",
            "description": "Provides access to functionality specific to the JDK Java Compiler, javac. "
        },
        {
            "name": "JavaFileManager",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaFileManager.html",
            "description": "File manager for tools operating on Java programming language source and class files. "
        },
        {
            "name": "JavaFileManager.Location",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaFileManager.Location.html",
            "description": "Interface for locations of file objects. "
        },
        {
            "name": "JavaFileObject",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaFileObject.html",
            "description": "File abstraction for tools operating on Java programming language source and class files. "
        },
        {
            "name": "JavaFileObject.Kind",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/JavaFileObject.Kind.html",
            "description": "Kinds of JavaFileObjects. "
        },
        {
            "name": "JavaShellToolBuilder",
            "package": "jdk.jshell.tool",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/tool/JavaShellToolBuilder.html",
            "description": "Interface to configure and run a Java shell tool instance. "
        },
        {
            "name": "JButton",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JButton.html",
            "description": "An implementation of a \"push\" button. "
        },
        {
            "name": "JCheckBox",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JCheckBox.html",
            "description": "An implementation of a check box -- an item that can be selected or deselected, and which displays its state to the user. "
        },
        {
            "name": "JCheckBoxMenuItem",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JCheckBoxMenuItem.html",
            "description": "A menu item that can be selected or deselected. "
        },
        {
            "name": "JColorChooser",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JColorChooser.html",
            "description": "JColorChooser provides a pane of controls designed to allow a user to manipulate and select a color. "
        },
        {
            "name": "JComboBox",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JComboBox.html",
            "description": "A component that combines a button or editable field and a drop-down list. "
        },
        {
            "name": "JComboBox.KeySelectionManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JComboBox.KeySelectionManager.html",
            "description": "The interface that defines a KeySelectionManager . "
        },
        {
            "name": "JComponent",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JComponent.html",
            "description": "The base class for all Swing components except top-level containers. "
        },
        {
            "name": "JConsoleContext",
            "package": "com.sun.tools.jconsole",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jconsole/com/sun/tools/jconsole/JConsoleContext.html",
            "description": "JConsoleContext represents a JConsole connection to a target application. "
        },
        {
            "name": "JConsoleContext.ConnectionState",
            "package": "com.sun.tools.jconsole",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jconsole/com/sun/tools/jconsole/JConsoleContext.ConnectionState.html",
            "description": "Values for the ConnectionState bound property. "
        },
        {
            "name": "JConsolePlugin",
            "package": "com.sun.tools.jconsole",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jconsole/com/sun/tools/jconsole/JConsolePlugin.html",
            "description": "A JConsole plugin class. "
        },
        {
            "name": "JdbcRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html",
            "description": "The standard interface that all standard implementations of JdbcRowSet must implement. "
        },
        {
            "name": "JDBCType",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/JDBCType.html",
            "description": "Defines the constants that are used to identify generic SQL types, called JDBC types. "
        },
        {
            "name": "JDesktopPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JDesktopPane.html",
            "description": "A container used to create a multiple-document interface or a virtual desktop. "
        },
        {
            "name": "JDialog",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JDialog.html",
            "description": "The main class for creating a dialog window. "
        },
        {
            "name": "JdiDefaultExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/JdiDefaultExecutionControl.html",
            "description": "The implementation of ExecutionControl that the JShell-core uses by default. "
        },
        {
            "name": "JdiExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/JdiExecutionControl.html",
            "description": "Abstract JDI implementation of ExecutionControl . "
        },
        {
            "name": "JdiExecutionControlProvider",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/JdiExecutionControlProvider.html",
            "description": "A provider of remote JDI-controlled execution engines. "
        },
        {
            "name": "JdiInitiator",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/JdiInitiator.html",
            "description": "Sets up a JDI connection, providing the resulting JDI VirtualMachine and the Process the remote agent is running in. "
        },
        {
            "name": "JDIPermission",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/JDIPermission.html",
            "description": "The JDIPermission class represents access rights to the VirtualMachineManager . "
        },
        {
            "name": "JEditorPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JEditorPane.html",
            "description": "A text component to edit various kinds of content. "
        },
        {
            "name": "JFileChooser",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JFileChooser.html",
            "description": "JFileChooser provides a simple mechanism for the user to choose a file. "
        },
        {
            "name": "JFormattedTextField",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JFormattedTextField.html",
            "description": "JFormattedTextField extends JTextField adding support for formatting arbitrary values, as well as retrieving a particular object once the user has edited the text. "
        },
        {
            "name": "JFormattedTextField.AbstractFormatter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatter.html",
            "description": "Instances of AbstractFormatter are used by JFormattedTextField to handle the conversion both from an Object to a String, and back from a String to an Object. "
        },
        {
            "name": "JFormattedTextField.AbstractFormatterFactory",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatterFactory.html",
            "description": "Instances of AbstractFormatterFactory are used by JFormattedTextField to obtain instances of AbstractFormatter which in turn are used to format values. "
        },
        {
            "name": "JFrame",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JFrame.html",
            "description": "An extended version of java.awt.Frame that adds support for the JFC/Swing component architecture. "
        },
        {
            "name": "JInternalFrame",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JInternalFrame.html",
            "description": "A lightweight object that provides many of the features of a native frame, including dragging, closing, becoming an icon, resizing, title display, and support for a menu bar. "
        },
        {
            "name": "JInternalFrame.JDesktopIcon",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html",
            "description": "This component represents an iconified version of a JInternalFrame . "
        },
        {
            "name": "JLabel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JLabel.html",
            "description": "A display area for a short text string or an image, or both. "
        },
        {
            "name": "JLayer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JLayer.html",
            "description": "JLayer is a universal decorator for Swing components which enables you to implement various advanced painting effects as well as receive notifications of all AWTEvent s generated within its borders. "
        },
        {
            "name": "JLayeredPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JLayeredPane.html",
            "description": "JLayeredPane adds depth to a JFC/Swing container, allowing components to overlap each other when needed. "
        },
        {
            "name": "JList",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JList.html",
            "description": "A component that displays a list of objects and allows the user to select one or more items. "
        },
        {
            "name": "JList.DropLocation",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JList.DropLocation.html",
            "description": "A subclass of TransferHandler.DropLocation representing a drop location for a JList . "
        },
        {
            "name": "JMenu",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JMenu.html",
            "description": "An implementation of a menu -- a popup window containing JMenuItem s that is displayed when the user selects an item on the JMenuBar . "
        },
        {
            "name": "JMenuBar",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JMenuBar.html",
            "description": "An implementation of a menu bar. "
        },
        {
            "name": "JMenuItem",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JMenuItem.html",
            "description": "An implementation of an item in a menu. "
        },
        {
            "name": "JMException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/JMException.html",
            "description": "Exceptions thrown by JMX implementations. "
        },
        {
            "name": "JMRuntimeException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/JMRuntimeException.html",
            "description": "Runtime exceptions emitted by JMX implementations. "
        },
        {
            "name": "JMX",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/JMX.html",
            "description": "Static methods from the JMX API. "
        },
        {
            "name": "JMXAddressable",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXAddressable.html",
            "description": "Implemented by objects that can have a JMXServiceURL address. "
        },
        {
            "name": "JMXAuthenticator",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXAuthenticator.html",
            "description": "Interface to define how remote credentials are converted into a JAAS Subject. "
        },
        {
            "name": "JMXConnectionNotification",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html",
            "description": "Notification emitted when a client connection is opened or closed or when notifications are lost. "
        },
        {
            "name": "JMXConnector",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnector.html",
            "description": "The client end of a JMX API connector. "
        },
        {
            "name": "JMXConnectorFactory",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorFactory.html",
            "description": "Factory to create JMX API connector clients. "
        },
        {
            "name": "JMXConnectorProvider",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorProvider.html",
            "description": "A provider for creating JMX API connector clients using a given protocol. "
        },
        {
            "name": "JMXConnectorServer",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorServer.html",
            "description": "Superclass of every connector server. "
        },
        {
            "name": "JMXConnectorServerFactory",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorServerFactory.html",
            "description": "Factory to create JMX API connector servers. "
        },
        {
            "name": "JMXConnectorServerMBean",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html",
            "description": "MBean interface for connector servers. "
        },
        {
            "name": "JMXConnectorServerProvider",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXConnectorServerProvider.html",
            "description": "A provider for creating JMX API connector servers using a given protocol. "
        },
        {
            "name": "JMXPrincipal",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXPrincipal.html",
            "description": "The identity of a remote client of the JMX Remote API. "
        },
        {
            "name": "JMXProviderException",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXProviderException.html",
            "description": "Exception thrown by JMXConnectorFactory and JMXConnectorServerFactory when a provider exists for the required protocol but cannot be used for some reason. "
        },
        {
            "name": "JMXServerErrorException",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXServerErrorException.html",
            "description": "Exception thrown as the result of a remote MBeanServer method invocation when an Error is thrown while processing the invocation in the remote MBean server. "
        },
        {
            "name": "JMXServiceURL",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/JMXServiceURL.html",
            "description": "The address of a JMX API connector server. "
        },
        {
            "name": "JndiLoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/JndiLoginModule.html",
            "description": "The module prompts for a username and password and then verifies the password against the password stored in a directory service configured under JNDI. "
        },
        {
            "name": "JobAttributes",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.html",
            "description": "A set of attributes which control a print job. "
        },
        {
            "name": "JobAttributes.DefaultSelectionType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.DefaultSelectionType.html",
            "description": "A type-safe enumeration of possible default selection states. "
        },
        {
            "name": "JobAttributes.DestinationType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.DestinationType.html",
            "description": "A type-safe enumeration of possible job destinations. "
        },
        {
            "name": "JobAttributes.DialogType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.DialogType.html",
            "description": "A type-safe enumeration of possible dialogs to display to the user. "
        },
        {
            "name": "JobAttributes.MultipleDocumentHandlingType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.MultipleDocumentHandlingType.html",
            "description": "A type-safe enumeration of possible multiple copy handling states. "
        },
        {
            "name": "JobAttributes.SidesType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/JobAttributes.SidesType.html",
            "description": "A type-safe enumeration of possible multi-page impositions. "
        },
        {
            "name": "JobHoldUntil",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobHoldUntil.html",
            "description": "Class JobHoldUntil is a printing attribute class, a date-time attribute, that specifies the exact date and time at which the job must become a candidate for printing. "
        },
        {
            "name": "JobImpressions",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobImpressions.html",
            "description": "Class JobImpressions is an integer valued printing attribute class that specifies the total size in number of impressions of the document(s) being submitted. "
        },
        {
            "name": "JobImpressionsCompleted",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobImpressionsCompleted.html",
            "description": "Class JobImpressionsCompleted is an integer valued printing attribute class that specifies the number of impressions completed for the job so far. "
        },
        {
            "name": "JobImpressionsSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobImpressionsSupported.html",
            "description": "Class JobImpressionsSupported is a printing attribute class, a set of integers, that gives the supported values for a JobImpressions attribute. "
        },
        {
            "name": "JobKOctets",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobKOctets.html",
            "description": "Class JobKOctets is an integer valued printing attribute class that specifies the total size of the document(s) in K octets, i.e., in units of 1024 octets requested to be processed in the job. "
        },
        {
            "name": "JobKOctetsProcessed",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobKOctetsProcessed.html",
            "description": "Class JobKOctetsProcessed is an integer valued printing attribute class that specifies the total number of print data octets processed so far in K octets, i.e., in units of 1024 octets. "
        },
        {
            "name": "JobKOctetsSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobKOctetsSupported.html",
            "description": "Class JobKOctetsSupported is a printing attribute class, a set of integers, that gives the supported values for a JobKOctets attribute. "
        },
        {
            "name": "JobMediaSheets",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobMediaSheets.html",
            "description": "Class JobMediaSheets is an integer valued printing attribute class that specifies the total number of media sheets to be produced for this job. "
        },
        {
            "name": "JobMediaSheetsCompleted",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobMediaSheetsCompleted.html",
            "description": "Class JobMediaSheetsCompleted is an integer valued printing attribute class that specifies the number of media sheets which have completed marking and stacking for the entire job so far, whether those sheets have been processed on one side or on both. "
        },
        {
            "name": "JobMediaSheetsSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobMediaSheetsSupported.html",
            "description": "Class JobMediaSheetsSupported is a printing attribute class, a set of integers, that gives the supported values for a JobMediaSheets attribute. "
        },
        {
            "name": "JobMessageFromOperator",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobMessageFromOperator.html",
            "description": "Class JobMessageFromOperator is a printing attribute class, a text attribute, that provides a message from an operator, system administrator, or \"intelligent\" process to indicate to the end user the reasons for modification or other management action taken on a job. "
        },
        {
            "name": "JobName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobName.html",
            "description": "Class JobName is a printing attribute class, a text attribute, that specifies the name of a print job. "
        },
        {
            "name": "JobOriginatingUserName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobOriginatingUserName.html",
            "description": "Class JobOriginatingUserName is a printing attribute class, a text attribute, that contains the name of the end user that submitted the print job. "
        },
        {
            "name": "JobPriority",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobPriority.html",
            "description": "Class JobPriority is an integer valued printing attribute class that specifies a print job's priority. "
        },
        {
            "name": "JobPrioritySupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobPrioritySupported.html",
            "description": "Class JobPrioritySupported is an integer valued printing attribute class that specifies whether a Print Service instance supports the JobPriority attribute and the number of different job priority levels supported. "
        },
        {
            "name": "JobSheets",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobSheets.html",
            "description": "Class JobSheets is a printing attribute class, an enumeration, that determines which job start and end sheets, if any, must be printed with a job. "
        },
        {
            "name": "JobState",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobState.html",
            "description": "JobState is a printing attribute class, an enumeration, that identifies the current state of a print job. "
        },
        {
            "name": "JobStateReason",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobStateReason.html",
            "description": "Class JobStateReason is a printing attribute class, an enumeration, that provides additional information about the job's current state, i.e., information that augments the value of the job's JobState attribute. "
        },
        {
            "name": "JobStateReasons",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/JobStateReasons.html",
            "description": "Class JobStateReasons is a printing attribute class, a set of enumeration values, that provides additional information about the job's current state, i.e., information that augments the value of the job's JobState attribute. "
        },
        {
            "name": "Joinable",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html",
            "description": "1.0 Background "
        },
        {
            "name": "JoinRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/JoinRowSet.html",
            "description": "The JoinRowSet interface provides a mechanism for combining related data from different RowSet objects into one JoinRowSet object, which represents an SQL JOIN . "
        },
        {
            "name": "JOptionPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JOptionPane.html",
            "description": "JOptionPane makes it easy to pop up a standard dialog box that prompts users for a value or informs them of something. "
        },
        {
            "name": "JPanel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JPanel.html",
            "description": "JPanel is a generic lightweight container. "
        },
        {
            "name": "JPasswordField",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JPasswordField.html",
            "description": "JPasswordField is a lightweight component that allows the editing of a single line of text where the view indicates something was typed, but does not show the original characters. "
        },
        {
            "name": "JPEGHuffmanTable",
            "package": "javax.imageio.plugins.jpeg",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGHuffmanTable.html",
            "description": "A class encapsulating a single JPEG Huffman table. "
        },
        {
            "name": "JPEGImageReadParam",
            "package": "javax.imageio.plugins.jpeg",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html",
            "description": "This class adds the ability to set JPEG quantization and Huffman tables when using the built-in JPEG reader plug-in. "
        },
        {
            "name": "JPEGImageWriteParam",
            "package": "javax.imageio.plugins.jpeg",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html",
            "description": "This class adds the ability to set JPEG quantization and Huffman tables when using the built-in JPEG writer plug-in, and to request that optimized Huffman tables be computed for an image. "
        },
        {
            "name": "JPEGQTable",
            "package": "javax.imageio.plugins.jpeg",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGQTable.html",
            "description": "A class encapsulating a single JPEG quantization table. "
        },
        {
            "name": "JPopupMenu",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JPopupMenu.html",
            "description": "An implementation of a popup menu -- a small window that pops up and displays a series of choices. "
        },
        {
            "name": "JPopupMenu.Separator",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JPopupMenu.Separator.html",
            "description": "A popup menu-specific separator. "
        },
        {
            "name": "JProgressBar",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JProgressBar.html",
            "description": "A component that visually displays the progress of some task. "
        },
        {
            "name": "JRadioButton",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JRadioButton.html",
            "description": "An implementation of a radio button -- an item that can be selected or deselected, and which displays its state to the user. "
        },
        {
            "name": "JRadioButtonMenuItem",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JRadioButtonMenuItem.html",
            "description": "An implementation of a radio button menu item. "
        },
        {
            "name": "JRootPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JRootPane.html",
            "description": "A lightweight container used behind the scenes by JFrame , JDialog , JWindow , JApplet , and JInternalFrame . "
        },
        {
            "name": "JScrollBar",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JScrollBar.html",
            "description": "An implementation of a scrollbar. "
        },
        {
            "name": "JScrollPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JScrollPane.html",
            "description": "Provides a scrollable view of a lightweight component. "
        },
        {
            "name": "JSeparator",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSeparator.html",
            "description": "JSeparator provides a general purpose component for implementing divider lines - most commonly used as a divider between menu items that breaks them up into logical groupings. "
        },
        {
            "name": "JSException",
            "package": "netscape.javascript",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jsobject/netscape/javascript/JSException.html",
            "description": "Thrown when an exception is raised in the JavaScript engine. "
        },
        {
            "name": "JShell",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/JShell.html",
            "description": "The JShell evaluation state engine. "
        },
        {
            "name": "JShell.Builder",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/JShell.Builder.html",
            "description": "Builder for JShell instances. "
        },
        {
            "name": "JShellException",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/JShellException.html",
            "description": "The superclass of JShell generated exceptions "
        },
        {
            "name": "JSlider",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSlider.html",
            "description": "A component that lets the user graphically select a value by sliding a knob within a bounded interval. "
        },
        {
            "name": "JSObject",
            "package": "netscape.javascript",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jsobject/netscape/javascript/JSObject.html",
            "description": "Allows Java code to manipulate JavaScript objects. "
        },
        {
            "name": "JSpinner",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSpinner.html",
            "description": "A single line input field that lets the user select a number or an object value from an ordered sequence. "
        },
        {
            "name": "JSpinner.DateEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSpinner.DateEditor.html",
            "description": "An editor for a JSpinner whose model is a SpinnerDateModel . "
        },
        {
            "name": "JSpinner.DefaultEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSpinner.DefaultEditor.html",
            "description": "A simple base class for more specialized editors that displays a read-only view of the model's current value with a JFormattedTextField . "
        },
        {
            "name": "JSpinner.ListEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSpinner.ListEditor.html",
            "description": "An editor for a JSpinner whose model is a SpinnerListModel . "
        },
        {
            "name": "JSpinner.NumberEditor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSpinner.NumberEditor.html",
            "description": "An editor for a JSpinner whose model is a SpinnerNumberModel . "
        },
        {
            "name": "JSplitPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JSplitPane.html",
            "description": "JSplitPane is used to divide two (and only two) Component s. "
        },
        {
            "name": "JTabbedPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTabbedPane.html",
            "description": "A component that lets the user switch between a group of components by clicking on a tab with a given title and/or icon. "
        },
        {
            "name": "JTable",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTable.html",
            "description": "The JTable is used to display and edit regular two-dimensional tables of cells. "
        },
        {
            "name": "JTable.DropLocation",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTable.DropLocation.html",
            "description": "A subclass of TransferHandler.DropLocation representing a drop location for a JTable . "
        },
        {
            "name": "JTable.PrintMode",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTable.PrintMode.html",
            "description": "Printing modes, used in printing JTable s. "
        },
        {
            "name": "JTableHeader",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/JTableHeader.html",
            "description": "This is the object which manages the header of the JTable . "
        },
        {
            "name": "JTextArea",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTextArea.html",
            "description": "A JTextArea is a multi-line area that displays plain text. "
        },
        {
            "name": "JTextComponent",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/JTextComponent.html",
            "description": "JTextComponent is the base class for swing text components. "
        },
        {
            "name": "JTextComponent.DropLocation",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/JTextComponent.DropLocation.html",
            "description": "Represents a drop location for JTextComponent s. "
        },
        {
            "name": "JTextComponent.KeyBinding",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/JTextComponent.KeyBinding.html",
            "description": "Binding record for creating key bindings. "
        },
        {
            "name": "JTextField",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTextField.html",
            "description": "JTextField is a lightweight component that allows the editing of a single line of text. "
        },
        {
            "name": "JTextPane",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTextPane.html",
            "description": "A text component that can be marked up with attributes that are represented graphically. "
        },
        {
            "name": "JToggleButton",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JToggleButton.html",
            "description": "An implementation of a two-state button. "
        },
        {
            "name": "JToggleButton.ToggleButtonModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JToggleButton.ToggleButtonModel.html",
            "description": "The ToggleButton model "
        },
        {
            "name": "JToolBar",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JToolBar.html",
            "description": "JToolBar provides a component that is useful for displaying commonly used Action s or controls. "
        },
        {
            "name": "JToolBar.Separator",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JToolBar.Separator.html",
            "description": "A toolbar-specific separator. "
        },
        {
            "name": "JToolTip",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JToolTip.html",
            "description": "Used to display a \"Tip\" for a Component. "
        },
        {
            "name": "JTree",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTree.html",
            "description": "A control that displays a set of hierarchical data as an outline. "
        },
        {
            "name": "JTree.DropLocation",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTree.DropLocation.html",
            "description": "A subclass of TransferHandler.DropLocation representing a drop location for a JTree . "
        },
        {
            "name": "JTree.DynamicUtilTreeNode",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTree.DynamicUtilTreeNode.html",
            "description": "DynamicUtilTreeNode can wrap vectors/hashtables/arrays/strings and create the appropriate children tree nodes as necessary. "
        },
        {
            "name": "JTree.EmptySelectionModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JTree.EmptySelectionModel.html",
            "description": "EmptySelectionModel is a TreeSelectionModel that does not allow anything to be selected. "
        },
        {
            "name": "JulianFields",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/JulianFields.html",
            "description": "A set of date fields that provide access to Julian Days. "
        },
        {
            "name": "JViewport",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JViewport.html",
            "description": "The \"viewport\" or \"porthole\" through which you see the underlying information. "
        },
        {
            "name": "JWindow",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/JWindow.html",
            "description": "A JWindow is a container that can be displayed anywhere on the user's desktop. "
        },
        {
            "name": "KerberosCredMessage",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosCredMessage.html",
            "description": "This class encapsulates a Kerberos 5 KRB_CRED message which can be used to send Kerberos credentials from one principal to another. "
        },
        {
            "name": "KerberosKey",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosKey.html",
            "description": "This class encapsulates a long term secret key for a Kerberos principal. "
        },
        {
            "name": "KerberosPrincipal",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosPrincipal.html",
            "description": "This class encapsulates a Kerberos principal. "
        },
        {
            "name": "KerberosTicket",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosTicket.html",
            "description": "This class encapsulates a Kerberos ticket and associated information as viewed from the client's point of view. "
        },
        {
            "name": "Kernel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/Kernel.html",
            "description": "The Kernel class defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation. "
        },
        {
            "name": "Key",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Key.html",
            "description": "The Key interface is the top-level interface for all keys. "
        },
        {
            "name": "KeyAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/KeyAdapter.html",
            "description": "An abstract adapter class for receiving keyboard events. "
        },
        {
            "name": "KeyAgreement",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/KeyAgreement.html",
            "description": "This class provides the functionality of a key agreement (or key exchange) protocol. "
        },
        {
            "name": "KeyAgreementSpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/KeyAgreementSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyAgreement class. "
        },
        {
            "name": "KeyAlreadyExistsException",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/KeyAlreadyExistsException.html",
            "description": "This runtime exception is thrown to indicate that the index of a row to be added to a tabular data instance is already used to refer to another row in this tabular data instance. "
        },
        {
            "name": "KeyboardFocusManager",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/KeyboardFocusManager.html",
            "description": "The KeyboardFocusManager is responsible for managing the active and focused Windows, and the current focus owner. "
        },
        {
            "name": "KeyEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/KeyEvent.html",
            "description": "An event which indicates that a keystroke occurred in a component. "
        },
        {
            "name": "KeyEventDispatcher",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/KeyEventDispatcher.html",
            "description": "A KeyEventDispatcher cooperates with the current KeyboardFocusManager in the targeting and dispatching of all KeyEvents. "
        },
        {
            "name": "KeyEventPostProcessor",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/KeyEventPostProcessor.html",
            "description": "A KeyEventPostProcessor cooperates with the current KeyboardFocusManager in the final resolution of all unconsumed KeyEvents. "
        },
        {
            "name": "KeyException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyException.html",
            "description": "This is the basic key exception. "
        },
        {
            "name": "KeyFactory",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyFactory.html",
            "description": "Key factories are used to convert keys (opaque cryptographic keys of type Key ) into key specifications (transparent representations of the underlying key material), and vice versa. "
        },
        {
            "name": "KeyFactorySpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyFactorySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyFactory class. "
        },
        {
            "name": "KeyGenerator",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/KeyGenerator.html",
            "description": "This class provides the functionality of a secret (symmetric) key generator. "
        },
        {
            "name": "KeyGeneratorSpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/KeyGeneratorSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyGenerator class. "
        },
        {
            "name": "KeyInfo",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/KeyInfo.html",
            "description": "A representation of the XML KeyInfo element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "KeyInfoFactory",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html",
            "description": "A factory for creating KeyInfo objects from scratch or for unmarshalling a KeyInfo object from a corresponding XML representation. "
        },
        {
            "name": "KeyListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/KeyListener.html",
            "description": "The listener interface for receiving keyboard events (keystrokes). "
        },
        {
            "name": "KeyManagementException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyManagementException.html",
            "description": "This is the general key management exception for all operations dealing with key management. "
        },
        {
            "name": "KeyManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/KeyManager.html",
            "description": "This is the base interface for JSSE key managers. "
        },
        {
            "name": "KeyManagerFactory",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/KeyManagerFactory.html",
            "description": "This class acts as a factory for key managers based on a source of key material. "
        },
        {
            "name": "KeyManagerFactorySpi",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/KeyManagerFactorySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyManagerFactory class. "
        },
        {
            "name": "Keymap",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Keymap.html",
            "description": "A collection of bindings of KeyStrokes to actions. "
        },
        {
            "name": "KeyName",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/KeyName.html",
            "description": "A representation of the XML KeyName element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "KeyPair",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyPair.html",
            "description": "This class is a simple holder for a key pair (a public key and a private key). "
        },
        {
            "name": "KeyPairGenerator",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyPairGenerator.html",
            "description": "The KeyPairGenerator class is used to generate pairs of public and private keys. "
        },
        {
            "name": "KeyPairGeneratorSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyPairGeneratorSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyPairGenerator class, which is used to generate pairs of public and private keys. "
        },
        {
            "name": "KeyRep",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyRep.html",
            "description": "Standardized representation for serialized Key objects. "
        },
        {
            "name": "KeyRep.Type",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyRep.Type.html",
            "description": "Key type. "
        },
        {
            "name": "KeySelector",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/KeySelector.html",
            "description": "A selector that finds and returns a key using the data contained in a KeyInfo object. "
        },
        {
            "name": "KeySelector.Purpose",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/KeySelector.Purpose.html",
            "description": "The purpose of the key that is to be selected. "
        },
        {
            "name": "KeySelectorException",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/KeySelectorException.html",
            "description": "Indicates an exceptional condition thrown by a KeySelector . "
        },
        {
            "name": "KeySelectorResult",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/KeySelectorResult.html",
            "description": "The result returned by the KeySelector.select method. "
        },
        {
            "name": "KeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/KeySpec.html",
            "description": "A (transparent) specification of the key material that constitutes a cryptographic key. "
        },
        {
            "name": "KeyStore",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.html",
            "description": "This class represents a storage facility for cryptographic keys and certificates. "
        },
        {
            "name": "KeyStore.Builder",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.Builder.html",
            "description": "A description of a to-be-instantiated KeyStore object. "
        },
        {
            "name": "KeyStore.CallbackHandlerProtection",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.CallbackHandlerProtection.html",
            "description": "A ProtectionParameter encapsulating a CallbackHandler. "
        },
        {
            "name": "KeyStore.Entry",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.Entry.html",
            "description": "A marker interface for KeyStore entry types. "
        },
        {
            "name": "KeyStore.Entry.Attribute",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.Entry.Attribute.html",
            "description": "An attribute associated with a keystore entry. "
        },
        {
            "name": "KeyStore.LoadStoreParameter",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.LoadStoreParameter.html",
            "description": "A marker interface for KeyStore load and store parameters. "
        },
        {
            "name": "KeyStore.PasswordProtection",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.PasswordProtection.html",
            "description": "A password-based implementation of ProtectionParameter . "
        },
        {
            "name": "KeyStore.PrivateKeyEntry",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.PrivateKeyEntry.html",
            "description": "A KeyStore entry that holds a PrivateKey and corresponding certificate chain. "
        },
        {
            "name": "KeyStore.ProtectionParameter",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.ProtectionParameter.html",
            "description": "A marker interface for keystore protection parameters. "
        },
        {
            "name": "KeyStore.SecretKeyEntry",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.SecretKeyEntry.html",
            "description": "A KeyStore entry that holds a SecretKey . "
        },
        {
            "name": "KeyStore.TrustedCertificateEntry",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStore.TrustedCertificateEntry.html",
            "description": "A KeyStore entry that holds a trusted Certificate . "
        },
        {
            "name": "KeyStoreBuilderParameters",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/KeyStoreBuilderParameters.html",
            "description": "A parameters object for X509KeyManagers that encapsulates a List of KeyStore.Builders. "
        },
        {
            "name": "KeyStoreException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStoreException.html",
            "description": "This is the generic KeyStore exception. "
        },
        {
            "name": "KeyStoreLoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/KeyStoreLoginModule.html",
            "description": "Provides a JAAS login module that prompts for a key store alias and populates the subject with the alias's principal and credentials. "
        },
        {
            "name": "KeyStoreSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/KeyStoreSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the KeyStore class. "
        },
        {
            "name": "KeyStroke",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/KeyStroke.html",
            "description": "A KeyStroke represents a key action on the keyboard, or equivalent input device. "
        },
        {
            "name": "KeyTab",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/KeyTab.html",
            "description": "This class encapsulates a keytab file. "
        },
        {
            "name": "KeyValue",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/KeyValue.html",
            "description": "A representation of the XML KeyValue element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "Krb5LoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/Krb5LoginModule.html",
            "description": "This LoginModule authenticates users using Kerberos protocols. "
        },
        {
            "name": "Label",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Label.html",
            "description": "A Label object is a component for placing text in a container. "
        },
        {
            "name": "Label",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Label.html",
            "description": "Annotation that sets a human-readable name for an element (for example, \"Maximum Throughput\" ). "
        },
        {
            "name": "LabeledStatementTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/LabeledStatementTree.html",
            "description": "A tree node for a labeled statement. "
        },
        {
            "name": "LabelUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/LabelUI.html",
            "description": "Pluggable look and feel interface for JLabel. "
        },
        {
            "name": "LabelView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/LabelView.html",
            "description": "A LabelView is a styled chunk of text that represents a view mapped over an element in the text model. "
        },
        {
            "name": "LambdaConversionException",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/LambdaConversionException.html",
            "description": "LambdaConversionException "
        },
        {
            "name": "LambdaExpressionTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/LambdaExpressionTree.html",
            "description": "A tree node for a lambda expression. "
        },
        {
            "name": "LambdaExpressionTree.BodyKind",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/LambdaExpressionTree.BodyKind.html",
            "description": "Lambda expressions come in two forms:   expression lambdas, whose body is an expression, and  statement lambdas, whose body is a block "
        },
        {
            "name": "LambdaMetafactory",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/LambdaMetafactory.html",
            "description": "Methods to facilitate the creation of simple \"function objects\" that implement one or more interfaces by delegation to a provided MethodHandle , possibly after type adaptation and partial evaluation of arguments. "
        },
        {
            "name": "LanguageCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/LanguageCallback.html",
            "description": "Underlying security services instantiate and pass a LanguageCallback to the handle method of a CallbackHandler to retrieve the Locale used for localizing text. "
        },
        {
            "name": "LaunchingConnector",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/LaunchingConnector.html",
            "description": "A connector which can launch a target VM before connecting to it. "
        },
        {
            "name": "LayeredHighlighter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/LayeredHighlighter.html",
            "description": ""
        },
        {
            "name": "LayeredHighlighter.LayerPainter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/LayeredHighlighter.LayerPainter.html",
            "description": "Layered highlight renderer. "
        },
        {
            "name": "LayerInstantiationException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/LayerInstantiationException.html",
            "description": "Thrown when creating a module layer fails. "
        },
        {
            "name": "LayerUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/LayerUI.html",
            "description": "The base class for all JLayer 's UI delegates. "
        },
        {
            "name": "LayoutFocusTraversalPolicy",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/LayoutFocusTraversalPolicy.html",
            "description": "A SortingFocusTraversalPolicy which sorts Components based on their size, position, and orientation. "
        },
        {
            "name": "LayoutManager",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/LayoutManager.html",
            "description": "Defines the interface for classes that know how to lay out Container s. "
        },
        {
            "name": "LayoutManager2",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/LayoutManager2.html",
            "description": "Defines an interface for classes that know how to layout Containers based on a layout constraints object. "
        },
        {
            "name": "LayoutPath",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/LayoutPath.html",
            "description": "LayoutPath provides a mapping between locations relative to the baseline and points in user space. "
        },
        {
            "name": "LayoutQueue",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/LayoutQueue.html",
            "description": "A queue of text layout tasks. "
        },
        {
            "name": "LayoutStyle",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/LayoutStyle.html",
            "description": "LayoutStyle provides information about how to position components. "
        },
        {
            "name": "LayoutStyle.ComponentPlacement",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/LayoutStyle.ComponentPlacement.html",
            "description": "ComponentPlacement is an enumeration of the possible ways two components can be placed relative to each other. "
        },
        {
            "name": "LDAPCertStoreParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/LDAPCertStoreParameters.html",
            "description": "Parameters used as input for the LDAP CertStore algorithm. "
        },
        {
            "name": "LdapContext",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/LdapContext.html",
            "description": "This interface represents a context in which you can perform operations with LDAPv3-style controls and perform LDAPv3-style extended operations. "
        },
        {
            "name": "LdapDnsProvider",
            "package": "javax.naming.ldap.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/spi/LdapDnsProvider.html",
            "description": "Service-provider class for DNS lookups when performing LDAP operations. "
        },
        {
            "name": "LdapDnsProviderResult",
            "package": "javax.naming.ldap.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/spi/LdapDnsProviderResult.html",
            "description": "The result of a DNS lookup for an LDAP URL. "
        },
        {
            "name": "LdapLoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/LdapLoginModule.html",
            "description": "This LoginModule performs LDAP-based authentication. "
        },
        {
            "name": "LdapName",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/LdapName.html",
            "description": "This class represents a distinguished name as specified by RFC 2253 . "
        },
        {
            "name": "LdapPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/LdapPrincipal.html",
            "description": "A principal identified by a distinguished name as specified by RFC 2253 . "
        },
        {
            "name": "LdapReferralException",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/LdapReferralException.html",
            "description": "This abstract class is used to represent an LDAP referral exception. "
        },
        {
            "name": "Lease",
            "package": "java.rmi.dgc",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/dgc/Lease.html",
            "description": "A lease contains a unique VM identifier and a lease duration. "
        },
        {
            "name": "Level",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/Level.html",
            "description": "The Level class defines a set of standard logging levels that can be used to control logging output. "
        },
        {
            "name": "LexicalHandler",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/LexicalHandler.html",
            "description": "SAX2 extension handler for lexical events. "
        },
        {
            "name": "LimitExceededException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/LimitExceededException.html",
            "description": "This exception is thrown when a method terminates abnormally due to a user or system specified limit. "
        },
        {
            "name": "Line",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Line.html",
            "description": "The Line interface represents a mono or multi-channel audio feed. "
        },
        {
            "name": "Line.Info",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Line.Info.html",
            "description": "A Line.Info object contains information about a line. "
        },
        {
            "name": "Line2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Line2D.html",
            "description": "This Line2D represents a line segment in (x,y) coordinate space. "
        },
        {
            "name": "Line2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Line2D.Double.html",
            "description": "A line segment specified with double coordinates. "
        },
        {
            "name": "Line2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Line2D.Float.html",
            "description": "A line segment specified with float coordinates. "
        },
        {
            "name": "LinearGradientPaint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/LinearGradientPaint.html",
            "description": "The LinearGradientPaint class provides a way to fill a Shape with a linear color gradient pattern. "
        },
        {
            "name": "LineBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/LineBorder.html",
            "description": "A class which implements a line border of arbitrary thickness and of a single color. "
        },
        {
            "name": "LineBreakMeasurer",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html",
            "description": "The LineBreakMeasurer class allows styled text to be broken into lines (or segments) that fit within a particular visual advance. "
        },
        {
            "name": "LineEvent",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/LineEvent.html",
            "description": "The LineEvent class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. "
        },
        {
            "name": "LineEvent.Type",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/LineEvent.Type.html",
            "description": "The LineEvent.Type inner class identifies what kind of event occurred on a line. "
        },
        {
            "name": "LineListener",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/LineListener.html",
            "description": "Instances of classes that implement the LineListener interface can register to receive events when a line's status changes. "
        },
        {
            "name": "LineMap",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/LineMap.html",
            "description": "Provides methods to convert between character positions and line numbers for a compilation unit. "
        },
        {
            "name": "LineMetrics",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/LineMetrics.html",
            "description": "The LineMetrics class allows access to the metrics needed to layout characters along a line and to layout of a set of lines. "
        },
        {
            "name": "LineNumberInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/LineNumberInputStream.html",
            "description": "This class incorrectly assumes that bytes adequately represent             characters. "
        },
        {
            "name": "LineNumberReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/LineNumberReader.html",
            "description": "A buffered character-input stream that keeps track of line numbers. "
        },
        {
            "name": "LineUnavailableException",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/LineUnavailableException.html",
            "description": "A LineUnavailableException is an exception indicating that a line cannot be opened because it is unavailable. "
        },
        {
            "name": "LinkageError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/LinkageError.html",
            "description": "Subclasses of LinkageError indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class. "
        },
        {
            "name": "LinkedBlockingDeque",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/LinkedBlockingDeque.html",
            "description": "An optionally-bounded blocking deque based on linked nodes. "
        },
        {
            "name": "LinkedBlockingQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/LinkedBlockingQueue.html",
            "description": "An optionally-bounded blocking queue based on linked nodes. "
        },
        {
            "name": "LinkedHashMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/LinkedHashMap.html",
            "description": "Hash table and linked list implementation of the Map interface, with predictable iteration order. "
        },
        {
            "name": "LinkedHashSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/LinkedHashSet.html",
            "description": "Hash table and linked list implementation of the Set interface, with predictable iteration order. "
        },
        {
            "name": "LinkedList",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/LinkedList.html",
            "description": "Doubly-linked list implementation of the List and Deque interfaces. "
        },
        {
            "name": "LinkedTransferQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/LinkedTransferQueue.html",
            "description": "An unbounded TransferQueue based on linked nodes. "
        },
        {
            "name": "LinkerServices",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkerServices.html",
            "description": "Interface for services provided to GuardingDynamicLinker instances by the DynamicLinker that owns them. "
        },
        {
            "name": "LinkException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/LinkException.html",
            "description": "This exception is used to describe problems encountered while resolving links. "
        },
        {
            "name": "LinkLoopException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/LinkLoopException.html",
            "description": "This exception is thrown when a loop was detected while attempting to resolve a link, or an implementation specific limit on link counts has been reached. "
        },
        {
            "name": "LinkOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/LinkOption.html",
            "description": "Defines the options as to how symbolic links are handled. "
        },
        {
            "name": "LinkPermission",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/LinkPermission.html",
            "description": "The Permission class for link creation operations. "
        },
        {
            "name": "LinkRef",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/LinkRef.html",
            "description": "This class represents a Reference whose contents is a name, called the link name, that is bound to an atomic name in a context. "
        },
        {
            "name": "LinkRequest",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkRequest.html",
            "description": "Represents a request to link a particular invocation at a particular call site. "
        },
        {
            "name": "LinkStyle",
            "package": "org.w3c.dom.stylesheets",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/stylesheets/LinkStyle.html",
            "description": "The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document. "
        },
        {
            "name": "LinkTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/LinkTree.html",
            "description": "A tree node for an @link or @linkplain inline tag. "
        },
        {
            "name": "List",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/List.html",
            "description": "The List component presents the user with a scrolling list of text items. "
        },
        {
            "name": "List",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/List.html",
            "description": "An ordered collection (also known as a sequence ). "
        },
        {
            "name": "ListCellRenderer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ListCellRenderer.html",
            "description": "Identifies components that can be used as \"rubber stamps\" to paint the cells in a JList. "
        },
        {
            "name": "ListDataEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ListDataEvent.html",
            "description": "Defines an event that encapsulates changes to a list. "
        },
        {
            "name": "ListDataListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ListDataListener.html",
            "description": "ListDataListener "
        },
        {
            "name": "ListenerNotFoundException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ListenerNotFoundException.html",
            "description": "The specified MBean listener does not exist in the repository. "
        },
        {
            "name": "ListeningConnector",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/ListeningConnector.html",
            "description": "A connector which listens for a connection initiated by a target VM. "
        },
        {
            "name": "ListIterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ListIterator.html",
            "description": "An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. "
        },
        {
            "name": "ListModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ListModel.html",
            "description": "This interface defines the methods components like JList use to get the value of each cell in a list and the length of the list. "
        },
        {
            "name": "ListResourceBundle",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ListResourceBundle.html",
            "description": "ListResourceBundle is an abstract subclass of ResourceBundle that manages resources for a locale in a convenient and easy to use list. "
        },
        {
            "name": "ListSelectionEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ListSelectionEvent.html",
            "description": "An event that characterizes a change in selection. "
        },
        {
            "name": "ListSelectionListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/ListSelectionListener.html",
            "description": "The listener that's notified when a lists selection value changes. "
        },
        {
            "name": "ListSelectionModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ListSelectionModel.html",
            "description": "This interface represents the current state of the selection for any of the components that display a list of values with stable indices. "
        },
        {
            "name": "ListUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ListUI.html",
            "description": "The JList pluggable look and feel delegate. "
        },
        {
            "name": "ListView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/ListView.html",
            "description": "A view implementation to display an html list "
        },
        {
            "name": "LiteralTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/LiteralTree.html",
            "description": "A tree node for an @literal or @code inline tag. "
        },
        {
            "name": "LiteralTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/LiteralTree.html",
            "description": "A tree node for a literal expression. "
        },
        {
            "name": "LoaderDelegate",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/LoaderDelegate.html",
            "description": "This interface specifies the loading specific subset of ExecutionControl . "
        },
        {
            "name": "LoaderHandler",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/LoaderHandler.html",
            "description": "no replacement "
        },
        {
            "name": "LocalDate",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/LocalDate.html",
            "description": "A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03 . "
        },
        {
            "name": "LocalDateTime",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/LocalDateTime.html",
            "description": "A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30 . "
        },
        {
            "name": "Locale",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.html",
            "description": "A Locale object represents a specific geographical, political, or cultural region. "
        },
        {
            "name": "Locale.Builder",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.Builder.html",
            "description": "Builder is used to build instances of Locale from values configured by the setters. "
        },
        {
            "name": "Locale.Category",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.Category.html",
            "description": "Enum for locale categories. "
        },
        {
            "name": "Locale.FilteringMode",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.FilteringMode.html",
            "description": "This enum provides constants to select a filtering mode for locale matching. "
        },
        {
            "name": "Locale.IsoCountryCode",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.IsoCountryCode.html",
            "description": "Enum for specifying the type defined in ISO 3166. "
        },
        {
            "name": "Locale.LanguageRange",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Locale.LanguageRange.html",
            "description": "This class expresses a Language Range defined in RFC 4647 Matching of Language Tags . "
        },
        {
            "name": "LocaleNameProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/LocaleNameProvider.html",
            "description": "An abstract class for service providers that provide localized names for the Locale class. "
        },
        {
            "name": "LocaleServiceProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/LocaleServiceProvider.html",
            "description": "This is the super class of all the locale sensitive service provider interfaces (SPIs). "
        },
        {
            "name": "LocalExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/LocalExecutionControl.html",
            "description": "An implementation of ExecutionControl which executes in the same JVM as the JShell-core. "
        },
        {
            "name": "LocalExecutionControlProvider",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/LocalExecutionControlProvider.html",
            "description": "A provider of execution engines which run in the same process as JShell. "
        },
        {
            "name": "LocalTime",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/LocalTime.html",
            "description": "A time without a time-zone in the ISO-8601 calendar system, such as 10:15:30 . "
        },
        {
            "name": "LocalVariable",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/LocalVariable.html",
            "description": "A local variable in the target VM. "
        },
        {
            "name": "Locatable",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Locatable.html",
            "description": "A mirror that has a Location . "
        },
        {
            "name": "LocatableEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/LocatableEvent.html",
            "description": "Abstract superinterface of events which have both location and thread. "
        },
        {
            "name": "LocateRegistry",
            "package": "java.rmi.registry",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/registry/LocateRegistry.html",
            "description": "LocateRegistry is used to obtain a reference to a bootstrap remote object registry on a particular host (including the local host), or to create a remote object registry that accepts calls on a specific port. "
        },
        {
            "name": "Location",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Location.html",
            "description": "A point within the executing code of the target VM. "
        },
        {
            "name": "Location",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/Location.html",
            "description": "Provides information on the location of an event. "
        },
        {
            "name": "Locator",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/Locator.html",
            "description": "Interface for associating a SAX event with a document location. "
        },
        {
            "name": "Locator2",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/Locator2.html",
            "description": "SAX2 extension to augment the entity information provided through a Locator . "
        },
        {
            "name": "Locator2Impl",
            "package": "org.xml.sax.ext",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/ext/Locator2Impl.html",
            "description": "SAX2 extension helper for holding additional Entity information, implementing the Locator2 interface. "
        },
        {
            "name": "LocatorImpl",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/LocatorImpl.html",
            "description": "Provide an optional convenience implementation of Locator. "
        },
        {
            "name": "Lock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/Lock.html",
            "description": "Lock implementations provide more extensive locking operations than can be obtained using synchronized methods and statements. "
        },
        {
            "name": "LockInfo",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/LockInfo.html",
            "description": "Information about a lock . "
        },
        {
            "name": "LockSupport",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/LockSupport.html",
            "description": "Basic thread blocking primitives for creating locks and other synchronization classes. "
        },
        {
            "name": "Logger",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/Logger.html",
            "description": "A Logger object is used to log messages for a specific system or application component. "
        },
        {
            "name": "LoggingMXBean",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/LoggingMXBean.html",
            "description": "LoggingMXBean is no longer a platform MXBean and is replaced with PlatformLoggingMXBean . "
        },
        {
            "name": "LoggingPermission",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/LoggingPermission.html",
            "description": "The permission which the SecurityManager will check when code that is running with a SecurityManager calls one of the logging control methods (such as Logger.setLevel). "
        },
        {
            "name": "LoginContext",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/LoginContext.html",
            "description": "The LoginContext class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. "
        },
        {
            "name": "LoginException",
            "package": "javax.security.auth.login",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/login/LoginException.html",
            "description": "This is the basic login exception. "
        },
        {
            "name": "LoginModule",
            "package": "javax.security.auth.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/spi/LoginModule.html",
            "description": "Service-provider interface for authentication technology providers. "
        },
        {
            "name": "LogManager",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/LogManager.html",
            "description": "There is a single global LogManager object that is used to maintain a set of shared state about Loggers and log services. "
        },
        {
            "name": "LogRecord",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/LogRecord.html",
            "description": "LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers. "
        },
        {
            "name": "LogStream",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/LogStream.html",
            "description": "no replacement "
        },
        {
            "name": "Long",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Long.html",
            "description": "The Long class wraps a value of the primitive type long in an object. "
        },
        {
            "name": "LongAccumulator",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/LongAccumulator.html",
            "description": "One or more variables that together maintain a running long value updated using a supplied function. "
        },
        {
            "name": "LongAdder",
            "package": "java.util.concurrent.atomic",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/atomic/LongAdder.html",
            "description": "One or more variables that together maintain an initially zero long sum. "
        },
        {
            "name": "LongBinaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongBinaryOperator.html",
            "description": "Represents an operation upon two long -valued operands and producing a long -valued result. "
        },
        {
            "name": "LongBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/LongBuffer.html",
            "description": "A long buffer. "
        },
        {
            "name": "LongConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongConsumer.html",
            "description": "Represents an operation that accepts a single long -valued argument and returns no result. "
        },
        {
            "name": "LongFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongFunction.html",
            "description": "Represents a function that accepts a long-valued argument and produces a result. "
        },
        {
            "name": "LongPredicate",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongPredicate.html",
            "description": "Represents a predicate (boolean-valued function) of one long -valued argument. "
        },
        {
            "name": "LongStream",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/LongStream.html",
            "description": "A sequence of primitive long-valued elements supporting sequential and parallel aggregate operations. "
        },
        {
            "name": "LongStream.Builder",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/LongStream.Builder.html",
            "description": "A mutable builder for a LongStream . "
        },
        {
            "name": "LongSummaryStatistics",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/LongSummaryStatistics.html",
            "description": "A state object for collecting statistics such as count, min, max, sum, and average. "
        },
        {
            "name": "LongSupplier",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongSupplier.html",
            "description": "Represents a supplier of long -valued results. "
        },
        {
            "name": "LongToDoubleFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongToDoubleFunction.html",
            "description": "Represents a function that accepts a long-valued argument and produces a double-valued result. "
        },
        {
            "name": "LongToIntFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongToIntFunction.html",
            "description": "Represents a function that accepts a long-valued argument and produces an int-valued result. "
        },
        {
            "name": "LongType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/LongType.html",
            "description": "The type of all primitive long values accessed in the target VM. "
        },
        {
            "name": "LongUnaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/LongUnaryOperator.html",
            "description": "Represents an operation on a single long -valued operand that produces a long -valued result. "
        },
        {
            "name": "LongValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/LongValue.html",
            "description": "Provides access to a primitive long value in the target VM. "
        },
        {
            "name": "LookAndFeel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/LookAndFeel.html",
            "description": "LookAndFeel , as the name implies, encapsulates a look and feel. "
        },
        {
            "name": "Lookup",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/Lookup.html",
            "description": "A wrapper around MethodHandles.Lookup that masks checked exceptions. "
        },
        {
            "name": "LookupOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/LookupOp.html",
            "description": "This class implements a lookup operation from the source to the destination. "
        },
        {
            "name": "LookupTable",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/LookupTable.html",
            "description": "This abstract class defines a lookup table object. "
        },
        {
            "name": "LSException",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSException.html",
            "description": "Parser or write operations may throw an LSException if the processing is stopped. "
        },
        {
            "name": "LSInput",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSInput.html",
            "description": "This interface represents an input source for data. "
        },
        {
            "name": "LSLoadEvent",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSLoadEvent.html",
            "description": "This interface represents a load event object that signals the completion of a document load. "
        },
        {
            "name": "LSOutput",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSOutput.html",
            "description": "This interface represents an output destination for data. "
        },
        {
            "name": "LSParser",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSParser.html",
            "description": "An interface to an object that is able to build, or augment, a DOM tree from various input sources. "
        },
        {
            "name": "LSParserFilter",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html",
            "description": "LSParserFilter s provide applications the ability to examine nodes as they are being constructed while parsing. "
        },
        {
            "name": "LSProgressEvent",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSProgressEvent.html",
            "description": "This interface represents a progress event object that notifies the application about progress as a document is parsed. "
        },
        {
            "name": "LSResourceResolver",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSResourceResolver.html",
            "description": "LSResourceResolver provides a way for applications to redirect references to external resources. "
        },
        {
            "name": "LSSerializer",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSSerializer.html",
            "description": "A LSSerializer provides an API for serializing (writing) a DOM document out into XML. "
        },
        {
            "name": "LSSerializerFilter",
            "package": "org.w3c.dom.ls",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ls/LSSerializerFilter.html",
            "description": "LSSerializerFilter s provide applications the ability to examine nodes as they are being serialized and decide what nodes should be serialized or not. "
        },
        {
            "name": "Mac",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/Mac.html",
            "description": "This class provides the functionality of a \"Message Authentication Code\" (MAC) algorithm. "
        },
        {
            "name": "MacSpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/MacSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the Mac class. "
        },
        {
            "name": "Main",
            "package": "com.sun.tools.javac",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/tools/javac/Main.html",
            "description": "A legacy programmatic interface for the Java Programming Language compiler, javac. "
        },
        {
            "name": "MalformedInputException",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/MalformedInputException.html",
            "description": "Checked exception thrown when an input byte sequence is not legal for given charset, or an input character sequence is not a legal sixteen-bit Unicode sequence. "
        },
        {
            "name": "MalformedLinkException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/MalformedLinkException.html",
            "description": "This exception is thrown when a malformed link was encountered while resolving or constructing a link. "
        },
        {
            "name": "MalformedObjectNameException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MalformedObjectNameException.html",
            "description": "The format of the string does not correspond to a valid ObjectName. "
        },
        {
            "name": "MalformedParameterizedTypeException",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html",
            "description": "Thrown when a semantically malformed parameterized type is encountered by a reflective method that needs to instantiate it. "
        },
        {
            "name": "MalformedParametersException",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/MalformedParametersException.html",
            "description": "Thrown when the java.lang.reflect package attempts to read method parameters from a class file and determines that one or more parameters are malformed. "
        },
        {
            "name": "MalformedURLException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/MalformedURLException.html",
            "description": "Thrown to indicate that a malformed URL has occurred. "
        },
        {
            "name": "ManagementFactory",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/ManagementFactory.html",
            "description": "The ManagementFactory class is a factory class for getting managed beans for the Java platform. "
        },
        {
            "name": "ManagementPermission",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/ManagementPermission.html",
            "description": "The permission which the SecurityManager will check when code that is running with a SecurityManager calls methods defined in the management interface for the Java platform. "
        },
        {
            "name": "ManageReferralControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/ManageReferralControl.html",
            "description": "Requests that referral and other special LDAP objects be manipulated as normal LDAP objects. "
        },
        {
            "name": "ManagerFactoryParameters",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/ManagerFactoryParameters.html",
            "description": "This class is the base interface for providing algorithm-specific information to a KeyManagerFactory or TrustManagerFactory. "
        },
        {
            "name": "Manifest",
            "package": "java.util.jar",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/jar/Manifest.html",
            "description": "The Manifest class is used to maintain Manifest entry names and their associated Attributes. "
        },
        {
            "name": "Manifest",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/Manifest.html",
            "description": "A representation of the XML Manifest element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "Map",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Map.html",
            "description": "An object that maps keys to values. "
        },
        {
            "name": "Map.Entry",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Map.Entry.html",
            "description": "A map entry (key-value pair). "
        },
        {
            "name": "MappedByteBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/MappedByteBuffer.html",
            "description": "A direct byte buffer whose content is a memory-mapped region of a file. "
        },
        {
            "name": "MappedMemorySegment",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MappedMemorySegment.html",
            "description": "A mapped memory segment, that is, a memory segment backed by memory-mapped file. "
        },
        {
            "name": "MarshalException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/MarshalException.html",
            "description": "A MarshalException is thrown if a java.io.IOException occurs while marshalling the remote call header, arguments or return value for a remote method call. "
        },
        {
            "name": "MarshalException",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/MarshalException.html",
            "description": "Indicates an exceptional condition that occurred during the XML marshalling or unmarshalling process. "
        },
        {
            "name": "MarshalledObject",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/MarshalledObject.html",
            "description": "A MarshalledObject contains a byte stream with the serialized representation of an object given to its constructor. "
        },
        {
            "name": "MaskFormatter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/MaskFormatter.html",
            "description": "MaskFormatter is used to format and edit strings. "
        },
        {
            "name": "Matcher",
            "package": "java.util.regex",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/regex/Matcher.html",
            "description": "An engine that performs match operations on a character sequence by interpreting a Pattern . "
        },
        {
            "name": "MatchResult",
            "package": "java.util.regex",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/regex/MatchResult.html",
            "description": "The result of a match operation. "
        },
        {
            "name": "Math",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Math.html",
            "description": "The class Math contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. "
        },
        {
            "name": "MathContext",
            "package": "java.math",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/math/MathContext.html",
            "description": "Immutable objects which encapsulate the context settings which describe certain rules for numerical operators, such as those implemented by the BigDecimal class. "
        },
        {
            "name": "MatteBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/MatteBorder.html",
            "description": "A class which provides a matte-like border of either a solid color or a tiled icon. "
        },
        {
            "name": "MBeanAttributeInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanAttributeInfo.html",
            "description": "Describes an MBean attribute exposed for management. "
        },
        {
            "name": "MBeanConstructorInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanConstructorInfo.html",
            "description": "Describes a constructor exposed by an MBean. "
        },
        {
            "name": "MBeanException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanException.html",
            "description": "Represents \"user defined\" exceptions thrown by MBean methods in the agent. "
        },
        {
            "name": "MBeanFeatureInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanFeatureInfo.html",
            "description": "Provides general information for an MBean descriptor object. "
        },
        {
            "name": "MBeanInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanInfo.html",
            "description": "Describes the management interface exposed by an MBean; that is, the set of attributes and operations which are available for management operations. "
        },
        {
            "name": "MBeanNotificationInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanNotificationInfo.html",
            "description": "The MBeanNotificationInfo class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification. "
        },
        {
            "name": "MBeanOperationInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanOperationInfo.html",
            "description": "Describes a management operation exposed by an MBean. "
        },
        {
            "name": "MBeanParameterInfo",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanParameterInfo.html",
            "description": "Describes an argument of an operation exposed by an MBean. "
        },
        {
            "name": "MBeanPermission",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanPermission.html",
            "description": "Permission controlling access to MBeanServer operations. "
        },
        {
            "name": "MBeanRegistration",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanRegistration.html",
            "description": "Can be implemented by an MBean in order to carry out operations before and after being registered or unregistered from the MBean Server. "
        },
        {
            "name": "MBeanRegistrationException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanRegistrationException.html",
            "description": "Wraps exceptions thrown by the preRegister(), preDeregister() methods of the MBeanRegistration interface. "
        },
        {
            "name": "MBeanServer",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServer.html",
            "description": "This is the interface for MBean manipulation on the agent side. "
        },
        {
            "name": "MBeanServerBuilder",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerBuilder.html",
            "description": "This class represents a builder that creates a default MBeanServer implementation. "
        },
        {
            "name": "MBeanServerConnection",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerConnection.html",
            "description": "This interface represents a way to talk to an MBean server, whether local or remote. "
        },
        {
            "name": "MBeanServerDelegate",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerDelegate.html",
            "description": "Represents  the MBean server from the management point of view. "
        },
        {
            "name": "MBeanServerDelegateMBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerDelegateMBean.html",
            "description": "Defines the management interface  of an object of class MBeanServerDelegate. "
        },
        {
            "name": "MBeanServerFactory",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerFactory.html",
            "description": "Provides MBean server references. "
        },
        {
            "name": "MBeanServerForwarder",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/MBeanServerForwarder.html",
            "description": "An object of this class implements the MBeanServer interface and wraps another object that also implements that interface. "
        },
        {
            "name": "MBeanServerInvocationHandler",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerInvocationHandler.html",
            "description": "InvocationHandler that forwards methods in an MBean's management interface through the MBean server to the MBean. "
        },
        {
            "name": "MBeanServerNotification",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerNotification.html",
            "description": "Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean. "
        },
        {
            "name": "MBeanServerNotificationFilter",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/MBeanServerNotificationFilter.html",
            "description": "Filter for MBeanServerNotification . "
        },
        {
            "name": "MBeanServerPermission",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanServerPermission.html",
            "description": "A Permission to perform actions related to MBeanServers. "
        },
        {
            "name": "MBeanTrustPermission",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MBeanTrustPermission.html",
            "description": "This permission represents \"trust\" in a signer or codebase. "
        },
        {
            "name": "Media",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Media.html",
            "description": "Class Media is a printing attribute class that specifies the medium on which to print. "
        },
        {
            "name": "MediaList",
            "package": "org.w3c.dom.stylesheets",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/stylesheets/MediaList.html",
            "description": "The MediaList interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented. "
        },
        {
            "name": "MediaName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaName.html",
            "description": "Class MediaName is a subclass of Media , a printing attribute class (an enumeration) that specifies the media for a print job as a name. "
        },
        {
            "name": "MediaPrintableArea",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaPrintableArea.html",
            "description": "Class MediaPrintableArea is a printing attribute used to distinguish the printable and non-printable areas of media. "
        },
        {
            "name": "MediaSize",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.html",
            "description": "Class MediaSize is a two-dimensional size valued printing attribute class that indicates the dimensions of the medium in a portrait orientation, with the X dimension running along the bottom edge and the Y dimension running along the left edge. "
        },
        {
            "name": "MediaSize.Engineering",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.Engineering.html",
            "description": "Class MediaSize.Engineering includes MediaSize values for engineering media. "
        },
        {
            "name": "MediaSize.ISO",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.ISO.html",
            "description": "Class MediaSize.ISO includes MediaSize values for ISO media. "
        },
        {
            "name": "MediaSize.JIS",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.JIS.html",
            "description": "Class MediaSize.JIS includes MediaSize values for JIS (Japanese) media. "
        },
        {
            "name": "MediaSize.NA",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.NA.html",
            "description": "Class MediaSize.NA includes MediaSize values for North American media. "
        },
        {
            "name": "MediaSize.Other",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSize.Other.html",
            "description": "Class MediaSize.Other includes MediaSize values for miscellaneous media. "
        },
        {
            "name": "MediaSizeName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaSizeName.html",
            "description": "Class MediaSizeName is a subclass of Media . "
        },
        {
            "name": "MediaTracker",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MediaTracker.html",
            "description": "The MediaTracker class is a utility class to track the status of a number of media objects. "
        },
        {
            "name": "MediaTray",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MediaTray.html",
            "description": "Class MediaTray is a subclass of Media . "
        },
        {
            "name": "Member",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Member.html",
            "description": "Member is an interface that reflects identifying information about a single member (a field or a method) or a constructor. "
        },
        {
            "name": "MemberReferenceTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/MemberReferenceTree.html",
            "description": "A tree node for a member reference expression. "
        },
        {
            "name": "MemberReferenceTree.ReferenceMode",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/MemberReferenceTree.ReferenceMode.html",
            "description": "There are two kinds of member references: (i) method references and (ii) constructor references "
        },
        {
            "name": "MemberSelectTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/MemberSelectTree.html",
            "description": "A tree node for a member access expression. "
        },
        {
            "name": "MembershipKey",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/MembershipKey.html",
            "description": "A token representing the membership of an Internet Protocol (IP) multicast group. "
        },
        {
            "name": "MemoryAddress",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html",
            "description": "A memory address models a reference into a memory location. "
        },
        {
            "name": "MemoryAddress",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/MemoryAddress.html",
            "description": "Event field annotation, specifies that the value is a memory address. "
        },
        {
            "name": "MemoryCacheImageInputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/MemoryCacheImageInputStream.html",
            "description": "An implementation of ImageInputStream that gets its input from a regular InputStream . "
        },
        {
            "name": "MemoryCacheImageOutputStream",
            "package": "javax.imageio.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/stream/MemoryCacheImageOutputStream.html",
            "description": "An implementation of ImageOutputStream that writes its output to a regular OutputStream . "
        },
        {
            "name": "MemoryHandler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/MemoryHandler.html",
            "description": "Handler that buffers requests in a circular buffer in memory. "
        },
        {
            "name": "MemoryHandles",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryHandles.html",
            "description": "This class defines several factory methods for constructing and combining memory access var handles. "
        },
        {
            "name": "MemoryImageSource",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/MemoryImageSource.html",
            "description": "This class is an implementation of the ImageProducer interface which uses an array to produce pixel values for an Image. "
        },
        {
            "name": "MemoryLayout",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html",
            "description": "A memory layout can be used to describe the contents of a memory segment in a language neutral fashion. "
        },
        {
            "name": "MemoryLayout.PathElement",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.PathElement.html",
            "description": "Instances of this class are used to form layout paths . "
        },
        {
            "name": "MemoryLayouts",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayouts.html",
            "description": "This class defines useful layout constants. "
        },
        {
            "name": "MemoryManagerMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryManagerMXBean.html",
            "description": "The management interface for a memory manager. "
        },
        {
            "name": "MemoryMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryMXBean.html",
            "description": "The management interface for the memory system of the Java virtual machine. "
        },
        {
            "name": "MemoryNotificationInfo",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryNotificationInfo.html",
            "description": "The information about a memory notification. "
        },
        {
            "name": "MemoryPoolMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html",
            "description": "The management interface for a memory pool. "
        },
        {
            "name": "MemorySegment",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemorySegment.html",
            "description": "A memory segment models a contiguous region of memory. "
        },
        {
            "name": "MemoryType",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryType.html",
            "description": "Types of memory pools . "
        },
        {
            "name": "MemoryUsage",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MemoryUsage.html",
            "description": "A MemoryUsage object represents a snapshot of memory usage. "
        },
        {
            "name": "Menu",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Menu.html",
            "description": "A Menu object is a pull-down menu component that is deployed from a menu bar. "
        },
        {
            "name": "MenuBar",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MenuBar.html",
            "description": "The MenuBar class encapsulates the platform's concept of a menu bar bound to a frame. "
        },
        {
            "name": "MenuBarUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/MenuBarUI.html",
            "description": "Pluggable look and feel interface for JMenuBar. "
        },
        {
            "name": "MenuComponent",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MenuComponent.html",
            "description": "The abstract class MenuComponent is the superclass of all menu-related components. "
        },
        {
            "name": "MenuContainer",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MenuContainer.html",
            "description": "The super class of all menu related containers. "
        },
        {
            "name": "MenuDragMouseEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuDragMouseEvent.html",
            "description": "MenuDragMouseEvent is used to notify interested parties that the menu element has received a MouseEvent forwarded to it under drag conditions. "
        },
        {
            "name": "MenuDragMouseListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuDragMouseListener.html",
            "description": "Defines a menu mouse-drag listener. "
        },
        {
            "name": "MenuElement",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/MenuElement.html",
            "description": "Any component that can be placed into a menu should implement this interface. "
        },
        {
            "name": "MenuEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuEvent.html",
            "description": "MenuEvent is used to notify interested parties that the menu which is the event source has been posted, selected, or canceled. "
        },
        {
            "name": "MenuItem",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MenuItem.html",
            "description": "All items in a menu must belong to the class MenuItem , or one of its subclasses. "
        },
        {
            "name": "MenuItemUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/MenuItemUI.html",
            "description": "Pluggable look and feel interface for JMenuItem. "
        },
        {
            "name": "MenuKeyEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuKeyEvent.html",
            "description": "MenuKeyEvent is used to notify interested parties that the menu element has received a KeyEvent forwarded to it in a menu tree. "
        },
        {
            "name": "MenuKeyListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuKeyListener.html",
            "description": "MenuKeyListener "
        },
        {
            "name": "MenuListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MenuListener.html",
            "description": "Defines a listener for menu events. "
        },
        {
            "name": "MenuSelectionManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/MenuSelectionManager.html",
            "description": "A MenuSelectionManager owns the selection in menu hierarchy. "
        },
        {
            "name": "MenuShortcut",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MenuShortcut.html",
            "description": "The MenuShortcut class represents a keyboard accelerator for a MenuItem. "
        },
        {
            "name": "MessageDigest",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/MessageDigest.html",
            "description": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. "
        },
        {
            "name": "MessageDigestSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/MessageDigestSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the MessageDigest class, which provides the functionality of a message digest algorithm, such as MD5 or SHA. "
        },
        {
            "name": "MessageFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/MessageFormat.html",
            "description": "MessageFormat provides a means to produce concatenated messages in a language-neutral way. "
        },
        {
            "name": "MessageFormat.Field",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/MessageFormat.Field.html",
            "description": "Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from MessageFormat.formatToCharacterIterator . "
        },
        {
            "name": "MessageInfo",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html",
            "description": "The MessageInfo class provides additional ancillary information about messages. "
        },
        {
            "name": "MessageProp",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/MessageProp.html",
            "description": "This is a utility class used within the per-message GSSContext methods to convey per-message properties. "
        },
        {
            "name": "Messager",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Messager.html",
            "description": "A Messager provides the way for an annotation processor to report error messages, warnings, and other notices. "
        },
        {
            "name": "MetadataDefinition",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/MetadataDefinition.html",
            "description": "Meta annotation for defining new types of event metadata. "
        },
        {
            "name": "MetaEventListener",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MetaEventListener.html",
            "description": "The MetaEventListener interface should be implemented by classes whose instances need to be notified when a Sequencer has processed a MetaMessage . "
        },
        {
            "name": "MetalBorders",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.html",
            "description": "Factory object that can vend Borders appropriate for the metal L & F. "
        },
        {
            "name": "MetalBorders.ButtonBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.ButtonBorder.html",
            "description": "The class represents the border of a JButton . "
        },
        {
            "name": "MetalBorders.Flush3DBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.Flush3DBorder.html",
            "description": "The class represents the 3D border. "
        },
        {
            "name": "MetalBorders.InternalFrameBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.InternalFrameBorder.html",
            "description": "The class represents the border of a JInternalFrame . "
        },
        {
            "name": "MetalBorders.MenuBarBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.MenuBarBorder.html",
            "description": "The class represents the border of a JMenuBar . "
        },
        {
            "name": "MetalBorders.MenuItemBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.MenuItemBorder.html",
            "description": "The class represents the border of a JMenuItem . "
        },
        {
            "name": "MetalBorders.OptionDialogBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.OptionDialogBorder.html",
            "description": "The class represents the border of an option dialog. "
        },
        {
            "name": "MetalBorders.PaletteBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.PaletteBorder.html",
            "description": "Border for a Palette. "
        },
        {
            "name": "MetalBorders.PopupMenuBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.PopupMenuBorder.html",
            "description": "The class represents the border of a JPopupMenu . "
        },
        {
            "name": "MetalBorders.RolloverButtonBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.RolloverButtonBorder.html",
            "description": "The class represents the border of a rollover Button . "
        },
        {
            "name": "MetalBorders.ScrollPaneBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.ScrollPaneBorder.html",
            "description": "The class represents the border of a JScrollPane . "
        },
        {
            "name": "MetalBorders.TableHeaderBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.TableHeaderBorder.html",
            "description": "Border for a Table Header "
        },
        {
            "name": "MetalBorders.TextFieldBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.TextFieldBorder.html",
            "description": "The class represents the border of a JTestField . "
        },
        {
            "name": "MetalBorders.ToggleButtonBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.ToggleButtonBorder.html",
            "description": ""
        },
        {
            "name": "MetalBorders.ToolBarBorder",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalBorders.ToolBarBorder.html",
            "description": "The class represents the border of a JToolBar . "
        },
        {
            "name": "MetalButtonUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalButtonUI.html",
            "description": "MetalButtonUI implementation "
        },
        {
            "name": "MetalCheckBoxIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalCheckBoxIcon.html",
            "description": "CheckboxIcon implementation for OrganicCheckBoxUI "
        },
        {
            "name": "MetalCheckBoxUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalCheckBoxUI.html",
            "description": "CheckboxUI implementation for MetalCheckboxUI "
        },
        {
            "name": "MetalComboBoxButton",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalComboBoxButton.html",
            "description": "JButton subclass to help out MetalComboBoxUI "
        },
        {
            "name": "MetalComboBoxEditor",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalComboBoxEditor.html",
            "description": "The default editor for Metal editable combo boxes "
        },
        {
            "name": "MetalComboBoxEditor.UIResource",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalComboBoxEditor.UIResource.html",
            "description": "A subclass of BasicComboBoxEditor that implements UIResource. "
        },
        {
            "name": "MetalComboBoxIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalComboBoxIcon.html",
            "description": "This utility class draws the horizontal bars which indicate a MetalComboBox "
        },
        {
            "name": "MetalComboBoxUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalComboBoxUI.html",
            "description": "Metal UI for JComboBox "
        },
        {
            "name": "MetalDesktopIconUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalDesktopIconUI.html",
            "description": "Metal desktop icon. "
        },
        {
            "name": "MetalFileChooserUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalFileChooserUI.html",
            "description": "Metal L&F implementation of a FileChooser. "
        },
        {
            "name": "MetalIconFactory",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.html",
            "description": "Factory object that vends Icon s for the Java look and feel (Metal). "
        },
        {
            "name": "MetalIconFactory.FileIcon16",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.FileIcon16.html",
            "description": "Warning: Serialized objects of this class will not be compatible with future Swing releases. "
        },
        {
            "name": "MetalIconFactory.FolderIcon16",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.FolderIcon16.html",
            "description": "Warning: Serialized objects of this class will not be compatible with future Swing releases. "
        },
        {
            "name": "MetalIconFactory.PaletteCloseIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.PaletteCloseIcon.html",
            "description": "Defines an icon for Palette close "
        },
        {
            "name": "MetalIconFactory.TreeControlIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.TreeControlIcon.html",
            "description": "Warning: Serialized objects of this class will not be compatible with future Swing releases. "
        },
        {
            "name": "MetalIconFactory.TreeFolderIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.TreeFolderIcon.html",
            "description": "Warning: Serialized objects of this class will not be compatible with future Swing releases. "
        },
        {
            "name": "MetalIconFactory.TreeLeafIcon",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalIconFactory.TreeLeafIcon.html",
            "description": "The class represents a tree leaf icon. "
        },
        {
            "name": "MetalInternalFrameTitlePane",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalInternalFrameTitlePane.html",
            "description": "Class that manages a JLF title bar "
        },
        {
            "name": "MetalInternalFrameUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalInternalFrameUI.html",
            "description": "Metal implementation of JInternalFrame. "
        },
        {
            "name": "MetalLabelUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalLabelUI.html",
            "description": "A Windows L&F implementation of LabelUI. "
        },
        {
            "name": "MetalLookAndFeel",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalLookAndFeel.html",
            "description": "The Java Look and Feel, otherwise known as Metal. "
        },
        {
            "name": "MetalMenuBarUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalMenuBarUI.html",
            "description": "Metal implementation of MenuBarUI . "
        },
        {
            "name": "MetalPopupMenuSeparatorUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.html",
            "description": "A Metal L&F implementation of PopupMenuSeparatorUI. "
        },
        {
            "name": "MetalProgressBarUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalProgressBarUI.html",
            "description": "The Metal implementation of ProgressBarUI. "
        },
        {
            "name": "MetalRadioButtonUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalRadioButtonUI.html",
            "description": "RadioButtonUI implementation for MetalRadioButtonUI "
        },
        {
            "name": "MetalRootPaneUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalRootPaneUI.html",
            "description": "Provides the metal look and feel implementation of RootPaneUI . "
        },
        {
            "name": "MetalScrollBarUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalScrollBarUI.html",
            "description": "Implementation of ScrollBarUI for the Metal Look and Feel "
        },
        {
            "name": "MetalScrollButton",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalScrollButton.html",
            "description": "JButton object for Metal scrollbar arrows. "
        },
        {
            "name": "MetalScrollPaneUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalScrollPaneUI.html",
            "description": "A Metal L&F implementation of ScrollPaneUI. "
        },
        {
            "name": "MetalSeparatorUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalSeparatorUI.html",
            "description": "A Metal L&F implementation of SeparatorUI. "
        },
        {
            "name": "MetalSliderUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalSliderUI.html",
            "description": "A Java L&F implementation of SliderUI. "
        },
        {
            "name": "MetalSplitPaneUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalSplitPaneUI.html",
            "description": "Metal split pane. "
        },
        {
            "name": "MetalTabbedPaneUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalTabbedPaneUI.html",
            "description": "The Metal subclass of BasicTabbedPaneUI. "
        },
        {
            "name": "MetalTextFieldUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalTextFieldUI.html",
            "description": "Basis of a look and feel for a JTextField. "
        },
        {
            "name": "MetalTheme",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalTheme.html",
            "description": "MetalTheme provides the color palette and fonts used by the Java Look and Feel. "
        },
        {
            "name": "MetalToggleButtonUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalToggleButtonUI.html",
            "description": "MetalToggleButton implementation "
        },
        {
            "name": "MetalToolBarUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalToolBarUI.html",
            "description": "A Metal Look and Feel implementation of ToolBarUI. "
        },
        {
            "name": "MetalToolTipUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalToolTipUI.html",
            "description": "A Metal L&F extension of BasicToolTipUI. "
        },
        {
            "name": "MetalTreeUI",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/MetalTreeUI.html",
            "description": "The metal look and feel implementation of TreeUI . "
        },
        {
            "name": "MetaMessage",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MetaMessage.html",
            "description": "A MetaMessage is a MidiMessage that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. "
        },
        {
            "name": "Method",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Method.html",
            "description": "A static or instance method in the target VM. "
        },
        {
            "name": "Method",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Method.html",
            "description": "A Method provides information about, and access to, a single method on a class or interface. "
        },
        {
            "name": "MethodDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/MethodDescriptor.html",
            "description": "A MethodDescriptor describes a particular method that a Java Bean supports for external access from other components. "
        },
        {
            "name": "MethodEntryEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MethodEntryEvent.html",
            "description": "Notification of a method invocation in the target VM. "
        },
        {
            "name": "MethodEntryRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MethodEntryRequest.html",
            "description": "Request for notification when a method is invoked in the target VM. "
        },
        {
            "name": "MethodExitEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MethodExitEvent.html",
            "description": "Notification of a method return in the target VM. "
        },
        {
            "name": "MethodExitRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MethodExitRequest.html",
            "description": "Request for notification when a method returns in the target VM. "
        },
        {
            "name": "MethodHandle",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandle.html",
            "description": "A method handle is a typed, directly executable reference to an underlying method, constructor, field, or similar low-level operation, with optional transformations of arguments or return values. "
        },
        {
            "name": "MethodHandleDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/MethodHandleDesc.html",
            "description": "A nominal descriptor for a MethodHandle constant. "
        },
        {
            "name": "MethodHandleInfo",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandleInfo.html",
            "description": "A symbolic reference obtained by cracking a direct method handle into its constituent symbolic parts. "
        },
        {
            "name": "MethodHandleProxies",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandleProxies.html",
            "description": "This class consists exclusively of static methods that help adapt method handles to other JVM types, such as interfaces. "
        },
        {
            "name": "MethodHandles",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandles.html",
            "description": "This class consists exclusively of static methods that operate on or return method handles. "
        },
        {
            "name": "MethodHandles.Lookup",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html",
            "description": "A lookup object is a factory for creating method handles, when the creation requires access checking. "
        },
        {
            "name": "MethodHandles.Lookup.ClassOption",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.ClassOption.html",
            "description": "The set of class options that specify whether a hidden class created by Lookup::defineHiddenClass method is dynamically added as a new member to the nest of a lookup class and/or whether a hidden class has a strong relationship with the class loader marked as its defining loader. "
        },
        {
            "name": "MethodHandleTransformer",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/MethodHandleTransformer.html",
            "description": "A generic interface describing operations that transform method handles. "
        },
        {
            "name": "MethodInvocationTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/MethodInvocationTree.html",
            "description": "A tree node for a method invocation expression. "
        },
        {
            "name": "MethodSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/MethodSnippet.html",
            "description": "Snippet for a method definition. "
        },
        {
            "name": "MethodTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/MethodTree.html",
            "description": "A tree node for a method or annotation type element declaration. "
        },
        {
            "name": "MethodType",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MethodType.html",
            "description": "A method type represents the arguments and return type accepted and returned by a method handle, or the arguments and return type passed and expected  by a method handle caller. "
        },
        {
            "name": "MethodTypeConversionStrategy",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/MethodTypeConversionStrategy.html",
            "description": "Interface for objects representing a strategy for converting a method handle to a new type. "
        },
        {
            "name": "MethodTypeDesc",
            "package": "java.lang.constant",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/constant/MethodTypeDesc.html",
            "description": "A nominal descriptor for a MethodType constant. "
        },
        {
            "name": "MGF1ParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/MGF1ParameterSpec.html",
            "description": "This class specifies the set of parameters used with mask generation function MGF1 in OAEP Padding and RSASSA-PSS signature scheme, as defined in the PKCS#1 v2.2 standard. "
        },
        {
            "name": "MidiChannel",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiChannel.html",
            "description": "A MidiChannel object represents a single MIDI channel. "
        },
        {
            "name": "MidiDevice",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiDevice.html",
            "description": "MidiDevice is the base interface for all MIDI devices. "
        },
        {
            "name": "MidiDevice.Info",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiDevice.Info.html",
            "description": "A MidiDevice.Info object contains assorted data about a MidiDevice , including its name, the company who created it, and descriptive text. "
        },
        {
            "name": "MidiDeviceProvider",
            "package": "javax.sound.midi.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/spi/MidiDeviceProvider.html",
            "description": "A MidiDeviceProvider is a factory or provider for a particular type of MIDI device. "
        },
        {
            "name": "MidiDeviceReceiver",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiDeviceReceiver.html",
            "description": "MidiDeviceReceiver is a Receiver which represents a MIDI input connector of a MidiDevice (see MidiDevice.getReceiver() ). "
        },
        {
            "name": "MidiDeviceTransmitter",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiDeviceTransmitter.html",
            "description": "MidiDeviceTransmitter is a Transmitter which represents a MIDI input connector of a MidiDevice (see MidiDevice.getTransmitter() ). "
        },
        {
            "name": "MidiEvent",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiEvent.html",
            "description": "MIDI events contain a MIDI message and a corresponding time-stamp expressed in ticks, and can represent the MIDI event information stored in a MIDI file or a Sequence object. "
        },
        {
            "name": "MidiFileFormat",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiFileFormat.html",
            "description": "A MidiFileFormat object encapsulates a MIDI file's type, as well as its length and timing information. "
        },
        {
            "name": "MidiFileReader",
            "package": "javax.sound.midi.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/spi/MidiFileReader.html",
            "description": "A MidiFileReader supplies MIDI file-reading services. "
        },
        {
            "name": "MidiFileWriter",
            "package": "javax.sound.midi.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/spi/MidiFileWriter.html",
            "description": "A MidiFileWriter supplies MIDI file-writing services. "
        },
        {
            "name": "MidiMessage",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiMessage.html",
            "description": "MidiMessage is the base class for MIDI messages. "
        },
        {
            "name": "MidiSystem",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiSystem.html",
            "description": "The MidiSystem class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports. "
        },
        {
            "name": "MidiUnavailableException",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/MidiUnavailableException.html",
            "description": "A MidiUnavailableException is thrown when a requested MIDI component cannot be opened or created because it is unavailable. "
        },
        {
            "name": "MimeTypeParseException",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/MimeTypeParseException.html",
            "description": "A class to encapsulate MimeType parsing related exceptions. "
        },
        {
            "name": "MinguoChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/MinguoChronology.html",
            "description": "The Minguo calendar system. "
        },
        {
            "name": "MinguoDate",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/MinguoDate.html",
            "description": "A date in the Minguo calendar system. "
        },
        {
            "name": "MinguoEra",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/MinguoEra.html",
            "description": "An era in the Minguo calendar system. "
        },
        {
            "name": "MinimalHTMLWriter",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/MinimalHTMLWriter.html",
            "description": "MinimalHTMLWriter is a fallback writer used by the HTMLEditorKit to write out HTML for a document that is a not produced by the EditorKit. "
        },
        {
            "name": "Mirror",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Mirror.html",
            "description": "A proxy used by a debugger to examine or manipulate some entity in another virtual machine. "
        },
        {
            "name": "MirroredTypeException",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html",
            "description": "Thrown when an application attempts to access the Class object corresponding to a TypeMirror . "
        },
        {
            "name": "MirroredTypesException",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html",
            "description": "Thrown when an application attempts to access a sequence of Class objects each corresponding to a TypeMirror . "
        },
        {
            "name": "MissingFormatArgumentException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/MissingFormatArgumentException.html",
            "description": "Unchecked exception thrown when there is a format specifier which does not have a corresponding argument or if an argument index refers to an argument that does not exist. "
        },
        {
            "name": "MissingFormatWidthException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/MissingFormatWidthException.html",
            "description": "Unchecked exception thrown when the format width is required. "
        },
        {
            "name": "MissingMemberHandlerFactory",
            "package": "jdk.dynalink.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/beans/MissingMemberHandlerFactory.html",
            "description": "A factory for creating method handles for linking missing member behavior in BeansLinker . "
        },
        {
            "name": "MissingResourceException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/MissingResourceException.html",
            "description": "Signals that a resource is missing. "
        },
        {
            "name": "Mixer",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Mixer.html",
            "description": "A mixer is an audio device with one or more lines. "
        },
        {
            "name": "Mixer.Info",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Mixer.Info.html",
            "description": "The Mixer.Info class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. "
        },
        {
            "name": "MixerProvider",
            "package": "javax.sound.sampled.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/spi/MixerProvider.html",
            "description": "A provider or factory for a particular mixer type. "
        },
        {
            "name": "MLet",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/MLet.html",
            "description": "Allows you to instantiate and register one or several MBeans in the MBean server coming from a remote URL. "
        },
        {
            "name": "MLetContent",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/MLetContent.html",
            "description": "This class represents the contents of the MLET tag. "
        },
        {
            "name": "MLetMBean",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/MLetMBean.html",
            "description": "Exposes the remote management interface of the MLet MBean. "
        },
        {
            "name": "ModelMBean",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBean.html",
            "description": "This interface must be implemented by the ModelMBeans. "
        },
        {
            "name": "ModelMBeanAttributeInfo",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanAttributeInfo.html",
            "description": "The ModelMBeanAttributeInfo object describes an attribute of the ModelMBean. "
        },
        {
            "name": "ModelMBeanConstructorInfo",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanConstructorInfo.html",
            "description": "The ModelMBeanConstructorInfo object describes a constructor of the ModelMBean. "
        },
        {
            "name": "ModelMBeanInfo",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanInfo.html",
            "description": "This interface is implemented by the ModelMBeanInfo for every ModelMBean. "
        },
        {
            "name": "ModelMBeanInfoSupport",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanInfoSupport.html",
            "description": "This class represents the meta data for ModelMBeans. "
        },
        {
            "name": "ModelMBeanNotificationBroadcaster",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanNotificationBroadcaster.html",
            "description": "This interface must be implemented by the ModelMBeans. "
        },
        {
            "name": "ModelMBeanNotificationInfo",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanNotificationInfo.html",
            "description": "The ModelMBeanNotificationInfo object describes a notification emitted by a ModelMBean. "
        },
        {
            "name": "ModelMBeanOperationInfo",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/ModelMBeanOperationInfo.html",
            "description": "The ModelMBeanOperationInfo object describes a management operation of the ModelMBean. "
        },
        {
            "name": "ModificationItem",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/ModificationItem.html",
            "description": "This class represents a modification item. "
        },
        {
            "name": "ModificationWatchpointEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ModificationWatchpointEvent.html",
            "description": "Notification of a field modification in the target VM. "
        },
        {
            "name": "ModificationWatchpointRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ModificationWatchpointRequest.html",
            "description": "Request for notification when a field is set. "
        },
        {
            "name": "Modifier",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Modifier.html",
            "description": "The Modifier class provides static methods and constants to decode class and member access modifiers. "
        },
        {
            "name": "Modifier",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/Modifier.html",
            "description": "Represents a modifier on a program element such as a class, method, or field. "
        },
        {
            "name": "ModifiersTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ModifiersTree.html",
            "description": "A tree node for the modifiers, including annotations, for a declaration. "
        },
        {
            "name": "Module",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Module.html",
            "description": "Represents a run-time module, either named or unnamed. "
        },
        {
            "name": "ModuleDescriptor",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.html",
            "description": "A module descriptor. "
        },
        {
            "name": "ModuleDescriptor.Builder",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Builder.html",
            "description": "A builder for building ModuleDescriptor objects. "
        },
        {
            "name": "ModuleDescriptor.Exports",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Exports.html",
            "description": "A package exported by a module, may be qualified or unqualified. "
        },
        {
            "name": "ModuleDescriptor.Exports.Modifier",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Exports.Modifier.html",
            "description": "A modifier on an exported package. "
        },
        {
            "name": "ModuleDescriptor.Modifier",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Modifier.html",
            "description": "A modifier on a module. "
        },
        {
            "name": "ModuleDescriptor.Opens",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Opens.html",
            "description": "A package opened by a module, may be qualified or unqualified. "
        },
        {
            "name": "ModuleDescriptor.Opens.Modifier",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Opens.Modifier.html",
            "description": "A modifier on an open package. "
        },
        {
            "name": "ModuleDescriptor.Provides",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Provides.html",
            "description": "A service that a module provides one or more implementations of. "
        },
        {
            "name": "ModuleDescriptor.Requires",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Requires.html",
            "description": "A dependence upon a module. "
        },
        {
            "name": "ModuleDescriptor.Requires.Modifier",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Requires.Modifier.html",
            "description": "A modifier on a module dependence. "
        },
        {
            "name": "ModuleDescriptor.Version",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleDescriptor.Version.html",
            "description": "A module's version string. "
        },
        {
            "name": "ModuleElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.html",
            "description": "Represents a module program element. "
        },
        {
            "name": "ModuleElement.Directive",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.Directive.html",
            "description": "Represents a directive within the declaration of this module. "
        },
        {
            "name": "ModuleElement.DirectiveKind",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.DirectiveKind.html",
            "description": "The kind of a directive. "
        },
        {
            "name": "ModuleElement.DirectiveVisitor",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.DirectiveVisitor.html",
            "description": "A visitor of module directives, in the style of the visitor design pattern. "
        },
        {
            "name": "ModuleElement.ExportsDirective",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.ExportsDirective.html",
            "description": "An exported package of a module. "
        },
        {
            "name": "ModuleElement.OpensDirective",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.OpensDirective.html",
            "description": "An opened package of a module. "
        },
        {
            "name": "ModuleElement.ProvidesDirective",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.ProvidesDirective.html",
            "description": "An implementation of a service provided by a module. "
        },
        {
            "name": "ModuleElement.RequiresDirective",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.RequiresDirective.html",
            "description": "A dependency of a module. "
        },
        {
            "name": "ModuleElement.UsesDirective",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/ModuleElement.UsesDirective.html",
            "description": "A reference to a service used by a module. "
        },
        {
            "name": "ModuleFinder",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleFinder.html",
            "description": "A finder of modules. "
        },
        {
            "name": "ModuleLayer",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ModuleLayer.html",
            "description": "A layer of modules in the Java virtual machine. "
        },
        {
            "name": "ModuleLayer.Controller",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ModuleLayer.Controller.html",
            "description": "Controls a module layer. "
        },
        {
            "name": "ModuleReader",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleReader.html",
            "description": "Provides access to the content of a module. "
        },
        {
            "name": "ModuleReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ModuleReference.html",
            "description": "A module in the target VM. "
        },
        {
            "name": "ModuleReference",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ModuleReference.html",
            "description": "A reference to a module's content. "
        },
        {
            "name": "ModuleTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ModuleTree.html",
            "description": "A tree node for a module declaration. "
        },
        {
            "name": "ModuleTree.ModuleKind",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ModuleTree.ModuleKind.html",
            "description": "The kind of the module. "
        },
        {
            "name": "Monitor",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/Monitor.html",
            "description": "Defines the part common to all monitor MBeans. "
        },
        {
            "name": "MonitorContendedEnteredEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MonitorContendedEnteredEvent.html",
            "description": "Notification that a thread in the target VM is entering a monitor  after waiting for it to be released by another thread. "
        },
        {
            "name": "MonitorContendedEnteredRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MonitorContendedEnteredRequest.html",
            "description": "Request for notification of a thread in the target VM entering a monitor after waiting for it to be released by another thread. "
        },
        {
            "name": "MonitorContendedEnterEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MonitorContendedEnterEvent.html",
            "description": "Notification that a thread in the target VM is attempting to enter a monitor that is already acquired by another thread. "
        },
        {
            "name": "MonitorContendedEnterRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MonitorContendedEnterRequest.html",
            "description": "Request for notification of a thread in the target VM attempting to enter a monitor already acquired by another thread. "
        },
        {
            "name": "MonitorInfo",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/MonitorInfo.html",
            "description": "Information about a monitor owned by a thread. "
        },
        {
            "name": "MonitorInfo",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/MonitorInfo.html",
            "description": "Information about an object monitor lock. "
        },
        {
            "name": "MonitorMBean",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/MonitorMBean.html",
            "description": "Exposes the remote management interface of monitor MBeans. "
        },
        {
            "name": "MonitorNotification",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/MonitorNotification.html",
            "description": "Provides definitions of the notifications sent by monitor MBeans. "
        },
        {
            "name": "MonitorSettingException",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/MonitorSettingException.html",
            "description": "Exception thrown by the monitor when a monitor setting becomes invalid while the monitor is running. "
        },
        {
            "name": "MonitorWaitedEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MonitorWaitedEvent.html",
            "description": "Notification that a thread in the target VM has finished waiting on an monitor object. "
        },
        {
            "name": "MonitorWaitedRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MonitorWaitedRequest.html",
            "description": "Request for notification when a thread in the target VM has finished waiting on a monitor object. "
        },
        {
            "name": "MonitorWaitEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/MonitorWaitEvent.html",
            "description": "Notification that a thread in the target VM is about to wait on a monitor object. "
        },
        {
            "name": "MonitorWaitRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/MonitorWaitRequest.html",
            "description": "Request for notification when a thread in the target VM is about to wait on a monitor object. "
        },
        {
            "name": "Month",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Month.html",
            "description": "A month-of-year, such as 'July'. "
        },
        {
            "name": "MonthDay",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/MonthDay.html",
            "description": "A month-day in the ISO-8601 calendar system, such as --12-03 . "
        },
        {
            "name": "MouseAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseAdapter.html",
            "description": "An abstract adapter class for receiving mouse events. "
        },
        {
            "name": "MouseDragGestureRecognizer",
            "package": "java.awt.dnd",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/dnd/MouseDragGestureRecognizer.html",
            "description": "This abstract subclass of DragGestureRecognizer defines a DragGestureRecognizer for mouse-based gestures. "
        },
        {
            "name": "MouseEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseEvent.html",
            "description": "An event which indicates that a mouse action occurred in a component. "
        },
        {
            "name": "MouseEvent",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/MouseEvent.html",
            "description": "The MouseEvent interface provides specific contextual information associated with Mouse events. "
        },
        {
            "name": "MouseInfo",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MouseInfo.html",
            "description": "MouseInfo provides methods for getting information about the mouse, such as mouse pointer location and the number of mouse buttons. "
        },
        {
            "name": "MouseInputAdapter",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MouseInputAdapter.html",
            "description": "An empty implementation of the MouseInputListener interface, provided as a convenience to simplify the task of creating listeners, by extending and implementing only the methods of interest. "
        },
        {
            "name": "MouseInputListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/MouseInputListener.html",
            "description": "A listener implementing all the methods in both the MouseListener and MouseMotionListener interfaces. "
        },
        {
            "name": "MouseListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseListener.html",
            "description": "The listener interface for receiving \"interesting\" mouse events (press, release, click, enter, and exit) on a component. "
        },
        {
            "name": "MouseMotionAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseMotionAdapter.html",
            "description": "An abstract adapter class for receiving mouse motion events. "
        },
        {
            "name": "MouseMotionListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseMotionListener.html",
            "description": "The listener interface for receiving mouse motion events on a component. "
        },
        {
            "name": "MouseWheelEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html",
            "description": "An event which indicates that the mouse wheel was rotated in a component. "
        },
        {
            "name": "MouseWheelListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/MouseWheelListener.html",
            "description": "The listener interface for receiving mouse wheel events on a component. "
        },
        {
            "name": "MultiButtonUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiButtonUI.html",
            "description": "A multiplexing UI used to combine ButtonUI s. "
        },
        {
            "name": "MulticastChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/MulticastChannel.html",
            "description": "A network channel that supports Internet Protocol (IP) multicasting. "
        },
        {
            "name": "MulticastSocket",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/MulticastSocket.html",
            "description": "The multicast datagram socket class is useful for sending and receiving IP multicast packets. "
        },
        {
            "name": "MultiColorChooserUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiColorChooserUI.html",
            "description": "A multiplexing UI used to combine ColorChooserUI s. "
        },
        {
            "name": "MultiComboBoxUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiComboBoxUI.html",
            "description": "A multiplexing UI used to combine ComboBoxUI s. "
        },
        {
            "name": "MultiDesktopIconUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiDesktopIconUI.html",
            "description": "A multiplexing UI used to combine DesktopIconUI s. "
        },
        {
            "name": "MultiDesktopPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiDesktopPaneUI.html",
            "description": "A multiplexing UI used to combine DesktopPaneUI s. "
        },
        {
            "name": "MultiDoc",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/MultiDoc.html",
            "description": "Interface MultiDoc specifies the interface for an object that supplies more than one piece of print data for a Print Job. "
        },
        {
            "name": "MultiDocPrintJob",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/MultiDocPrintJob.html",
            "description": "Obtained from a MultiDocPrintService , a MultiDocPrintJob can print a specified collection of documents as a single print job with a set of job attributes. "
        },
        {
            "name": "MultiDocPrintService",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/MultiDocPrintService.html",
            "description": "Interface MultiPrintService is the factory for a MultiDocPrintJob . "
        },
        {
            "name": "MultiFileChooserUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiFileChooserUI.html",
            "description": "A multiplexing UI used to combine FileChooserUI s. "
        },
        {
            "name": "MultiInternalFrameUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiInternalFrameUI.html",
            "description": "A multiplexing UI used to combine InternalFrameUI s. "
        },
        {
            "name": "MultiLabelUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiLabelUI.html",
            "description": "A multiplexing UI used to combine LabelUI s. "
        },
        {
            "name": "MultiListUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiListUI.html",
            "description": "A multiplexing UI used to combine ListUI s. "
        },
        {
            "name": "MultiLookAndFeel",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiLookAndFeel.html",
            "description": "A multiplexing look and feel that allows more than one UI to be associated with a component at the same time. "
        },
        {
            "name": "MultiMenuBarUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiMenuBarUI.html",
            "description": "A multiplexing UI used to combine MenuBarUI s. "
        },
        {
            "name": "MultiMenuItemUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiMenuItemUI.html",
            "description": "A multiplexing UI used to combine MenuItemUI s. "
        },
        {
            "name": "MultiOptionPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiOptionPaneUI.html",
            "description": "A multiplexing UI used to combine OptionPaneUI s. "
        },
        {
            "name": "MultiPanelUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiPanelUI.html",
            "description": "A multiplexing UI used to combine PanelUI s. "
        },
        {
            "name": "MultiPixelPackedSampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/MultiPixelPackedSampleModel.html",
            "description": "The MultiPixelPackedSampleModel class represents one-banded images and can pack multiple one-sample pixels into one data element. "
        },
        {
            "name": "MultipleDocumentHandling",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/MultipleDocumentHandling.html",
            "description": "Class MultipleDocumentHandling is a printing attribute class, an enumeration, that controls finishing operations and the placement of one or more print-stream pages into impressions and onto media sheets. "
        },
        {
            "name": "MultipleGradientPaint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MultipleGradientPaint.html",
            "description": "This is the superclass for Paints which use a multiple color gradient to fill in their raster. "
        },
        {
            "name": "MultipleGradientPaint.ColorSpaceType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MultipleGradientPaint.ColorSpaceType.html",
            "description": "The color space in which to perform the gradient interpolation. "
        },
        {
            "name": "MultipleGradientPaint.CycleMethod",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/MultipleGradientPaint.CycleMethod.html",
            "description": "The method to use when painting outside the gradient bounds. "
        },
        {
            "name": "MultipleMaster",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/MultipleMaster.html",
            "description": "The MultipleMaster interface represents Type 1 Multiple Master fonts. "
        },
        {
            "name": "MultiPopupMenuUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiPopupMenuUI.html",
            "description": "A multiplexing UI used to combine PopupMenuUI s. "
        },
        {
            "name": "MultiProgressBarUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiProgressBarUI.html",
            "description": "A multiplexing UI used to combine ProgressBarUI s. "
        },
        {
            "name": "MultiResolutionImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/MultiResolutionImage.html",
            "description": "This interface is designed to be an optional additional API supported by some implementations of Image to allow them to provide alternate images for various rendering resolutions. "
        },
        {
            "name": "MultiRootPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiRootPaneUI.html",
            "description": "A multiplexing UI used to combine RootPaneUI s. "
        },
        {
            "name": "MultiScrollBarUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiScrollBarUI.html",
            "description": "A multiplexing UI used to combine ScrollBarUI s. "
        },
        {
            "name": "MultiScrollPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiScrollPaneUI.html",
            "description": "A multiplexing UI used to combine ScrollPaneUI s. "
        },
        {
            "name": "MultiSeparatorUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiSeparatorUI.html",
            "description": "A multiplexing UI used to combine SeparatorUI s. "
        },
        {
            "name": "MultiSliderUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiSliderUI.html",
            "description": "A multiplexing UI used to combine SliderUI s. "
        },
        {
            "name": "MultiSpinnerUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiSpinnerUI.html",
            "description": "A multiplexing UI used to combine SpinnerUI s. "
        },
        {
            "name": "MultiSplitPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiSplitPaneUI.html",
            "description": "A multiplexing UI used to combine SplitPaneUI s. "
        },
        {
            "name": "MultiTabbedPaneUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiTabbedPaneUI.html",
            "description": "A multiplexing UI used to combine TabbedPaneUI s. "
        },
        {
            "name": "MultiTableHeaderUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiTableHeaderUI.html",
            "description": "A multiplexing UI used to combine TableHeaderUI s. "
        },
        {
            "name": "MultiTableUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiTableUI.html",
            "description": "A multiplexing UI used to combine TableUI s. "
        },
        {
            "name": "MultiTextUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiTextUI.html",
            "description": "A multiplexing UI used to combine TextUI s. "
        },
        {
            "name": "MultiToolBarUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiToolBarUI.html",
            "description": "A multiplexing UI used to combine ToolBarUI s. "
        },
        {
            "name": "MultiToolTipUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiToolTipUI.html",
            "description": "A multiplexing UI used to combine ToolTipUI s. "
        },
        {
            "name": "MultiTreeUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiTreeUI.html",
            "description": "A multiplexing UI used to combine TreeUI s. "
        },
        {
            "name": "MultiViewportUI",
            "package": "javax.swing.plaf.multi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/multi/MultiViewportUI.html",
            "description": "A multiplexing UI used to combine ViewportUI s. "
        },
        {
            "name": "MutableAttributeSet",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html",
            "description": "A generic interface for a mutable collection of unique attributes. "
        },
        {
            "name": "MutableCallSite",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/MutableCallSite.html",
            "description": "A MutableCallSite is a CallSite whose target variable behaves like an ordinary field. "
        },
        {
            "name": "MutableComboBoxModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/MutableComboBoxModel.html",
            "description": "A mutable version of ComboBoxModel . "
        },
        {
            "name": "MutableTreeNode",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html",
            "description": "Defines the requirements for a tree node object that can change -- by adding or removing child nodes, or by changing the contents of a user object stored in the node. "
        },
        {
            "name": "MutationEvent",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/MutationEvent.html",
            "description": "The MutationEvent interface provides specific contextual information associated with Mutation events. "
        },
        {
            "name": "MXBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/MXBean.html",
            "description": "Annotation to mark an interface explicitly as being an MXBean    interface, or as not being an MXBean interface. "
        },
        {
            "name": "Name",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/Name.html",
            "description": "An immutable sequence of characters. "
        },
        {
            "name": "Name",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/Name.html",
            "description": "The Name interface represents a generic name -- an ordered sequence of components. "
        },
        {
            "name": "Name",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Name.html",
            "description": "Annotation that overrides the default name for an element (for example, when the default package for an event is not appropriate). "
        },
        {
            "name": "NameAlreadyBoundException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html",
            "description": "This exception is thrown by methods to indicate that a binding cannot be added because the name is already bound to another object. "
        },
        {
            "name": "NameCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/NameCallback.html",
            "description": "Underlying security services instantiate and pass a NameCallback to the handle method of a CallbackHandler to retrieve name information. "
        },
        {
            "name": "NameClassPair",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NameClassPair.html",
            "description": "This class represents the object name and class name pair of a binding found in a context. "
        },
        {
            "name": "NamedNodeMap",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/NamedNodeMap.html",
            "description": "Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. "
        },
        {
            "name": "NamedOperation",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/NamedOperation.html",
            "description": "Operation that associates a name with another operation. "
        },
        {
            "name": "NamedParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/NamedParameterSpec.html",
            "description": "This class is used to specify any algorithm parameters that are determined by a standard name. "
        },
        {
            "name": "NameList",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/NameList.html",
            "description": "The NameList interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented. "
        },
        {
            "name": "NameNotFoundException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NameNotFoundException.html",
            "description": "This exception is thrown when a component of the name cannot be resolved because it is not bound. "
        },
        {
            "name": "NameParser",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NameParser.html",
            "description": "This interface is used for parsing names from a hierarchical namespace. "
        },
        {
            "name": "Namespace",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/Namespace.html",
            "description": "An interface that contains information about a namespace. "
        },
        {
            "name": "Namespace",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/Namespace.html",
            "description": "An object that describes a namespace that is the target of a dynamic operation on an object. "
        },
        {
            "name": "NamespaceChangeListener",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/NamespaceChangeListener.html",
            "description": "Specifies the methods that a listener interested in namespace changes must implement. "
        },
        {
            "name": "NamespaceContext",
            "package": "javax.xml.namespace",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/namespace/NamespaceContext.html",
            "description": "Interface for read only XML Namespace context processing. "
        },
        {
            "name": "NamespaceOperation",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/NamespaceOperation.html",
            "description": "Describes an operation that operates on at least one Namespace of an object. "
        },
        {
            "name": "NamespaceSupport",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html",
            "description": "Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. "
        },
        {
            "name": "Naming",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/Naming.html",
            "description": "The Naming class provides methods for storing and obtaining references to remote objects in a remote object registry. "
        },
        {
            "name": "NamingEnumeration",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NamingEnumeration.html",
            "description": "This interface is for enumerating lists returned by methods in the javax.naming and javax.naming.directory packages. "
        },
        {
            "name": "NamingEvent",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/NamingEvent.html",
            "description": "This class represents an event fired by a naming/directory service. "
        },
        {
            "name": "NamingException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NamingException.html",
            "description": "This is the superclass of all exceptions thrown by operations in the Context and DirContext interfaces. "
        },
        {
            "name": "NamingExceptionEvent",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/NamingExceptionEvent.html",
            "description": "This class represents an event fired when the procedures/processes used to collect information for notifying listeners of NamingEvent s threw a NamingException . "
        },
        {
            "name": "NamingListener",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/NamingListener.html",
            "description": "This interface is the root of listener interfaces that handle NamingEvent s. "
        },
        {
            "name": "NamingManager",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/NamingManager.html",
            "description": "This class contains methods for creating context objects and objects referred to by location information in the naming or directory service. "
        },
        {
            "name": "NamingSecurityException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NamingSecurityException.html",
            "description": "This is the superclass of security-related exceptions thrown by operations in the Context and DirContext interfaces. "
        },
        {
            "name": "Native",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Native.html",
            "description": "Indicates that a field defining a constant value may be referenced from native code. "
        },
        {
            "name": "NativeMethodException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/NativeMethodException.html",
            "description": "Thrown to indicate an operation cannot be completed because it is not valid for a native method. "
        },
        {
            "name": "NavigableMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/NavigableMap.html",
            "description": "A SortedMap extended with navigation methods returning the closest matches for given search targets. "
        },
        {
            "name": "NavigableSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/NavigableSet.html",
            "description": "A SortedSet extended with navigation methods reporting closest matches for given search targets. "
        },
        {
            "name": "NavigationFilter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/NavigationFilter.html",
            "description": "NavigationFilter can be used to restrict where the cursor can be positioned. "
        },
        {
            "name": "NavigationFilter.FilterBypass",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/NavigationFilter.FilterBypass.html",
            "description": "Used as a way to circumvent calling back into the caret to position the cursor. "
        },
        {
            "name": "NClob",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/NClob.html",
            "description": "The mapping in the Java programming language for the SQL NCLOB type. "
        },
        {
            "name": "NegativeArraySizeException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NegativeArraySizeException.html",
            "description": "Thrown if an application tries to create an array with negative size. "
        },
        {
            "name": "NestingKind",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/NestingKind.html",
            "description": "The nesting kind of a type element. "
        },
        {
            "name": "NetPermission",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/NetPermission.html",
            "description": "This class is for various network permissions. "
        },
        {
            "name": "NetworkChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NetworkChannel.html",
            "description": "A channel to a network socket. "
        },
        {
            "name": "NetworkInterface",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/NetworkInterface.html",
            "description": "This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. "
        },
        {
            "name": "NetworkPermission",
            "package": "jdk.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.net/jdk/net/NetworkPermission.html",
            "description": "Represents permission to access the extended networking capabilities defined in the jdk.net package. "
        },
        {
            "name": "NewArrayTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/NewArrayTree.html",
            "description": "A tree node for an expression to create a new instance of an array. "
        },
        {
            "name": "NewClassTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/NewClassTree.html",
            "description": "A tree node to declare a new instance of a class. "
        },
        {
            "name": "NimbusLookAndFeel",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/NimbusLookAndFeel.html",
            "description": "The NimbusLookAndFeel class. "
        },
        {
            "name": "NimbusStyle",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/NimbusStyle.html",
            "description": "A SynthStyle implementation used by Nimbus. "
        },
        {
            "name": "NoClassDefFoundError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NoClassDefFoundError.html",
            "description": "Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found. "
        },
        {
            "name": "NoConnectionPendingException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NoConnectionPendingException.html",
            "description": "Unchecked exception thrown when the finishConnect method of a SocketChannel is invoked without first successfully invoking its connect method. "
        },
        {
            "name": "Node",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Node.html",
            "description": "The Node interface is the primary datatype for the entire Document Object Model. "
        },
        {
            "name": "NodeChangeEvent",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/NodeChangeEvent.html",
            "description": "An event emitted by a Preferences node to indicate that a child of that node has been added or removed. "
        },
        {
            "name": "NodeChangeListener",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/NodeChangeListener.html",
            "description": "A listener for receiving preference node change events. "
        },
        {
            "name": "NodeFilter",
            "package": "org.w3c.dom.traversal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/traversal/NodeFilter.html",
            "description": "Filters are objects that know how to \"filter out\" nodes. "
        },
        {
            "name": "NodeIterator",
            "package": "org.w3c.dom.traversal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/traversal/NodeIterator.html",
            "description": "NodeIterators are used to step through a set of nodes, e.g. "
        },
        {
            "name": "NodeList",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/NodeList.html",
            "description": "The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. "
        },
        {
            "name": "NodeSetData",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/NodeSetData.html",
            "description": "An abstract representation of a Data type containing a node-set. "
        },
        {
            "name": "NoInitialContextException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NoInitialContextException.html",
            "description": "This exception is thrown when no initial context implementation can be created. "
        },
        {
            "name": "NoninvertibleTransformException",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/NoninvertibleTransformException.html",
            "description": "The NoninvertibleTransformException class represents an exception that is thrown if an operation is performed requiring the inverse of an AffineTransform object but the AffineTransform is in a non-invertible state. "
        },
        {
            "name": "NonReadableChannelException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NonReadableChannelException.html",
            "description": "Unchecked exception thrown when an attempt is made to read from a channel that was not originally opened for reading. "
        },
        {
            "name": "NonWritableChannelException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NonWritableChannelException.html",
            "description": "Unchecked exception thrown when an attempt is made to write to a channel that was not originally opened for writing. "
        },
        {
            "name": "NoPermissionException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NoPermissionException.html",
            "description": "This exception is thrown when attempting to perform an operation for which the client has no permission. "
        },
        {
            "name": "Normalizer",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Normalizer.html",
            "description": "This class provides the method normalize which transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text. "
        },
        {
            "name": "Normalizer.Form",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/Normalizer.Form.html",
            "description": "This enum provides constants of the four Unicode normalization forms that are described in Unicode Standard Annex #15 \u2014 Unicode Normalization Forms and two methods to access them. "
        },
        {
            "name": "NoRouteToHostException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/NoRouteToHostException.html",
            "description": "Signals that an error occurred while attempting to connect a socket to a remote address and port. "
        },
        {
            "name": "NoSuchAlgorithmException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/NoSuchAlgorithmException.html",
            "description": "This exception is thrown when a particular cryptographic algorithm is requested but is not available in the environment. "
        },
        {
            "name": "NoSuchAttributeException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/NoSuchAttributeException.html",
            "description": "This exception is thrown when attempting to access an attribute that does not exist. "
        },
        {
            "name": "NoSuchDynamicMethodException",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/NoSuchDynamicMethodException.html",
            "description": "Thrown at the invocation if the call site can not be linked by any available GuardingDynamicLinker . "
        },
        {
            "name": "NoSuchElementException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/NoSuchElementException.html",
            "description": "Thrown by various accessor methods to indicate that the element being requested does not exist. "
        },
        {
            "name": "NoSuchFieldError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NoSuchFieldError.html",
            "description": "Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field. "
        },
        {
            "name": "NoSuchFieldException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NoSuchFieldException.html",
            "description": "Signals that the class doesn't have a field of a specified name. "
        },
        {
            "name": "NoSuchFileException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/NoSuchFileException.html",
            "description": "Checked exception thrown when an attempt is made to access a file that does not exist. "
        },
        {
            "name": "NoSuchMechanismException",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/NoSuchMechanismException.html",
            "description": "This exception is thrown when a particular XML mechanism is requested but is not available in the environment. "
        },
        {
            "name": "NoSuchMethodError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NoSuchMethodError.html",
            "description": "Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method. "
        },
        {
            "name": "NoSuchMethodException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NoSuchMethodException.html",
            "description": "Thrown when a particular method cannot be found. "
        },
        {
            "name": "NoSuchObjectException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/NoSuchObjectException.html",
            "description": "A NoSuchObjectException is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine. "
        },
        {
            "name": "NoSuchPaddingException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/NoSuchPaddingException.html",
            "description": "This exception is thrown when a particular padding mechanism is requested but is not available in the environment. "
        },
        {
            "name": "NoSuchProviderException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/NoSuchProviderException.html",
            "description": "This exception is thrown when a particular security provider is requested but is not available in the environment. "
        },
        {
            "name": "NotActiveException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/NotActiveException.html",
            "description": "Thrown when serialization or deserialization is not active. "
        },
        {
            "name": "Notation",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Notation.html",
            "description": "This interface represents a notation declared in the DTD. "
        },
        {
            "name": "NotationDeclaration",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/NotationDeclaration.html",
            "description": "An interface for handling Notation Declarations Receive notification of a notation declaration event. "
        },
        {
            "name": "NotBoundException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/NotBoundException.html",
            "description": "A NotBoundException is thrown if an attempt is made to lookup or unbind in the registry a name that has no associated binding. "
        },
        {
            "name": "NotCompliantMBeanException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotCompliantMBeanException.html",
            "description": "Exception which occurs when trying to register an  object in the MBean server that is not a JMX compliant MBean. "
        },
        {
            "name": "NotContextException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/NotContextException.html",
            "description": "This exception is thrown when a naming operation proceeds to a point where a context is required to continue the operation, but the resolved object is not a context. "
        },
        {
            "name": "NotDirectoryException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/NotDirectoryException.html",
            "description": "Checked exception thrown when a file system operation, intended for a directory, fails because the file is not a directory. "
        },
        {
            "name": "Notification",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/Notification.html",
            "description": "A notification from the SCTP stack. "
        },
        {
            "name": "Notification",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/Notification.html",
            "description": "The Notification class represents a notification emitted by an MBean. "
        },
        {
            "name": "NotificationBroadcaster",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationBroadcaster.html",
            "description": "Interface implemented by an MBean that emits Notifications. "
        },
        {
            "name": "NotificationBroadcasterSupport",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationBroadcasterSupport.html",
            "description": "Provides an implementation of NotificationEmitter interface. "
        },
        {
            "name": "NotificationEmitter",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationEmitter.html",
            "description": "Interface implemented by an MBean that emits Notifications. "
        },
        {
            "name": "NotificationFilter",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationFilter.html",
            "description": "To be implemented by a any class acting as a notification filter. "
        },
        {
            "name": "NotificationFilterSupport",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationFilterSupport.html",
            "description": "Provides an implementation of the NotificationFilter interface. "
        },
        {
            "name": "NotificationHandler",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/NotificationHandler.html",
            "description": "A handler for consuming notifications from the SCTP stack. "
        },
        {
            "name": "NotificationListener",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/NotificationListener.html",
            "description": "Should be implemented by an object that wants to receive notifications. "
        },
        {
            "name": "NotificationResult",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/NotificationResult.html",
            "description": "Result of a query for buffered notifications. "
        },
        {
            "name": "NotLinkException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/NotLinkException.html",
            "description": "Checked exception thrown when a file system operation fails because a file is not a symbolic link. "
        },
        {
            "name": "NotSerializableException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/NotSerializableException.html",
            "description": "Thrown when an instance is required to have a Serializable interface. "
        },
        {
            "name": "NotYetBoundException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NotYetBoundException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a server socket channel that is not yet bound. "
        },
        {
            "name": "NotYetConnectedException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/NotYetConnectedException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a socket channel that is not yet connected. "
        },
        {
            "name": "NoType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/NoType.html",
            "description": "A pseudo-type used where no actual type is appropriate. "
        },
        {
            "name": "NTDomainPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTDomainPrincipal.html",
            "description": "This class implements the Principal interface and represents the name of the Windows NT domain into which the user authenticated. "
        },
        {
            "name": "NTLoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/NTLoginModule.html",
            "description": "This LoginModule renders a user's NT security information as some number of Principal s and associates them with a Subject . "
        },
        {
            "name": "NTNumericCredential",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTNumericCredential.html",
            "description": "This class abstracts an NT security token and provides a mechanism to do same-process security impersonation. "
        },
        {
            "name": "NTSid",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTSid.html",
            "description": "This class implements the Principal interface and represents information about a Windows NT user, group or realm. "
        },
        {
            "name": "NTSidDomainPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTSidDomainPrincipal.html",
            "description": "This class extends NTSid and represents a Windows NT user's domain SID. "
        },
        {
            "name": "NTSidGroupPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTSidGroupPrincipal.html",
            "description": "This class extends NTSid and represents one of the groups to which a Windows NT user belongs. "
        },
        {
            "name": "NTSidPrimaryGroupPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTSidPrimaryGroupPrincipal.html",
            "description": "This class extends NTSid and represents a Windows NT user's primary group SID. "
        },
        {
            "name": "NTSidUserPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTSidUserPrincipal.html",
            "description": "This class extends NTSid and represents a Windows NT user's SID. "
        },
        {
            "name": "NTSystem",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/NTSystem.html",
            "description": "This class implementation retrieves and makes available NT security information for the current user. "
        },
        {
            "name": "NTUserPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/NTUserPrincipal.html",
            "description": "This class implements the Principal interface and represents a Windows NT user. "
        },
        {
            "name": "NullCipher",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/NullCipher.html",
            "description": "The NullCipher class is a class that provides an \"identity cipher\" -- one that does not transform the plain text. "
        },
        {
            "name": "NullPointerException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NullPointerException.html",
            "description": "Thrown when an application attempts to use null in a case where an object is required. "
        },
        {
            "name": "NullType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/NullType.html",
            "description": "Represents the null type. "
        },
        {
            "name": "Number",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Number.html",
            "description": "The abstract class Number is the superclass of platform classes representing numeric values that are convertible to the primitive types byte , double , float , int , long , and short . "
        },
        {
            "name": "NumberFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/NumberFormat.html",
            "description": "NumberFormat is the abstract base class for all number formats. "
        },
        {
            "name": "NumberFormat.Field",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/NumberFormat.Field.html",
            "description": "Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from NumberFormat.formatToCharacterIterator and as field identifiers in FieldPosition . "
        },
        {
            "name": "NumberFormat.Style",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/NumberFormat.Style.html",
            "description": "A number format style. "
        },
        {
            "name": "NumberFormatException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/NumberFormatException.html",
            "description": "Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format. "
        },
        {
            "name": "NumberFormatProvider",
            "package": "java.text.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/spi/NumberFormatProvider.html",
            "description": "An abstract class for service providers that provide concrete implementations of the NumberFormat class. "
        },
        {
            "name": "NumberFormatter",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/NumberFormatter.html",
            "description": "NumberFormatter subclasses InternationalFormatter adding special behavior for numbers. "
        },
        {
            "name": "NumberOfDocuments",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/NumberOfDocuments.html",
            "description": "Class NumberOfDocuments is an integer valued printing attribute that indicates the number of individual docs the printer has accepted for this job, regardless of whether the docs' print data has reached the printer or not. "
        },
        {
            "name": "NumberOfInterveningJobs",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/NumberOfInterveningJobs.html",
            "description": "Class NumberOfInterveningJobs is an integer valued printing attribute that indicates the number of jobs that are ahead of this job in the relative chronological order of expected time to complete (i.e., the current scheduled order). "
        },
        {
            "name": "NumberUp",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/NumberUp.html",
            "description": "Class NumberUp is an integer valued printing attribute class that specifies the number of print-stream pages to impose upon a single side of an instance of a selected medium. "
        },
        {
            "name": "NumberUpSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/NumberUpSupported.html",
            "description": "Class NumberUpSupported is a printing attribute class, a set of integers, that gives the supported values for a NumberUp attribute. "
        },
        {
            "name": "NumericShaper",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/NumericShaper.html",
            "description": "The NumericShaper class is used to convert Latin-1 (European) digits to other Unicode decimal digits. "
        },
        {
            "name": "NumericShaper.Range",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html",
            "description": "A NumericShaper.Range represents a Unicode range of a script having its own decimal digits. "
        },
        {
            "name": "OAEPParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/OAEPParameterSpec.html",
            "description": "This class specifies the set of parameters used with OAEP Padding, as defined in the PKCS#1 v2.2 standard. "
        },
        {
            "name": "ObjDoubleConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ObjDoubleConsumer.html",
            "description": "Represents an operation that accepts an object-valued and a double -valued argument, and returns no result. "
        },
        {
            "name": "Object",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Object.html",
            "description": "Class Object is the root of the class hierarchy. "
        },
        {
            "name": "ObjectChangeListener",
            "package": "javax.naming.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/event/ObjectChangeListener.html",
            "description": "Specifies the method that a listener of a NamingEvent with event type of OBJECT_CHANGED must implement. "
        },
        {
            "name": "ObjectCollectedException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ObjectCollectedException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed because the specified object has been garbage collected. "
        },
        {
            "name": "ObjectFactory",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/ObjectFactory.html",
            "description": "This interface represents a factory for creating an object. "
        },
        {
            "name": "ObjectFactoryBuilder",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/ObjectFactoryBuilder.html",
            "description": "This interface represents a builder that creates object factories. "
        },
        {
            "name": "ObjectInput",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInput.html",
            "description": "ObjectInput extends the DataInput interface to include the reading of objects. "
        },
        {
            "name": "ObjectInputFilter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputFilter.html",
            "description": "Filter classes, array lengths, and graph metrics during deserialization. "
        },
        {
            "name": "ObjectInputFilter.Config",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputFilter.Config.html",
            "description": "A utility class to set and get the system-wide filter or create a filter from a pattern string. "
        },
        {
            "name": "ObjectInputFilter.FilterInfo",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputFilter.FilterInfo.html",
            "description": "FilterInfo provides access to information about the current object being deserialized and the status of the ObjectInputStream . "
        },
        {
            "name": "ObjectInputFilter.Status",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputFilter.Status.html",
            "description": "The status of a check on the class, array length, number of references, depth, and stream size. "
        },
        {
            "name": "ObjectInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputStream.html",
            "description": "An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream. "
        },
        {
            "name": "ObjectInputStream.GetField",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputStream.GetField.html",
            "description": "Provide access to the persistent fields read from the input stream. "
        },
        {
            "name": "ObjectInputValidation",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectInputValidation.html",
            "description": "Callback interface to allow validation of objects within a graph. "
        },
        {
            "name": "ObjectInstance",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ObjectInstance.html",
            "description": "Used to represent the object name of an MBean and its class name. "
        },
        {
            "name": "ObjectMethods",
            "package": "java.lang.runtime",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/runtime/ObjectMethods.html",
            "description": "Associated with records, a preview feature of the Java language. Bootstrap methods for state-driven implementations of core methods, including Object.equals(Object) , Object.hashCode() , and Object.toString() . "
        },
        {
            "name": "ObjectName",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ObjectName.html",
            "description": "Represents the object name of an MBean, or a pattern that can match the names of several MBeans. "
        },
        {
            "name": "ObjectOutput",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectOutput.html",
            "description": "ObjectOutput extends the DataOutput interface to include writing of objects. "
        },
        {
            "name": "ObjectOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectOutputStream.html",
            "description": "An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. "
        },
        {
            "name": "ObjectOutputStream.PutField",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectOutputStream.PutField.html",
            "description": "Provide programmatic access to the persistent fields to be written to ObjectOutput. "
        },
        {
            "name": "ObjectReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ObjectReference.html",
            "description": "An object that currently exists in the target VM. "
        },
        {
            "name": "Objects",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Objects.html",
            "description": "This class consists of static utility methods for operating on objects, or checking certain conditions before operation. "
        },
        {
            "name": "ObjectStreamClass",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectStreamClass.html",
            "description": "Serialization's descriptor for classes. "
        },
        {
            "name": "ObjectStreamConstants",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectStreamConstants.html",
            "description": "Constants written into the Object Serialization Stream. "
        },
        {
            "name": "ObjectStreamException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectStreamException.html",
            "description": "Superclass of all exceptions specific to Object Stream classes. "
        },
        {
            "name": "ObjectStreamField",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/ObjectStreamField.html",
            "description": "A description of a Serializable field from a Serializable class. "
        },
        {
            "name": "ObjectView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/ObjectView.html",
            "description": "Component decorator that implements the view interface for <object> elements. "
        },
        {
            "name": "ObjID",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/ObjID.html",
            "description": "An ObjID is used to identify a remote object exported to an RMI runtime. "
        },
        {
            "name": "ObjIntConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ObjIntConsumer.html",
            "description": "Represents an operation that accepts an object-valued and a int -valued argument, and returns no result. "
        },
        {
            "name": "ObjLongConsumer",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ObjLongConsumer.html",
            "description": "Represents an operation that accepts an object-valued and a long -valued argument, and returns no result. "
        },
        {
            "name": "Observable",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Observable.html",
            "description": "This class and the Observer interface have been deprecated. "
        },
        {
            "name": "Observer",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Observer.html",
            "description": "This interface has been deprecated. "
        },
        {
            "name": "OceanTheme",
            "package": "javax.swing.plaf.metal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/metal/OceanTheme.html",
            "description": "The default theme for the MetalLookAndFeel . "
        },
        {
            "name": "OctetStreamData",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/OctetStreamData.html",
            "description": "A representation of a Data type containing an octet stream. "
        },
        {
            "name": "OffsetDateTime",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/OffsetDateTime.html",
            "description": "A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 . "
        },
        {
            "name": "OffsetTime",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/OffsetTime.html",
            "description": "A time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 10:15:30+01:00 . "
        },
        {
            "name": "Oid",
            "package": "org.ietf.jgss",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/org/ietf/jgss/Oid.html",
            "description": "This class represents Universal Object Identifiers (Oids) and their associated operations. "
        },
        {
            "name": "OpenDataException",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenDataException.html",
            "description": "This checked exception is thrown when an open type , an open data or an open MBean metadata info instance could not be constructed because one or more validity constraints were not met. "
        },
        {
            "name": "OpenFilesEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/OpenFilesEvent.html",
            "description": "Event sent when the app is asked to open a list of files. "
        },
        {
            "name": "OpenFilesHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/OpenFilesHandler.html",
            "description": "An implementor is notified when the application is asked to open a list of files. "
        },
        {
            "name": "OpenMBeanAttributeInfo",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanAttributeInfo.html",
            "description": "Describes an attribute of an open MBean. "
        },
        {
            "name": "OpenMBeanAttributeInfoSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanAttributeInfoSupport.html",
            "description": "Describes an attribute of an open MBean. "
        },
        {
            "name": "OpenMBeanConstructorInfo",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanConstructorInfo.html",
            "description": "Describes a constructor of an Open MBean. "
        },
        {
            "name": "OpenMBeanConstructorInfoSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanConstructorInfoSupport.html",
            "description": "Describes a constructor of an Open MBean. "
        },
        {
            "name": "OpenMBeanInfo",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanInfo.html",
            "description": "Describes an Open MBean: an Open MBean is recognized as such if its getMBeanInfo() method returns an instance of a class which implements the OpenMBeanInfo interface, typically OpenMBeanInfoSupport . "
        },
        {
            "name": "OpenMBeanInfoSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanInfoSupport.html",
            "description": "The OpenMBeanInfoSupport class describes the management information of an open MBean : it is a subclass of MBeanInfo , and it implements the OpenMBeanInfo interface. "
        },
        {
            "name": "OpenMBeanOperationInfo",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanOperationInfo.html",
            "description": "Describes an operation of an Open MBean. "
        },
        {
            "name": "OpenMBeanOperationInfoSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanOperationInfoSupport.html",
            "description": "Describes an operation of an Open MBean. "
        },
        {
            "name": "OpenMBeanParameterInfo",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanParameterInfo.html",
            "description": "Describes a parameter used in one or more operations or constructors of an open MBean. "
        },
        {
            "name": "OpenMBeanParameterInfoSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenMBeanParameterInfoSupport.html",
            "description": "Describes a parameter used in one or more operations or constructors of an open MBean. "
        },
        {
            "name": "OpenOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/OpenOption.html",
            "description": "An object that configures how to open or create a file. "
        },
        {
            "name": "OpensTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/OpensTree.html",
            "description": "A tree node for an 'opens' directive in a module declaration. "
        },
        {
            "name": "OpenType",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/OpenType.html",
            "description": "The OpenType interface represents OpenType and TrueType fonts. "
        },
        {
            "name": "OpenType",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/OpenType.html",
            "description": "The OpenType class is the parent abstract class of all classes which describe the actual open type of open data values. "
        },
        {
            "name": "OpenURIEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/OpenURIEvent.html",
            "description": "Event sent when the app is asked to open a URI . "
        },
        {
            "name": "OpenURIHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/OpenURIHandler.html",
            "description": "An implementor is notified when the application is asked to open a URI. "
        },
        {
            "name": "OperatingSystemMXBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html",
            "description": "Platform-specific management interface for the operating system on which the Java virtual machine is running. "
        },
        {
            "name": "OperatingSystemMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html",
            "description": "The management interface for the operating system on which the Java virtual machine is running. "
        },
        {
            "name": "Operation",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/Operation.html",
            "description": "no replacement "
        },
        {
            "name": "Operation",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/Operation.html",
            "description": "An object that describes a dynamic operation. "
        },
        {
            "name": "OperationNotSupportedException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/OperationNotSupportedException.html",
            "description": "This exception is thrown when a context implementation does not support the operation being invoked. "
        },
        {
            "name": "OperationsException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/OperationsException.html",
            "description": "Represents exceptions thrown in the MBean server when performing operations on MBeans. "
        },
        {
            "name": "Option",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/Option.html",
            "description": "Value for the ListModel used to represent <option> elements. "
        },
        {
            "name": "Optional",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Optional.html",
            "description": "A container object which may or may not contain a non- null value. "
        },
        {
            "name": "OptionalDataException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/OptionalDataException.html",
            "description": "Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream. "
        },
        {
            "name": "OptionalDouble",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/OptionalDouble.html",
            "description": "A container object which may or may not contain a double value. "
        },
        {
            "name": "OptionalInt",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/OptionalInt.html",
            "description": "A container object which may or may not contain an int value. "
        },
        {
            "name": "OptionalLong",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/OptionalLong.html",
            "description": "A container object which may or may not contain a long value. "
        },
        {
            "name": "OptionChecker",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/OptionChecker.html",
            "description": "Interface for recognizing options. "
        },
        {
            "name": "OptionPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/OptionPaneUI.html",
            "description": "Pluggable look and feel interface for JOptionPane. "
        },
        {
            "name": "OrientationRequested",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/OrientationRequested.html",
            "description": "Class OrientationRequested is a printing attribute class, an enumeration, that indicates the desired orientation for printed print-stream pages; it does not describe the orientation of the client-supplied print-stream pages. "
        },
        {
            "name": "OutOfMemoryError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/OutOfMemoryError.html",
            "description": "Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector. "
        },
        {
            "name": "OutputDeviceAssigned",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/OutputDeviceAssigned.html",
            "description": "Class OutputDeviceAssigned is a printing attribute class, a text attribute, that identifies the output device to which the service has assigned this job. "
        },
        {
            "name": "OutputKeys",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/OutputKeys.html",
            "description": "Provides string constants that can be used to set output properties for a Transformer, or to retrieve output properties from a Transformer or Templates object. "
        },
        {
            "name": "OutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/OutputStream.html",
            "description": "This abstract class is the superclass of all classes representing an output stream of bytes. "
        },
        {
            "name": "OutputStreamWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/OutputStreamWriter.html",
            "description": "An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified charset . "
        },
        {
            "name": "OverlappingFileLockException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html",
            "description": "Unchecked exception thrown when an attempt is made to acquire a lock on a region of a file that overlaps a region already locked by the same Java virtual machine, or when another thread is already waiting to lock an overlapping region of the same file. "
        },
        {
            "name": "OverlayLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/OverlayLayout.html",
            "description": "A layout manager to arrange components over the top of each other. "
        },
        {
            "name": "Override",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Override.html",
            "description": "Indicates that a method declaration is intended to override a method declaration in a supertype. "
        },
        {
            "name": "Package",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Package.html",
            "description": "Represents metadata about a run-time package associated with a class loader. "
        },
        {
            "name": "PackageElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/PackageElement.html",
            "description": "Represents a package program element. "
        },
        {
            "name": "PackageTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/PackageTree.html",
            "description": "Represents the package declaration. "
        },
        {
            "name": "PackedColorModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/PackedColorModel.html",
            "description": "The PackedColorModel class is an abstract ColorModel class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity. "
        },
        {
            "name": "Pageable",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/Pageable.html",
            "description": "The Pageable implementation represents a set of pages to be printed. "
        },
        {
            "name": "PageAttributes",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.html",
            "description": "A set of attributes which control the output of a printed page. "
        },
        {
            "name": "PageAttributes.ColorType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.ColorType.html",
            "description": "A type-safe enumeration of possible color states. "
        },
        {
            "name": "PageAttributes.MediaType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.MediaType.html",
            "description": "A type-safe enumeration of possible paper sizes. "
        },
        {
            "name": "PageAttributes.OrientationRequestedType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.OrientationRequestedType.html",
            "description": "A type-safe enumeration of possible orientations. "
        },
        {
            "name": "PageAttributes.OriginType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.OriginType.html",
            "description": "A type-safe enumeration of possible origins. "
        },
        {
            "name": "PageAttributes.PrintQualityType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PageAttributes.PrintQualityType.html",
            "description": "A type-safe enumeration of possible print qualities. "
        },
        {
            "name": "PagedResultsControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/PagedResultsControl.html",
            "description": "Requests that the results of a search operation be returned by the LDAP server in batches of a specified size. "
        },
        {
            "name": "PagedResultsResponseControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/PagedResultsResponseControl.html",
            "description": "Indicates the end of a batch of search results. "
        },
        {
            "name": "PageFormat",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PageFormat.html",
            "description": "The PageFormat class describes the size and orientation of a page to be printed. "
        },
        {
            "name": "PageRanges",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PageRanges.html",
            "description": "Class PageRanges is a printing attribute class, a set of integers, that identifies the range(s) of print-stream pages that the Printer object uses for each copy of each document which are to be printed. "
        },
        {
            "name": "PagesPerMinute",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PagesPerMinute.html",
            "description": "Class PagesPerMinute is an integer valued printing attribute that indicates the nominal number of pages per minute to the nearest whole number which may be generated by this printer (e.g., simplex, black-and-white). "
        },
        {
            "name": "PagesPerMinuteColor",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PagesPerMinuteColor.html",
            "description": "Class PagesPerMinuteColor is an integer valued printing attribute that indicates the nominal number of pages per minute to the nearest whole number which may be generated by this printer when printing color (e.g., simplex, color). "
        },
        {
            "name": "Paint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Paint.html",
            "description": "This Paint interface defines how color patterns can be generated for Graphics2D operations. "
        },
        {
            "name": "PaintContext",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PaintContext.html",
            "description": "The PaintContext interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a Graphics2D . "
        },
        {
            "name": "Painter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Painter.html",
            "description": "A painting delegate. "
        },
        {
            "name": "PaintEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/PaintEvent.html",
            "description": "The component-level paint event. "
        },
        {
            "name": "Panel",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Panel.html",
            "description": "Panel is the simplest container class. "
        },
        {
            "name": "PanelUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/PanelUI.html",
            "description": "Pluggable look and feel interface for Panel. "
        },
        {
            "name": "Paper",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/Paper.html",
            "description": "The Paper class describes the physical characteristics of a piece of paper. "
        },
        {
            "name": "ParagraphView",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/ParagraphView.html",
            "description": "Displays the a paragraph, and uses css attributes for its configuration. "
        },
        {
            "name": "ParagraphView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ParagraphView.html",
            "description": "View of a simple line-wrapping paragraph that supports multiple fonts, colors, components, icons, etc. "
        },
        {
            "name": "Parameter",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Parameter.html",
            "description": "Information about method parameters. "
        },
        {
            "name": "ParameterBlock",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/ParameterBlock.html",
            "description": "A ParameterBlock encapsulates all the information about sources and parameters (Objects) required by a RenderableImageOp, or other classes that process images. "
        },
        {
            "name": "ParameterDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/ParameterDescriptor.html",
            "description": "The ParameterDescriptor class allows bean implementors to provide additional information on each of their parameters, beyond the low level type information provided by the java.lang.reflect.Method class. "
        },
        {
            "name": "Parameterizable",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/Parameterizable.html",
            "description": "A mixin interface for an element that has type parameters. "
        },
        {
            "name": "ParameterizedType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/ParameterizedType.html",
            "description": "ParameterizedType represents a parameterized type such as Collection<String>. "
        },
        {
            "name": "ParameterizedTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ParameterizedTypeTree.html",
            "description": "A tree node for a type expression involving type parameters. "
        },
        {
            "name": "ParameterMetaData",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ParameterMetaData.html",
            "description": "An object that can be used to get information about the types and properties for each parameter marker in a PreparedStatement object. "
        },
        {
            "name": "ParameterNameProvider",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/ParameterNameProvider.html",
            "description": "A provider for parameter names when the parameter names are not determined from a reliable source, like a classfile. "
        },
        {
            "name": "ParamTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ParamTree.html",
            "description": "A tree node for an @param block tag. "
        },
        {
            "name": "ParenthesizedTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ParenthesizedTree.html",
            "description": "A tree node for a parenthesized expression. "
        },
        {
            "name": "ParseException",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/ParseException.html",
            "description": "Signals that an error has been reached unexpectedly while parsing. "
        },
        {
            "name": "ParsePosition",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/ParsePosition.html",
            "description": "ParsePosition is a simple class used by Format and its subclasses to keep track of the current position during parsing. "
        },
        {
            "name": "Parser",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/Parser.html",
            "description": "A simple DTD-driven HTML parser. "
        },
        {
            "name": "Parser",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/Parser.html",
            "description": "This interface has been replaced by the SAX2 XMLReader interface, which includes Namespace support. "
        },
        {
            "name": "ParserAdapter",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/ParserAdapter.html",
            "description": "Adapt a SAX1 Parser as a SAX2 XMLReader. "
        },
        {
            "name": "ParserConfigurationException",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/ParserConfigurationException.html",
            "description": "Indicates a serious configuration error. "
        },
        {
            "name": "ParserDelegator",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/ParserDelegator.html",
            "description": "Responsible for starting up a new DocumentParser each time its parse method is invoked. "
        },
        {
            "name": "ParserFactory",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/ParserFactory.html",
            "description": "This class works with the deprecated Parser interface. "
        },
        {
            "name": "PartialResultException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/PartialResultException.html",
            "description": "This exception is thrown to indicate that the result being returned or returned so far is partial, and that the operation cannot be completed. "
        },
        {
            "name": "PasswordAuthentication",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/PasswordAuthentication.html",
            "description": "The class PasswordAuthentication is a data holder that is used by Authenticator. "
        },
        {
            "name": "PasswordCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/PasswordCallback.html",
            "description": "Underlying security services instantiate and pass a PasswordCallback to the handle method of a CallbackHandler to retrieve password information. "
        },
        {
            "name": "PasswordView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/PasswordView.html",
            "description": "Implements a View suitable for use in JPasswordField UI implementations. "
        },
        {
            "name": "Patch",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Patch.html",
            "description": "A Patch object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded). "
        },
        {
            "name": "Path",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/Path.html",
            "description": "An object that may be used to locate a file in a file system. "
        },
        {
            "name": "Path2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Path2D.html",
            "description": "The Path2D class provides a simple, yet flexible shape which represents an arbitrary geometric path. "
        },
        {
            "name": "Path2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Path2D.Double.html",
            "description": "The Double class defines a geometric path with coordinates stored in double precision floating point. "
        },
        {
            "name": "Path2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Path2D.Float.html",
            "description": "The Float class defines a geometric path with coordinates stored in single precision floating point. "
        },
        {
            "name": "PathIterator",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/PathIterator.html",
            "description": "The PathIterator interface provides the mechanism for objects that implement the Shape interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time. "
        },
        {
            "name": "PathMatcher",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/PathMatcher.html",
            "description": "An interface that is implemented by objects that perform match operations on paths. "
        },
        {
            "name": "Paths",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/Paths.html",
            "description": "This class consists exclusively of static methods that return a Path by converting a path string or URI . "
        },
        {
            "name": "PathSearchingVirtualMachine",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/PathSearchingVirtualMachine.html",
            "description": "A virtual machine which searches for classes through paths "
        },
        {
            "name": "Pattern",
            "package": "java.util.regex",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/regex/Pattern.html",
            "description": "A compiled representation of a regular expression. "
        },
        {
            "name": "PatternSyntaxException",
            "package": "java.util.regex",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/regex/PatternSyntaxException.html",
            "description": "Unchecked exception thrown to indicate a syntax error in a regular-expression pattern. "
        },
        {
            "name": "PatternTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/PatternTree.html",
            "description": "Associated with pattern matching for instanceof, a preview feature of           the Java language. A tree node used as the base class for the different kinds of statements. "
        },
        {
            "name": "PBEKey",
            "package": "javax.crypto.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/interfaces/PBEKey.html",
            "description": "The interface to a PBE key. "
        },
        {
            "name": "PBEKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/PBEKeySpec.html",
            "description": "A user-chosen password that can be used with password-based encryption ( PBE ). "
        },
        {
            "name": "PBEParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/PBEParameterSpec.html",
            "description": "This class specifies the set of parameters used with password-based encryption (PBE), as defined in the PKCS #5 standard. "
        },
        {
            "name": "PDLOverrideSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PDLOverrideSupported.html",
            "description": "Class PDLOverrideSupported is a printing attribute class, an enumeration, that expresses the printer's ability to attempt to override processing instructions embedded in documents' print data with processing instructions specified as attributes outside the print data. "
        },
        {
            "name": "PeerAddressChangeNotification",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/PeerAddressChangeNotification.html",
            "description": "Notification emitted when a destination address on a multi-homed peer encounters a change. "
        },
        {
            "name": "PeerAddressChangeNotification.AddressChangeEvent",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/PeerAddressChangeNotification.AddressChangeEvent.html",
            "description": "Defines the type of address change event that occurred to the destination address on a multi-homed peer when it encounters a change of interface details. "
        },
        {
            "name": "Percentage",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Percentage.html",
            "description": "Event field annotation to use on fractions, typically between 0.0 and 1.0 , to specify that the value is a percentage. "
        },
        {
            "name": "Period",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Period.html",
            "description": "A date-based amount of time in the ISO-8601 calendar system, such as '2 years, 3 months and 4 days'. "
        },
        {
            "name": "Period",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Period.html",
            "description": "Event annotation, specifies the default setting value for a periodic event. "
        },
        {
            "name": "Permission",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Permission.html",
            "description": "Abstract class for representing access to a system resource. "
        },
        {
            "name": "PermissionCollection",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PermissionCollection.html",
            "description": "Abstract class representing a collection of Permission objects. "
        },
        {
            "name": "Permissions",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Permissions.html",
            "description": "This class represents a heterogeneous collection of Permissions. "
        },
        {
            "name": "PersistenceDelegate",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PersistenceDelegate.html",
            "description": "The PersistenceDelegate class takes the responsibility for expressing the state of an instance of a given class in terms of the methods in the class's public API. "
        },
        {
            "name": "PersistentMBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/PersistentMBean.html",
            "description": "This class is the interface to be implemented by MBeans that are meant to be  persistent. "
        },
        {
            "name": "PersistentSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/PersistentSnippet.html",
            "description": "Grouping for Snippets which persist and influence future code. "
        },
        {
            "name": "PGPData",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/PGPData.html",
            "description": "A representation of the XML PGPData element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "PhantomReference",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/PhantomReference.html",
            "description": "Phantom reference objects, which are enqueued after the collector determines that their referents may otherwise be reclaimed. "
        },
        {
            "name": "Phaser",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Phaser.html",
            "description": "A reusable synchronization barrier, similar in functionality to CyclicBarrier and CountDownLatch but supporting more flexible usage. "
        },
        {
            "name": "Pipe",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Pipe.html",
            "description": "A pair of channels that implements a unidirectional pipe. "
        },
        {
            "name": "Pipe.SinkChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Pipe.SinkChannel.html",
            "description": "A channel representing the writable end of a Pipe . "
        },
        {
            "name": "Pipe.SourceChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Pipe.SourceChannel.html",
            "description": "A channel representing the readable end of a Pipe . "
        },
        {
            "name": "PipedInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PipedInputStream.html",
            "description": "A piped input stream should be connected to a piped output stream; the piped  input stream then provides whatever data bytes are written to the piped output  stream. "
        },
        {
            "name": "PipedOutputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PipedOutputStream.html",
            "description": "A piped output stream can be connected to a piped input stream to create a communications pipe. "
        },
        {
            "name": "PipedReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PipedReader.html",
            "description": "Piped character-input streams. "
        },
        {
            "name": "PipedWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PipedWriter.html",
            "description": "Piped character-output streams. "
        },
        {
            "name": "PixelGrabber",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/PixelGrabber.html",
            "description": "The PixelGrabber class implements an ImageConsumer which can be attached to an Image or ImageProducer object to retrieve a subset of the pixels in that image. "
        },
        {
            "name": "PixelInterleavedSampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/PixelInterleavedSampleModel.html",
            "description": "This class represents image data which is stored in a pixel interleaved  fashion and for  which each sample of a pixel occupies one data element of the DataBuffer. "
        },
        {
            "name": "PKCS12Attribute",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PKCS12Attribute.html",
            "description": "An attribute associated with a PKCS12 keystore entry. "
        },
        {
            "name": "PKCS8EncodedKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/PKCS8EncodedKeySpec.html",
            "description": "This class represents the ASN.1 encoding of a private key, encoded according to the ASN.1 type PrivateKeyInfo . "
        },
        {
            "name": "PKIXBuilderParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXBuilderParameters.html",
            "description": "Parameters used as input for the PKIX CertPathBuilder algorithm. "
        },
        {
            "name": "PKIXCertPathBuilderResult",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXCertPathBuilderResult.html",
            "description": "This class represents the successful result of the PKIX certification path builder algorithm. "
        },
        {
            "name": "PKIXCertPathChecker",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXCertPathChecker.html",
            "description": "An abstract class that performs one or more checks on an X509Certificate . "
        },
        {
            "name": "PKIXCertPathValidatorResult",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXCertPathValidatorResult.html",
            "description": "This class represents the successful result of the PKIX certification path validation algorithm. "
        },
        {
            "name": "PKIXParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXParameters.html",
            "description": "Parameters used as input for the PKIX CertPathValidator algorithm. "
        },
        {
            "name": "PKIXReason",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXReason.html",
            "description": "The PKIXReason enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard. "
        },
        {
            "name": "PKIXRevocationChecker",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXRevocationChecker.html",
            "description": "A PKIXCertPathChecker for checking the revocation status of certificates with the PKIX algorithm. "
        },
        {
            "name": "PKIXRevocationChecker.Option",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PKIXRevocationChecker.Option.html",
            "description": "Various revocation options that can be specified for the revocation checking mechanism. "
        },
        {
            "name": "PlainDocument",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/PlainDocument.html",
            "description": "A plain document that maintains no character attributes. "
        },
        {
            "name": "PlainView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/PlainView.html",
            "description": "Implements View interface for a simple multi-line text view that has text in one font and color. "
        },
        {
            "name": "PlatformLoggingMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/PlatformLoggingMXBean.html",
            "description": "The management interface for the logging facility. "
        },
        {
            "name": "PlatformManagedObject",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/PlatformManagedObject.html",
            "description": "A platform managed object is a JMX MXBean for monitoring and managing a component in the Java platform. "
        },
        {
            "name": "Plugin",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/Plugin.html",
            "description": "The interface for a javac plug-in. "
        },
        {
            "name": "Point",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Point.html",
            "description": "A point representing a location in (x,y) coordinate space, specified in integer precision. "
        },
        {
            "name": "Point2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Point2D.html",
            "description": "The Point2D class defines a point representing a location in (x,y) coordinate space. "
        },
        {
            "name": "Point2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Point2D.Double.html",
            "description": "The Double class defines a point specified in double precision. "
        },
        {
            "name": "Point2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Point2D.Float.html",
            "description": "The Float class defines a point specified in float precision. "
        },
        {
            "name": "PointerInfo",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PointerInfo.html",
            "description": "A class that describes the pointer position. "
        },
        {
            "name": "Policy",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Policy.html",
            "description": "A Policy object is responsible for determining whether code executing in the Java runtime environment has permission to perform a security-sensitive operation. "
        },
        {
            "name": "Policy.Parameters",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Policy.Parameters.html",
            "description": "This represents a marker interface for Policy parameters. "
        },
        {
            "name": "PolicyNode",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PolicyNode.html",
            "description": "An immutable valid policy tree node as defined by the PKIX certification path validation algorithm. "
        },
        {
            "name": "PolicyQualifierInfo",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/PolicyQualifierInfo.html",
            "description": "An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo structure. "
        },
        {
            "name": "PolicySpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PolicySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the Policy class. "
        },
        {
            "name": "Polygon",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Polygon.html",
            "description": "The Polygon class encapsulates a description of a closed, two-dimensional region within a coordinate space. "
        },
        {
            "name": "PooledConnection",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/PooledConnection.html",
            "description": "An object that provides hooks for connection pool management. "
        },
        {
            "name": "PooledConnectionBuilder",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/PooledConnectionBuilder.html",
            "description": "A builder created from a ConnectionPoolDataSource object, used to establish a connection to the database that the data source object represents. "
        },
        {
            "name": "Popup",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Popup.html",
            "description": "Popups are used to display a Component to the user, typically on top of all the other Component s in a particular containment hierarchy. "
        },
        {
            "name": "PopupFactory",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/PopupFactory.html",
            "description": "PopupFactory , as the name implies, is used to obtain instances of Popup s. "
        },
        {
            "name": "PopupMenu",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PopupMenu.html",
            "description": "A class that implements a menu which can be dynamically popped up at a specified position within a component. "
        },
        {
            "name": "PopupMenuEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/PopupMenuEvent.html",
            "description": "PopupMenuEvent only contains the source of the event which is the JPopupMenu sending the event "
        },
        {
            "name": "PopupMenuListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/PopupMenuListener.html",
            "description": "A popup menu listener "
        },
        {
            "name": "PopupMenuUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/PopupMenuUI.html",
            "description": "Pluggable look and feel interface for JPopupMenu. "
        },
        {
            "name": "Port",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Port.html",
            "description": "Ports are simple lines for input or output of audio to or from audio devices. "
        },
        {
            "name": "Port.Info",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/Port.Info.html",
            "description": "The Port.Info class extends Line.Info with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. "
        },
        {
            "name": "PortUnreachableException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/PortUnreachableException.html",
            "description": "Signals that an ICMP Port Unreachable message has been received on a connected datagram. "
        },
        {
            "name": "Position",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Position.html",
            "description": "Represents a location within a document. "
        },
        {
            "name": "Position.Bias",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Position.Bias.html",
            "description": "A typesafe enumeration to indicate bias to a position in the model. "
        },
        {
            "name": "PosixFileAttributes",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/PosixFileAttributes.html",
            "description": "File attributes associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards. "
        },
        {
            "name": "PosixFileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/PosixFileAttributeView.html",
            "description": "A file attribute view that provides a view of the file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards. "
        },
        {
            "name": "PosixFilePermission",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/PosixFilePermission.html",
            "description": "Defines the bits for use with the permissions attribute. "
        },
        {
            "name": "PosixFilePermissions",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/PosixFilePermissions.html",
            "description": "This class consists exclusively of static methods that operate on sets of PosixFilePermission objects. "
        },
        {
            "name": "Predicate",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/Predicate.html",
            "description": "Represents a predicate (boolean-valued function) of one argument. "
        },
        {
            "name": "Predicate",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/Predicate.html",
            "description": "The standard interface that provides the framework for all FilteredRowSet objects to describe their filters. "
        },
        {
            "name": "PreferenceChangeEvent",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/PreferenceChangeEvent.html",
            "description": "An event emitted by a Preferences node to indicate that a preference has been added, removed or has had its value changed. "
        },
        {
            "name": "PreferenceChangeListener",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/PreferenceChangeListener.html",
            "description": "A listener for receiving preference change events. "
        },
        {
            "name": "Preferences",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/Preferences.html",
            "description": "A node in a hierarchical collection of preference data. "
        },
        {
            "name": "PreferencesEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/PreferencesEvent.html",
            "description": "Event sent when the application is asked to open its preferences window. "
        },
        {
            "name": "PreferencesFactory",
            "package": "java.util.prefs",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.prefs/java/util/prefs/PreferencesFactory.html",
            "description": "A factory object that generates Preferences objects. "
        },
        {
            "name": "PreferencesHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/PreferencesHandler.html",
            "description": "An implementor is notified when the app is asked to show its preferences UI. "
        },
        {
            "name": "PreparedStatement",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/PreparedStatement.html",
            "description": "An object that represents a precompiled SQL statement. "
        },
        {
            "name": "PresentationDirection",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PresentationDirection.html",
            "description": "Class PresentationDirection is a printing attribute class, an enumeration, that is used in conjunction with the NumberUp attribute to indicate the layout of multiple print-stream pages to impose upon a single side of an instance of a selected medium. "
        },
        {
            "name": "PrimitiveIterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PrimitiveIterator.html",
            "description": "A base type for primitive specializations of Iterator . "
        },
        {
            "name": "PrimitiveIterator.OfDouble",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html",
            "description": "An Iterator specialized for double values. "
        },
        {
            "name": "PrimitiveIterator.OfInt",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html",
            "description": "An Iterator specialized for int values. "
        },
        {
            "name": "PrimitiveIterator.OfLong",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html",
            "description": "An Iterator specialized for long values. "
        },
        {
            "name": "PrimitiveType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/PrimitiveType.html",
            "description": "The type associated with non-object values in a target VM. "
        },
        {
            "name": "PrimitiveType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/PrimitiveType.html",
            "description": "Represents a primitive type. "
        },
        {
            "name": "PrimitiveTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/PrimitiveTypeTree.html",
            "description": "A tree node for a primitive type. "
        },
        {
            "name": "PrimitiveValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/PrimitiveValue.html",
            "description": "The value assigned to a field or variable of primitive type in a target VM. "
        },
        {
            "name": "Principal",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Principal.html",
            "description": "This interface represents the abstract notion of a principal, which can be used to represent any entity, such as an individual, a corporation, and a login id. "
        },
        {
            "name": "PrincipalComparator",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/PrincipalComparator.html",
            "description": "An object that implements the java.security.Principal interface typically also implements this interface to provide a means for comparing that object to a specified Subject . "
        },
        {
            "name": "Printable",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/Printable.html",
            "description": "The Printable interface is implemented by the print methods of the current page painter, which is called by the printing system to render a page. "
        },
        {
            "name": "PrinterAbortException",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PrinterAbortException.html",
            "description": "The PrinterAbortException class is a subclass of PrinterException and is used to indicate that a user or application has terminated the print job while it was in the process of printing. "
        },
        {
            "name": "PrinterException",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PrinterException.html",
            "description": "The PrinterException class and its subclasses are used to indicate that an exceptional condition has occurred in the print system. "
        },
        {
            "name": "PrinterGraphics",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PrinterGraphics.html",
            "description": "The PrinterGraphics interface is implemented by Graphics objects that are passed to Printable objects to render a page. "
        },
        {
            "name": "PrinterInfo",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterInfo.html",
            "description": "Class PrinterInfo is a printing attribute class, a text attribute, that provides descriptive information about a printer. "
        },
        {
            "name": "PrinterIOException",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PrinterIOException.html",
            "description": "The PrinterIOException class is a subclass of PrinterException and is used to indicate that an IO error of some sort has occurred while printing. "
        },
        {
            "name": "PrinterIsAcceptingJobs",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterIsAcceptingJobs.html",
            "description": "Class PrinterIsAcceptingJobs is a printing attribute class, an enumeration, that indicates whether the printer is currently able to accept jobs. "
        },
        {
            "name": "PrinterJob",
            "package": "java.awt.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/print/PrinterJob.html",
            "description": "The PrinterJob class is the principal class that controls printing. "
        },
        {
            "name": "PrinterLocation",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterLocation.html",
            "description": "Class PrinterLocation is a printing attribute class, a text attribute, that identifies the location of the device. "
        },
        {
            "name": "PrinterMakeAndModel",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterMakeAndModel.html",
            "description": "Class PrinterMakeAndModel is a printing attribute class, a text attribute, that the make and model of the printer. "
        },
        {
            "name": "PrinterMessageFromOperator",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterMessageFromOperator.html",
            "description": "Class PrinterMessageFromOperator is a printing attribute class, a text attribute, that provides a message from an operator, system administrator, or \"intelligent\" process to indicate to the end user information about or status of the printer, such as why it is unavailable or when it is expected to be available. "
        },
        {
            "name": "PrinterMoreInfo",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterMoreInfo.html",
            "description": "Class PrinterMoreInfo is a printing attribute class, a URI , that is used to obtain more information about this specific printer. "
        },
        {
            "name": "PrinterMoreInfoManufacturer",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterMoreInfoManufacturer.html",
            "description": "Class PrinterMoreInfoManufacturer is a printing attribute class, a URI , that is used to obtain more information about this type of device. "
        },
        {
            "name": "PrinterName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterName.html",
            "description": "Class PrinterName is a printing attribute class, a text attribute, that specifies the name of a printer. "
        },
        {
            "name": "PrinterResolution",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterResolution.html",
            "description": "Class PrinterResolution is a printing attribute class that specifies an exact resolution supported by a printer or to be used for a print job. "
        },
        {
            "name": "PrinterState",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterState.html",
            "description": "Class PrinterState is a printing attribute class, an enumeration, that identifies the current state of a printer. "
        },
        {
            "name": "PrinterStateReason",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterStateReason.html",
            "description": "Class PrinterStateReason is a printing attribute class, an enumeration, that provides additional information about the printer's current state, i.e., information that augments the value of the printer's PrinterState attribute. "
        },
        {
            "name": "PrinterStateReasons",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterStateReasons.html",
            "description": "Class PrinterStateReasons is a printing attribute class, a set of enumeration values, that provides additional information about the printer's current state, i.e., information that augments the value of the printer's PrinterState attribute. "
        },
        {
            "name": "PrinterURI",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrinterURI.html",
            "description": "Class PrinterURI is a printing attribute class, a URI , that specifies the globally unique name of a printer. "
        },
        {
            "name": "PrintEvent",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintEvent.html",
            "description": "Class PrintEvent is the super class of all Print Service API events. "
        },
        {
            "name": "PrintException",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/PrintException.html",
            "description": "Class PrintException encapsulates a printing-related error condition that occurred while using a Print Service instance. "
        },
        {
            "name": "PrintFilesEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/PrintFilesEvent.html",
            "description": "Event sent when the app is asked to print a list of files. "
        },
        {
            "name": "PrintFilesHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/PrintFilesHandler.html",
            "description": "An implementor can respond to requests to print documents that the app has been registered to handle. "
        },
        {
            "name": "PrintGraphics",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PrintGraphics.html",
            "description": "An abstract class which provides a print graphics context for a page. "
        },
        {
            "name": "PrintJob",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/PrintJob.html",
            "description": "An abstract class which initiates and executes a print job. "
        },
        {
            "name": "PrintJobAdapter",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintJobAdapter.html",
            "description": "An abstract adapter class for receiving print job events. "
        },
        {
            "name": "PrintJobAttribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintJobAttribute.html",
            "description": "PrintJobAttribute is a tagging interface which a printing attribute class implements to indicate the attribute describes the status of a Print Job or some other characteristic of a Print Job. "
        },
        {
            "name": "PrintJobAttributeEvent",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintJobAttributeEvent.html",
            "description": "Class PrintJobAttributeEvent encapsulates an event a PrintService reports to let the client know that one or more printing attributes for a PrintJob have changed. "
        },
        {
            "name": "PrintJobAttributeListener",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintJobAttributeListener.html",
            "description": "Implementations of this interface are attached to a DocPrintJob to monitor the status of attribute changes associated with the print job. "
        },
        {
            "name": "PrintJobAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintJobAttributeSet.html",
            "description": "Interface PrintJobAttributeSet specifies the interface for a set of print job attributes, i.e. printing attributes that implement interface PrintJobAttribute . "
        },
        {
            "name": "PrintJobEvent",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintJobEvent.html",
            "description": "Class PrintJobEvent encapsulates common events a print job reports to let a listener know of progress in the processing of the DocPrintJob . "
        },
        {
            "name": "PrintJobListener",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintJobListener.html",
            "description": "Implementations of this listener interface should be attached to a DocPrintJob to monitor the status of the printer job. "
        },
        {
            "name": "PrintQuality",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/PrintQuality.html",
            "description": "Class PrintQuality is a printing attribute class, an enumeration, that specifies the print quality that the printer uses for the job. "
        },
        {
            "name": "PrintRequestAttribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintRequestAttribute.html",
            "description": "Interface PrintRequestAttribute is a tagging interface which a printing attribute class implements to indicate the attribute denotes a requested setting for a print job. "
        },
        {
            "name": "PrintRequestAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintRequestAttributeSet.html",
            "description": "Interface PrintRequestAttributeSet specifies the interface for a set of print request attributes, i.e. printing attributes that implement interface PrintRequestAttribute . "
        },
        {
            "name": "PrintService",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/PrintService.html",
            "description": "Interface PrintService is the factory for a DocPrintJob . "
        },
        {
            "name": "PrintServiceAttribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintServiceAttribute.html",
            "description": "Interface PrintServiceAttribute is a tagging interface which a printing attribute class implements to indicate the attribute describes the status of a Print Service or some other characteristic of a Print Service. "
        },
        {
            "name": "PrintServiceAttributeEvent",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintServiceAttributeEvent.html",
            "description": "Class PrintServiceAttributeEvent encapsulates an event a Print Service instance reports to let the client know of changes in the print service state. "
        },
        {
            "name": "PrintServiceAttributeListener",
            "package": "javax.print.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/event/PrintServiceAttributeListener.html",
            "description": "Implementations of this listener interface are attached to a PrintService to monitor the status of the print service. "
        },
        {
            "name": "PrintServiceAttributeSet",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/PrintServiceAttributeSet.html",
            "description": "Interface PrintServiceAttributeSet specifies the interface for a set of print job attributes, i.e. printing attributes that implement interface PrintServiceAttribute . "
        },
        {
            "name": "PrintServiceLookup",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/PrintServiceLookup.html",
            "description": "Implementations of this class provide lookup services for print services (typically equivalent to printers) of a particular type. "
        },
        {
            "name": "PrintStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PrintStream.html",
            "description": "A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently. "
        },
        {
            "name": "PrintWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PrintWriter.html",
            "description": "Prints formatted representations of objects to a text-output stream. "
        },
        {
            "name": "PriorityBlockingQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/PriorityBlockingQueue.html",
            "description": "An unbounded blocking queue that uses the same ordering rules as class PriorityQueue and supplies blocking retrieval operations. "
        },
        {
            "name": "PriorityQueue",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PriorityQueue.html",
            "description": "An unbounded priority queue based on a priority heap. "
        },
        {
            "name": "PrivateClassLoader",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/PrivateClassLoader.html",
            "description": "Marker interface indicating that a ClassLoader should not be added to the ClassLoaderRepository . "
        },
        {
            "name": "PrivateCredentialPermission",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/PrivateCredentialPermission.html",
            "description": "This class is used to protect access to private Credentials belonging to a particular Subject . "
        },
        {
            "name": "PrivateKey",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PrivateKey.html",
            "description": "A private key. "
        },
        {
            "name": "PrivateMLet",
            "package": "javax.management.loading",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/loading/PrivateMLet.html",
            "description": "An MLet that is not added to the ClassLoaderRepository . "
        },
        {
            "name": "PrivilegedAction",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PrivilegedAction.html",
            "description": "A computation to be performed with privileges enabled. "
        },
        {
            "name": "PrivilegedActionException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PrivilegedActionException.html",
            "description": "This exception is thrown by doPrivileged(PrivilegedExceptionAction) and doPrivileged(PrivilegedExceptionAction, AccessControlContext context) to indicate that the action being performed threw a checked exception. "
        },
        {
            "name": "PrivilegedExceptionAction",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PrivilegedExceptionAction.html",
            "description": "A computation to be performed with privileges enabled, that throws one or more checked exceptions. "
        },
        {
            "name": "Process",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Process.html",
            "description": "Process provides control of native processes started by ProcessBuilder.start and Runtime.exec. "
        },
        {
            "name": "ProcessBuilder",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ProcessBuilder.html",
            "description": "This class is used to create operating system processes. "
        },
        {
            "name": "ProcessBuilder.Redirect",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ProcessBuilder.Redirect.html",
            "description": "Represents a source of subprocess input or a destination of subprocess output. "
        },
        {
            "name": "ProcessBuilder.Redirect.Type",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ProcessBuilder.Redirect.Type.html",
            "description": "The type of a ProcessBuilder.Redirect . "
        },
        {
            "name": "ProcessHandle",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ProcessHandle.html",
            "description": "ProcessHandle identifies and provides control of native processes. "
        },
        {
            "name": "ProcessHandle.Info",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ProcessHandle.Info.html",
            "description": "Information snapshot about the process. "
        },
        {
            "name": "ProcessingEnvironment",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/ProcessingEnvironment.html",
            "description": "An annotation processing tool framework will provide an annotation processor with an object implementing this interface so the processor can use facilities provided by the framework to write new files, report error messages, and find other utilities. "
        },
        {
            "name": "ProcessingInstruction",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/ProcessingInstruction.html",
            "description": "An interface that describes the data found in processing instructions "
        },
        {
            "name": "ProcessingInstruction",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ProcessingInstruction.html",
            "description": "The ProcessingInstruction interface represents a \"processing instruction\", used in XML as a way to keep processor-specific information in the text of the document. "
        },
        {
            "name": "Processor",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/Processor.html",
            "description": "The interface for an annotation processor. "
        },
        {
            "name": "ProfileDataException",
            "package": "java.awt.color",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/color/ProfileDataException.html",
            "description": "This exception is thrown when an error occurs in accessing or processing an ICC_Profile object. "
        },
        {
            "name": "ProgressBarUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ProgressBarUI.html",
            "description": "Pluggable look and feel interface for JProgressBar. "
        },
        {
            "name": "ProgressMonitor",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ProgressMonitor.html",
            "description": "A class to monitor the progress of some operation. "
        },
        {
            "name": "ProgressMonitorInputStream",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ProgressMonitorInputStream.html",
            "description": "Monitors the progress of reading from some InputStream. "
        },
        {
            "name": "Properties",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Properties.html",
            "description": "The Properties class represents a persistent set of properties. "
        },
        {
            "name": "PropertyChangeEvent",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyChangeEvent.html",
            "description": "A \"PropertyChange\" event gets delivered whenever a bean changes a \"bound\" or \"constrained\" property. "
        },
        {
            "name": "PropertyChangeListener",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyChangeListener.html",
            "description": "A \"PropertyChange\" event gets fired whenever a bean changes a \"bound\" property. "
        },
        {
            "name": "PropertyChangeListenerProxy",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyChangeListenerProxy.html",
            "description": "A class which extends the EventListenerProxy specifically for adding a PropertyChangeListener with a \"bound\" property. "
        },
        {
            "name": "PropertyChangeSupport",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyChangeSupport.html",
            "description": "This is a utility class that can be used by beans that support bound properties. "
        },
        {
            "name": "PropertyDescriptor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyDescriptor.html",
            "description": "A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods. "
        },
        {
            "name": "PropertyEditor",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyEditor.html",
            "description": "A PropertyEditor class provides support for GUIs that want to allow users to edit a property value of a given type. "
        },
        {
            "name": "PropertyEditorManager",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyEditorManager.html",
            "description": "The PropertyEditorManager can be used to locate a property editor for any given type name. "
        },
        {
            "name": "PropertyEditorSupport",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyEditorSupport.html",
            "description": "This is a support class to help build property editors. "
        },
        {
            "name": "PropertyPermission",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PropertyPermission.html",
            "description": "This class is for property permissions. "
        },
        {
            "name": "PropertyResourceBundle",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/PropertyResourceBundle.html",
            "description": "PropertyResourceBundle is a concrete subclass of ResourceBundle that manages resources for a locale using a set of static strings from a property file. "
        },
        {
            "name": "PropertyVetoException",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/PropertyVetoException.html",
            "description": "A PropertyVetoException is thrown when a proposed change to a property represents an unacceptable value. "
        },
        {
            "name": "ProtectionDomain",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/ProtectionDomain.html",
            "description": "The ProtectionDomain class encapsulates the characteristics of a domain, which encloses a set of classes whose instances are granted a set of permissions when being executed on behalf of a given set of Principals. "
        },
        {
            "name": "ProtocolException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ProtocolException.html",
            "description": "Thrown to indicate that there is an error in the underlying protocol, such as a TCP error. "
        },
        {
            "name": "ProtocolFamily",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ProtocolFamily.html",
            "description": "Represents a family of communication protocols. "
        },
        {
            "name": "Provider",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Provider.html",
            "description": "This class represents a \"provider\" for the Java Security API, where a provider implements some or all parts of Java Security. "
        },
        {
            "name": "Provider.Service",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Provider.Service.html",
            "description": "The description of a security service. "
        },
        {
            "name": "ProviderException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/ProviderException.html",
            "description": "A runtime exception for Provider exceptions (such as misconfiguration errors or unrecoverable internal errors), which may be subclassed by Providers to throw specialized, provider-specific runtime errors. "
        },
        {
            "name": "ProviderMismatchException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ProviderMismatchException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke a method on an object created by one file system provider with a parameter created by a different file system provider. "
        },
        {
            "name": "ProviderNotFoundException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ProviderNotFoundException.html",
            "description": "Runtime exception thrown when a provider of the required type cannot be found. "
        },
        {
            "name": "ProvidesTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ProvidesTree.html",
            "description": "A tree node for a @provides block tag. "
        },
        {
            "name": "ProvidesTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ProvidesTree.html",
            "description": "A tree node for a 'provides' directive in a module declaration. "
        },
        {
            "name": "Proxy",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Proxy.html",
            "description": "Proxy provides static methods for creating objects that act like instances of interfaces but allow for customized method invocation. "
        },
        {
            "name": "Proxy",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Proxy.html",
            "description": "This class represents a proxy setting, typically a type (http, socks) and a socket address. "
        },
        {
            "name": "Proxy.Type",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Proxy.Type.html",
            "description": "Represents the proxy type. "
        },
        {
            "name": "ProxySelector",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ProxySelector.html",
            "description": "Selects the proxy server to use, if any, when connecting to the network resource referenced by a URL. "
        },
        {
            "name": "PseudoColumnUsage",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/PseudoColumnUsage.html",
            "description": "Enumeration for pseudo/hidden column usage. "
        },
        {
            "name": "PSource",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/PSource.html",
            "description": "This class specifies the source for encoding input P in OAEP Padding, as defined in the PKCS#1 v2.2 standard. "
        },
        {
            "name": "PSource.PSpecified",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/PSource.PSpecified.html",
            "description": "This class is used to explicitly specify the value for encoding input P in OAEP Padding. "
        },
        {
            "name": "PSSParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/PSSParameterSpec.html",
            "description": "This class specifies a parameter spec for RSASSA-PSS signature scheme, as defined in the PKCS#1 v2.2 standard. "
        },
        {
            "name": "PublicKey",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/PublicKey.html",
            "description": "A public key. "
        },
        {
            "name": "PushbackInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PushbackInputStream.html",
            "description": "A PushbackInputStream adds functionality to another input stream, namely the  ability to \"push back\" or \"unread\" bytes, by storing pushed-back bytes in an internal buffer. "
        },
        {
            "name": "PushbackReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/PushbackReader.html",
            "description": "A character-stream reader that allows characters to be pushed back into the stream. "
        },
        {
            "name": "QName",
            "package": "javax.xml.namespace",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/namespace/QName.html",
            "description": "QName represents a qualified name as defined in the XML specifications: XML Schema Part2: Datatypes specification , Namespaces in XML . "
        },
        {
            "name": "QuadCurve2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/QuadCurve2D.html",
            "description": "The QuadCurve2D class defines a quadratic parametric curve segment in (x,y) coordinate space. "
        },
        {
            "name": "QuadCurve2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/QuadCurve2D.Double.html",
            "description": "A quadratic parametric curve segment specified with double coordinates. "
        },
        {
            "name": "QuadCurve2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/QuadCurve2D.Float.html",
            "description": "A quadratic parametric curve segment specified with float coordinates. "
        },
        {
            "name": "QualifiedNameable",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/QualifiedNameable.html",
            "description": "A mixin interface for an element that has a qualified name. "
        },
        {
            "name": "Query",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/Query.html",
            "description": "Constructs query object constraints. "
        },
        {
            "name": "QueryEval",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/QueryEval.html",
            "description": "Allows a query to be performed in the context of a specific MBean server. "
        },
        {
            "name": "QueryExp",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/QueryExp.html",
            "description": "Represents relational constraints similar to database query \"where clauses\". "
        },
        {
            "name": "Queue",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Queue.html",
            "description": "A collection designed for holding elements prior to processing. "
        },
        {
            "name": "QueuedJobCount",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/QueuedJobCount.html",
            "description": "Class QueuedJobCount is an integer valued printing attribute that indicates the number of jobs in the printer whose JobState is either PENDING , PENDING_HELD , PROCESSING , or PROCESSING_STOPPED . "
        },
        {
            "name": "QuitEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/QuitEvent.html",
            "description": "Event sent when the application is asked to quit. "
        },
        {
            "name": "QuitHandler",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/QuitHandler.html",
            "description": "An implementor determines if requests to quit this application should proceed or cancel. "
        },
        {
            "name": "QuitResponse",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/QuitResponse.html",
            "description": "Used to respond to a request to quit the application. "
        },
        {
            "name": "QuitStrategy",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/QuitStrategy.html",
            "description": "The strategy used to shut down the application, if Sudden Termination is not enabled. "
        },
        {
            "name": "RadialGradientPaint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/RadialGradientPaint.html",
            "description": "The RadialGradientPaint class provides a way to fill a shape with a circular radial color gradient pattern. "
        },
        {
            "name": "Random",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Random.html",
            "description": "An instance of this class is used to generate a stream of pseudorandom numbers. "
        },
        {
            "name": "RandomAccess",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/RandomAccess.html",
            "description": "Marker interface used by List implementations to indicate that they support fast (generally constant time) random access. "
        },
        {
            "name": "RandomAccessFile",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/RandomAccessFile.html",
            "description": "Instances of this class support both reading and writing to a random access file. "
        },
        {
            "name": "Range",
            "package": "org.w3c.dom.ranges",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ranges/Range.html",
            "description": "See also the Document Object Model (DOM) Level 2 Traversal and Range Specification . "
        },
        {
            "name": "RangeException",
            "package": "org.w3c.dom.ranges",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/ranges/RangeException.html",
            "description": "Range operations may throw a RangeException as specified in their method descriptions. "
        },
        {
            "name": "Raster",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/Raster.html",
            "description": "A class representing a rectangular array of pixels. "
        },
        {
            "name": "RasterFormatException",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/RasterFormatException.html",
            "description": "The RasterFormatException is thrown if there is invalid layout information in the Raster . "
        },
        {
            "name": "RasterOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/RasterOp.html",
            "description": "This interface describes single-input/single-output operations performed on Raster objects. "
        },
        {
            "name": "RC2ParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/RC2ParameterSpec.html",
            "description": "This class specifies the parameters used with the RC2 algorithm. "
        },
        {
            "name": "RC5ParameterSpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/RC5ParameterSpec.html",
            "description": "This class specifies the parameters used with the RC5 algorithm. "
        },
        {
            "name": "Rdn",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/Rdn.html",
            "description": "This class represents a relative distinguished name, or RDN, which is a component of a distinguished name as specified by RFC 2253 . "
        },
        {
            "name": "Readable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Readable.html",
            "description": "A Readable is a source of characters. "
        },
        {
            "name": "ReadableByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ReadableByteChannel.html",
            "description": "A channel that can read bytes. "
        },
        {
            "name": "Reader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Reader.html",
            "description": "Abstract class for reading character streams. "
        },
        {
            "name": "ReadOnlyBufferException",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/ReadOnlyBufferException.html",
            "description": "Unchecked exception thrown when a content-mutation method such as put or compact is invoked upon a read-only buffer. "
        },
        {
            "name": "ReadOnlyFileSystemException",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/ReadOnlyFileSystemException.html",
            "description": "Unchecked exception thrown when an attempt is made to update an object associated with a read-only FileSystem . "
        },
        {
            "name": "ReadPendingException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ReadPendingException.html",
            "description": "Unchecked exception thrown when an attempt is made to read from an asynchronous socket channel and a previous read has not completed. "
        },
        {
            "name": "ReadWriteLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html",
            "description": "A ReadWriteLock maintains a pair of associated locks , one for read-only operations and one for writing. "
        },
        {
            "name": "RealmCallback",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/RealmCallback.html",
            "description": "This callback is used by SaslClient and SaslServer to retrieve realm information. "
        },
        {
            "name": "RealmChoiceCallback",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/RealmChoiceCallback.html",
            "description": "This callback is used by SaslClient and SaslServer to obtain a realm given a list of realm choices. "
        },
        {
            "name": "Receiver",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Receiver.html",
            "description": "A Receiver receives MidiEvent objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. "
        },
        {
            "name": "Record",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Record.html",
            "description": "Associated with records, a preview feature of the Java language. This is the common base class of all Java language record classes. "
        },
        {
            "name": "RecordComponent",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/RecordComponent.html",
            "description": "Associated with records, a preview feature of the Java language. A RecordComponent provides information about, and dynamic access to, a component of a record class. "
        },
        {
            "name": "RecordComponentElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/RecordComponentElement.html",
            "description": "Associated with records, a preview feature of the Java language. Represents a record component. "
        },
        {
            "name": "RecordedClass",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedClass.html",
            "description": "A recorded Java type, such as a class or an interface. "
        },
        {
            "name": "RecordedClassLoader",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedClassLoader.html",
            "description": "A recorded Java class loader. "
        },
        {
            "name": "RecordedEvent",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedEvent.html",
            "description": "A recorded event. "
        },
        {
            "name": "RecordedFrame",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedFrame.html",
            "description": "A recorded frame in a stack trace. "
        },
        {
            "name": "RecordedMethod",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedMethod.html",
            "description": "A recorded method. "
        },
        {
            "name": "RecordedObject",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedObject.html",
            "description": "A complex data type that consists of one or more fields. "
        },
        {
            "name": "RecordedStackTrace",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedStackTrace.html",
            "description": "A recorded stack trace. "
        },
        {
            "name": "RecordedThread",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedThread.html",
            "description": "A recorded thread. "
        },
        {
            "name": "RecordedThreadGroup",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordedThreadGroup.html",
            "description": "A recorded Java thread group. "
        },
        {
            "name": "Recording",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Recording.html",
            "description": "Provides means to configure, start, stop and dump recording data to disk. "
        },
        {
            "name": "RecordingFile",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordingFile.html",
            "description": "A recording file. "
        },
        {
            "name": "RecordingInfo",
            "package": "jdk.management.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management.jfr/jdk/management/jfr/RecordingInfo.html",
            "description": "Management representation of a Recording . "
        },
        {
            "name": "RecordingState",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/RecordingState.html",
            "description": "Indicates a state in the life cycle of a recording. "
        },
        {
            "name": "RecordingStream",
            "package": "jdk.jfr.consumer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/consumer/RecordingStream.html",
            "description": "A recording stream produces events from the current JVM (Java Virtual Machine). "
        },
        {
            "name": "Rect",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/Rect.html",
            "description": "The Rect interface is used to represent any rect value. "
        },
        {
            "name": "Rectangle",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Rectangle.html",
            "description": "A Rectangle specifies an area in a coordinate space that is enclosed by the Rectangle object's upper-left point (x,y) in the coordinate space, its width, and its height. "
        },
        {
            "name": "Rectangle2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Rectangle2D.html",
            "description": "The Rectangle2D class describes a rectangle defined by a location (x,y) and dimension (w x h) . "
        },
        {
            "name": "Rectangle2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Rectangle2D.Double.html",
            "description": "The Double class defines a rectangle specified in double coordinates. "
        },
        {
            "name": "Rectangle2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/Rectangle2D.Float.html",
            "description": "The Float class defines a rectangle specified in float coordinates. "
        },
        {
            "name": "RectangularShape",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/RectangularShape.html",
            "description": "RectangularShape is the base class for a number of Shape objects whose geometry is defined by a rectangular frame. "
        },
        {
            "name": "RecursiveAction",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RecursiveAction.html",
            "description": "A recursive resultless ForkJoinTask . "
        },
        {
            "name": "RecursiveTask",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RecursiveTask.html",
            "description": "A recursive result-bearing ForkJoinTask . "
        },
        {
            "name": "ReentrantLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/ReentrantLock.html",
            "description": "A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities. "
        },
        {
            "name": "ReentrantReadWriteLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/ReentrantReadWriteLock.html",
            "description": "An implementation of ReadWriteLock supporting similar semantics to ReentrantLock . "
        },
        {
            "name": "ReentrantReadWriteLock.ReadLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html",
            "description": "The lock returned by method ReentrantReadWriteLock.readLock() . "
        },
        {
            "name": "ReentrantReadWriteLock.WriteLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html",
            "description": "The lock returned by method ReentrantReadWriteLock.writeLock() . "
        },
        {
            "name": "Ref",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Ref.html",
            "description": "The mapping in the Java programming language of an SQL REF value, which is a reference to an SQL structured type value in the database. "
        },
        {
            "name": "RefAddr",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/RefAddr.html",
            "description": "This class represents the address of a communications end-point. "
        },
        {
            "name": "Reference",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/Reference.html",
            "description": "Abstract base class for reference objects. "
        },
        {
            "name": "Reference",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/Reference.html",
            "description": "This class represents a reference to an object that is found outside of the naming/directory system. "
        },
        {
            "name": "Reference",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/Reference.html",
            "description": "A representation of the Reference element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "Referenceable",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/Referenceable.html",
            "description": "This interface is implemented by an object that can provide a Reference to itself. "
        },
        {
            "name": "ReferenceQueue",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/ReferenceQueue.html",
            "description": "Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected. "
        },
        {
            "name": "ReferenceTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ReferenceTree.html",
            "description": "A tree node for a reference to a Java language element. "
        },
        {
            "name": "ReferenceType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ReferenceType.html",
            "description": "The type of an object in a target VM. "
        },
        {
            "name": "ReferenceType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/ReferenceType.html",
            "description": "Represents a reference type. "
        },
        {
            "name": "ReferenceUriSchemesSupported",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/ReferenceUriSchemesSupported.html",
            "description": "Class ReferenceUriSchemesSupported is a printing attribute class an enumeration, that indicates a \"URI scheme,\" such as \"http:\" or \"ftp:\", that a printer can use to retrieve print data stored at a URI location. "
        },
        {
            "name": "ReferralException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ReferralException.html",
            "description": "This abstract class is used to represent a referral exception, which is generated in response to a referral such as that returned by LDAP v3 servers. "
        },
        {
            "name": "ReflectionException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ReflectionException.html",
            "description": "Represents exceptions thrown in the MBean server when using the java.lang.reflect classes to invoke methods on MBeans. "
        },
        {
            "name": "ReflectiveOperationException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ReflectiveOperationException.html",
            "description": "Common superclass of exceptions thrown by reflective operations in core reflection. "
        },
        {
            "name": "ReflectPermission",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/ReflectPermission.html",
            "description": "The Permission class for reflective operations. "
        },
        {
            "name": "Refreshable",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/Refreshable.html",
            "description": "Objects such as credentials may optionally implement this interface to provide the capability to refresh itself. "
        },
        {
            "name": "RefreshFailedException",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/RefreshFailedException.html",
            "description": "Signals that a refresh operation failed. "
        },
        {
            "name": "Region",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/Region.html",
            "description": "A distinct rendering area of a Swing component. "
        },
        {
            "name": "RegisterableService",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/RegisterableService.html",
            "description": "An optional interface that may be provided by service provider objects that will be registered with a ServiceRegistry . "
        },
        {
            "name": "Registered",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Registered.html",
            "description": "Event annotation, for programmatic event registration. "
        },
        {
            "name": "Registry",
            "package": "java.rmi.registry",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/registry/Registry.html",
            "description": "Registry is a remote interface to a simple remote object registry that provides methods for storing and retrieving remote object references bound with arbitrary string names. "
        },
        {
            "name": "RegistryHandler",
            "package": "java.rmi.registry",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/registry/RegistryHandler.html",
            "description": "no replacement "
        },
        {
            "name": "RejectedExecutionException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html",
            "description": "Exception thrown by an Executor when a task cannot be accepted for execution. "
        },
        {
            "name": "RejectedExecutionHandler",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RejectedExecutionHandler.html",
            "description": "A handler for tasks that cannot be executed by a ThreadPoolExecutor . "
        },
        {
            "name": "Relation",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/Relation.html",
            "description": "This interface has to be implemented by any MBean class expected to represent a relation managed using the Relation Service. "
        },
        {
            "name": "Relational",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Relational.html",
            "description": "Meta annotation for relational annotations, to be used on an annotation. "
        },
        {
            "name": "RelationException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationException.html",
            "description": "This class is the superclass of any exception which can be raised during relation management. "
        },
        {
            "name": "RelationNotFoundException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationNotFoundException.html",
            "description": "This exception is raised when there is no relation for a given relation id in a Relation Service. "
        },
        {
            "name": "RelationNotification",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationNotification.html",
            "description": "A notification of a change in the Relation Service. "
        },
        {
            "name": "RelationService",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationService.html",
            "description": "The Relation Service is in charge of creating and deleting relation types and relations, of handling the consistency and of providing query mechanisms. "
        },
        {
            "name": "RelationServiceMBean",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationServiceMBean.html",
            "description": "The Relation Service is in charge of creating and deleting relation types and relations, of handling the consistency and of providing query mechanisms. "
        },
        {
            "name": "RelationServiceNotRegisteredException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html",
            "description": "This exception is raised when an access is done to the Relation Service and that one is not registered. "
        },
        {
            "name": "RelationSupport",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationSupport.html",
            "description": "A RelationSupport object is used internally by the Relation Service to represent simple relations (only roles, no properties or methods), with an unlimited number of roles, of any relation type. "
        },
        {
            "name": "RelationSupportMBean",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationSupportMBean.html",
            "description": "A RelationSupport object is used internally by the Relation Service to represent simple relations (only roles, no properties or methods), with an unlimited number of roles, of any relation type. "
        },
        {
            "name": "RelationType",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationType.html",
            "description": "The RelationType interface has to be implemented by any class expected to represent a relation type. "
        },
        {
            "name": "RelationTypeNotFoundException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html",
            "description": "This exception is raised when there is no relation type with given name in Relation Service. "
        },
        {
            "name": "RelationTypeSupport",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RelationTypeSupport.html",
            "description": "A RelationTypeSupport object implements the RelationType interface. "
        },
        {
            "name": "RelinkableCallSite",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/RelinkableCallSite.html",
            "description": "Interface for call sites managed by a DynamicLinker . "
        },
        {
            "name": "Remote",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/Remote.html",
            "description": "The Remote interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine. "
        },
        {
            "name": "RemoteCall",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteCall.html",
            "description": "no replacement. "
        },
        {
            "name": "RemoteException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/RemoteException.html",
            "description": "A RemoteException is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call. "
        },
        {
            "name": "RemoteExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/RemoteExecutionControl.html",
            "description": "The remote agent runs in the execution process (separate from the main JShell process). "
        },
        {
            "name": "RemoteObject",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteObject.html",
            "description": "The RemoteObject class implements the java.lang.Object behavior for remote objects. "
        },
        {
            "name": "RemoteObjectInvocationHandler",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteObjectInvocationHandler.html",
            "description": "An implementation of the InvocationHandler interface for use with Java Remote Method Invocation (Java RMI). "
        },
        {
            "name": "RemoteRef",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteRef.html",
            "description": "RemoteRef represents the handle for a remote object. "
        },
        {
            "name": "RemoteServer",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteServer.html",
            "description": "The RemoteServer class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics. "
        },
        {
            "name": "RemoteStub",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RemoteStub.html",
            "description": "Statically generated stubs are deprecated, since stubs are generated dynamically. "
        },
        {
            "name": "RenderableImage",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/RenderableImage.html",
            "description": "A RenderableImage is a common interface for rendering-independent images (a notion which subsumes resolution independence). "
        },
        {
            "name": "RenderableImageOp",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/RenderableImageOp.html",
            "description": "This class handles the renderable aspects of an operation with help from its associated instance of a ContextualRenderedImageFactory. "
        },
        {
            "name": "RenderableImageProducer",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/RenderableImageProducer.html",
            "description": "An adapter class that implements ImageProducer to allow the asynchronous production of a RenderableImage. "
        },
        {
            "name": "RenderContext",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html",
            "description": "A RenderContext encapsulates the information needed to produce a specific rendering from a RenderableImage. "
        },
        {
            "name": "RenderedImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/RenderedImage.html",
            "description": "RenderedImage is a common interface for objects which contain or can produce image data in the form of Rasters. "
        },
        {
            "name": "RenderedImageFactory",
            "package": "java.awt.image.renderable",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/renderable/RenderedImageFactory.html",
            "description": "The RenderedImageFactory interface (often abbreviated RIF) is intended to be implemented by classes that wish to act as factories to produce different renderings, for example by executing a series of BufferedImageOps on a set of sources, depending on a specific set of parameters, properties, and rendering hints. "
        },
        {
            "name": "Renderer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Renderer.html",
            "description": "Defines the requirements for an object responsible for \"rendering\" (displaying) a value. "
        },
        {
            "name": "RenderingHints",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/RenderingHints.html",
            "description": "The RenderingHints class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services. "
        },
        {
            "name": "RenderingHints.Key",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/RenderingHints.Key.html",
            "description": "Defines the base type of all keys used along with the RenderingHints class to control various algorithm choices in the rendering and imaging pipelines. "
        },
        {
            "name": "RepaintManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RepaintManager.html",
            "description": "This class manages repaint requests, allowing the number of repaints to be minimized, for example by collapsing multiple requests into a single repaint for members of a component tree. "
        },
        {
            "name": "Repeatable",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Repeatable.html",
            "description": "The annotation type java.lang.annotation.Repeatable is used to indicate that the annotation type whose declaration it (meta-)annotates is repeatable . "
        },
        {
            "name": "ReplicateScaleFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ReplicateScaleFilter.html",
            "description": "An ImageFilter class for scaling images using the simplest algorithm. "
        },
        {
            "name": "Reporter",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Reporter.html",
            "description": "This interface provides error, warning and notice reporting. "
        },
        {
            "name": "RequestingUserName",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/RequestingUserName.html",
            "description": "Class RequestingUserName is a printing attribute class, a text attribute, that specifies the name of the end user that submitted the print job. "
        },
        {
            "name": "RequiredModelMBean",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/RequiredModelMBean.html",
            "description": "This class is the implementation of a ModelMBean. "
        },
        {
            "name": "RequiresTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/RequiresTree.html",
            "description": "A tree node for a 'requires' directive in a module declaration. "
        },
        {
            "name": "RescaleOp",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/RescaleOp.html",
            "description": "This class performs a pixel-by-pixel rescaling of the data in the source image by multiplying the sample values for each pixel by a scale factor and then adding an offset. "
        },
        {
            "name": "ResolutionException",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ResolutionException.html",
            "description": "Thrown when resolving a set of modules, or resolving a set of modules with service binding, fails. "
        },
        {
            "name": "ResolutionSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/ResolutionSyntax.html",
            "description": "Class ResolutionSyntax is an abstract base class providing the common implementation of all attributes denoting a printer resolution. "
        },
        {
            "name": "ResolvedModule",
            "package": "java.lang.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/module/ResolvedModule.html",
            "description": "A module in a graph of resolved modules . "
        },
        {
            "name": "Resolver",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/Resolver.html",
            "description": "This interface represents an \"intermediate context\" for name resolution. "
        },
        {
            "name": "ResolveResult",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/ResolveResult.html",
            "description": "This class represents the result of resolution of a name. "
        },
        {
            "name": "ResolverStyle",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/ResolverStyle.html",
            "description": "Enumeration of different ways to resolve dates and times. "
        },
        {
            "name": "ResourceBundle",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ResourceBundle.html",
            "description": "Resource bundles contain locale-specific objects. "
        },
        {
            "name": "ResourceBundle.Control",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ResourceBundle.Control.html",
            "description": "ResourceBundle.Control defines a set of callback methods that are invoked by the ResourceBundle.getBundle factory methods during the bundle loading process. "
        },
        {
            "name": "ResourceBundleControlProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/ResourceBundleControlProvider.html",
            "description": "An interface for service providers that provide implementations of ResourceBundle.Control . "
        },
        {
            "name": "ResourceBundleProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/ResourceBundleProvider.html",
            "description": "ResourceBundleProvider is a service provider interface for resource bundles. "
        },
        {
            "name": "ResponseAPDU",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html",
            "description": "A response APDU as defined in ISO/IEC 7816-4. "
        },
        {
            "name": "ResponseCache",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ResponseCache.html",
            "description": "Represents implementations of URLConnection caches. "
        },
        {
            "name": "Result",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/Result.html",
            "description": "An object that implements this interface contains the information needed to build a transformation result tree. "
        },
        {
            "name": "ResultSet",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ResultSet.html",
            "description": "A table of data representing a database result set, which is usually generated by executing a statement that queries the database. "
        },
        {
            "name": "ResultSetMetaData",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ResultSetMetaData.html",
            "description": "An object that can be used to get information about the types and properties of the columns in a ResultSet object. "
        },
        {
            "name": "Retention",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Retention.html",
            "description": "Indicates how long annotations with the annotated type are to be retained. "
        },
        {
            "name": "RetentionPolicy",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/RetentionPolicy.html",
            "description": "Annotation retention policy. "
        },
        {
            "name": "RetrievalMethod",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/RetrievalMethod.html",
            "description": "A representation of the XML RetrievalMethod element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "ReturnTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ReturnTree.html",
            "description": "A tree node for an @return block tag. "
        },
        {
            "name": "ReturnTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ReturnTree.html",
            "description": "A tree node for a return statement. "
        },
        {
            "name": "ReverbType",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/ReverbType.html",
            "description": "The ReverbType class provides methods for accessing various reverberation settings to be applied to an audio signal. "
        },
        {
            "name": "RGBColor",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/RGBColor.html",
            "description": "The RGBColor interface is used to represent any RGB color value. "
        },
        {
            "name": "RGBImageFilter",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/RGBImageFilter.html",
            "description": "This class provides an easy way to create an ImageFilter which modifies the pixels of an image in the default RGB ColorModel. "
        },
        {
            "name": "RMIClassLoader",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMIClassLoader.html",
            "description": "RMIClassLoader comprises static methods to support dynamic class loading with RMI. "
        },
        {
            "name": "RMIClassLoaderSpi",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMIClassLoaderSpi.html",
            "description": "RMIClassLoaderSpi is the service provider interface for RMIClassLoader . "
        },
        {
            "name": "RMIClientSocketFactory",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMIClientSocketFactory.html",
            "description": "An RMIClientSocketFactory instance is used by the RMI runtime in order to obtain client sockets for RMI calls. "
        },
        {
            "name": "RMIConnection",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIConnection.html",
            "description": "RMI object used to forward an MBeanServer request from a client to its MBeanServer implementation on the server side. "
        },
        {
            "name": "RMIConnectionImpl",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIConnectionImpl.html",
            "description": "Implementation of the RMIConnection interface. "
        },
        {
            "name": "RMIConnectionImpl_Stub",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIConnectionImpl_Stub.html",
            "description": "RMIConnectionImpl remote stub. "
        },
        {
            "name": "RMIConnector",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIConnector.html",
            "description": "A connection to a remote RMI connector. "
        },
        {
            "name": "RMIConnectorServer",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIConnectorServer.html",
            "description": "A JMX API connector server that creates RMI-based connections from remote clients. "
        },
        {
            "name": "RMIFailureHandler",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMIFailureHandler.html",
            "description": "An RMIFailureHandler can be registered via the RMISocketFactory.setFailureHandler call. "
        },
        {
            "name": "RMIIIOPServerImpl",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIIIOPServerImpl.html",
            "description": "This transport is no longer supported. "
        },
        {
            "name": "RMIJRMPServerImpl",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIJRMPServerImpl.html",
            "description": "An RMIServer object that is exported through JRMP and that creates client connections as RMI objects exported through JRMP. "
        },
        {
            "name": "RMISecurityException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/RMISecurityException.html",
            "description": "Use SecurityException instead. "
        },
        {
            "name": "RMISecurityManager",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/RMISecurityManager.html",
            "description": "Use SecurityManager instead. "
        },
        {
            "name": "RMIServer",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIServer.html",
            "description": "RMI object used to establish connections to an RMI connector. "
        },
        {
            "name": "RMIServerImpl",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIServerImpl.html",
            "description": "An RMI object representing a connector server. "
        },
        {
            "name": "RMIServerImpl_Stub",
            "package": "javax.management.remote.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management.rmi/javax/management/remote/rmi/RMIServerImpl_Stub.html",
            "description": "RMIServerImpl remote stub. "
        },
        {
            "name": "RMIServerSocketFactory",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMIServerSocketFactory.html",
            "description": "An RMIServerSocketFactory instance is used by the RMI runtime in order to obtain server sockets for RMI calls. "
        },
        {
            "name": "RMISocketFactory",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/RMISocketFactory.html",
            "description": "An RMISocketFactory instance is used by the RMI runtime in order to obtain client and server sockets for RMI calls. "
        },
        {
            "name": "Robot",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Robot.html",
            "description": "This class is used to generate native system input events for the purposes of test automation, self-running demos, and other applications where control of the mouse and keyboard is needed. "
        },
        {
            "name": "Role",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/Role.html",
            "description": "Represents a role: includes a role name and referenced MBeans (via their ObjectNames). "
        },
        {
            "name": "RoleInfo",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleInfo.html",
            "description": "A RoleInfo object summarises a role in a relation type. "
        },
        {
            "name": "RoleInfoNotFoundException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleInfoNotFoundException.html",
            "description": "This exception is raised when there is no role info with given name in a given relation type. "
        },
        {
            "name": "RoleList",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleList.html",
            "description": "A RoleList represents a list of roles (Role objects). "
        },
        {
            "name": "RoleNotFoundException",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleNotFoundException.html",
            "description": "This exception is raised when a role in a relation does not exist, or is not readable, or is not settable. "
        },
        {
            "name": "RoleResult",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleResult.html",
            "description": "Represents the result of a multiple access to several roles of a relation (either for reading or writing). "
        },
        {
            "name": "RoleStatus",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleStatus.html",
            "description": "This class describes the various problems which can be encountered when accessing a role. "
        },
        {
            "name": "RoleUnresolved",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleUnresolved.html",
            "description": "Represents an unresolved role: a role not retrieved from a relation due to a problem. "
        },
        {
            "name": "RoleUnresolvedList",
            "package": "javax.management.relation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html",
            "description": "A RoleUnresolvedList represents a list of RoleUnresolved objects, representing roles not retrieved from a relation due to a problem encountered when trying to access (read or write) the roles. "
        },
        {
            "name": "RootPaneContainer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RootPaneContainer.html",
            "description": "This interface is implemented by components that have a single JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame. "
        },
        {
            "name": "RootPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/RootPaneUI.html",
            "description": "Pluggable look and feel interface for JRootPane. "
        },
        {
            "name": "RoundEnvironment",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/RoundEnvironment.html",
            "description": "An annotation processing tool framework will provide an annotation processor with an object implementing this interface so that the processor can query for information about a round of annotation processing. "
        },
        {
            "name": "RoundingMode",
            "package": "java.math",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/math/RoundingMode.html",
            "description": "Specifies a rounding behavior for numerical operations capable of discarding precision. "
        },
        {
            "name": "RoundRectangle2D",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/RoundRectangle2D.html",
            "description": "The RoundRectangle2D class defines a rectangle with rounded corners defined by a location (x,y) , a dimension (w x h) , and the width and height of an arc with which to round the corners. "
        },
        {
            "name": "RoundRectangle2D.Double",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/RoundRectangle2D.Double.html",
            "description": "The Double class defines a rectangle with rounded corners all specified in double coordinates. "
        },
        {
            "name": "RoundRectangle2D.Float",
            "package": "java.awt.geom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/geom/RoundRectangle2D.Float.html",
            "description": "The Float class defines a rectangle with rounded corners all specified in float coordinates. "
        },
        {
            "name": "RowFilter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RowFilter.html",
            "description": "RowFilter is used to filter out entries from the model so that they are not shown in the view. "
        },
        {
            "name": "RowFilter.ComparisonType",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RowFilter.ComparisonType.html",
            "description": "Enumeration of the possible comparison values supported by some of the default RowFilter s. "
        },
        {
            "name": "RowFilter.Entry",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RowFilter.Entry.html",
            "description": "An Entry object is passed to instances of RowFilter , allowing the filter to get the value of the entry's data, and thus to determine whether the entry should be shown. "
        },
        {
            "name": "RowId",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/RowId.html",
            "description": "The representation (mapping) in the Java programming language of an SQL ROWID value. "
        },
        {
            "name": "RowIdLifetime",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/RowIdLifetime.html",
            "description": "Enumeration for RowId life-time values. "
        },
        {
            "name": "RowMapper",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/RowMapper.html",
            "description": "Defines the requirements for an object that translates paths in the tree into display rows. "
        },
        {
            "name": "RowSet",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSet.html",
            "description": "The interface that adds support to the JDBC API for the JavaBeans component model. "
        },
        {
            "name": "RowSetEvent",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetEvent.html",
            "description": "An Event object generated when an event occurs to a RowSet object. "
        },
        {
            "name": "RowSetFactory",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/RowSetFactory.html",
            "description": "An interface that defines the implementation of a factory that is used to obtain different types of RowSet implementations. "
        },
        {
            "name": "RowSetInternal",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetInternal.html",
            "description": "The interface that a RowSet object implements in order to present itself to a RowSetReader or RowSetWriter object. "
        },
        {
            "name": "RowSetListener",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetListener.html",
            "description": "An interface that must be implemented by a component that wants to be notified when a significant event happens in the life of a RowSet object. "
        },
        {
            "name": "RowSetMetaData",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetMetaData.html",
            "description": "An object that contains information about the columns in a RowSet object. "
        },
        {
            "name": "RowSetMetaDataImpl",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/RowSetMetaDataImpl.html",
            "description": "Provides implementations for the methods that set and get metadata information about a RowSet object's columns. "
        },
        {
            "name": "RowSetProvider",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/RowSetProvider.html",
            "description": "A factory API that enables applications to obtain a RowSetFactory implementation  that can be used to create different types of RowSet implementations. "
        },
        {
            "name": "RowSetReader",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetReader.html",
            "description": "The facility that a disconnected RowSet object calls on to populate itself with rows of data. "
        },
        {
            "name": "RowSetWarning",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/RowSetWarning.html",
            "description": "An extension of SQLException that provides information about database warnings set on RowSet objects. "
        },
        {
            "name": "RowSetWriter",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/RowSetWriter.html",
            "description": "An object that implements the RowSetWriter interface, called a writer . "
        },
        {
            "name": "RowSorter",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RowSorter.html",
            "description": "RowSorter provides the basis for sorting and filtering. "
        },
        {
            "name": "RowSorter.SortKey",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/RowSorter.SortKey.html",
            "description": "SortKey describes the sort order for a particular column. "
        },
        {
            "name": "RowSorterEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/RowSorterEvent.html",
            "description": "RowSorterEvent provides notification of changes to a RowSorter . "
        },
        {
            "name": "RowSorterEvent.Type",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/RowSorterEvent.Type.html",
            "description": "Enumeration of the types of RowSorterEvent s. "
        },
        {
            "name": "RowSorterListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/RowSorterListener.html",
            "description": "RowSorterListener s are notified of changes to a RowSorter . "
        },
        {
            "name": "RSAKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/RSAKey.html",
            "description": "The interface to a public or private key in PKCS#1 v2.2 standard, such as those for RSA, or RSASSA-PSS algorithms. "
        },
        {
            "name": "RSAKeyGenParameterSpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAKeyGenParameterSpec.html",
            "description": "This class specifies the set of parameters used to generate an RSA key pair. "
        },
        {
            "name": "RSAMultiPrimePrivateCrtKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/RSAMultiPrimePrivateCrtKey.html",
            "description": "The interface to an RSA multi-prime private key, as defined in the PKCS#1 v2.2 standard, using the Chinese Remainder Theorem (CRT) information values. "
        },
        {
            "name": "RSAMultiPrimePrivateCrtKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAMultiPrimePrivateCrtKeySpec.html",
            "description": "This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.2 standard using the Chinese Remainder Theorem (CRT) information values for efficiency. "
        },
        {
            "name": "RSAOtherPrimeInfo",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAOtherPrimeInfo.html",
            "description": "This class represents the triplet (prime, exponent, and coefficient) inside RSA's OtherPrimeInfo structure, as defined in the PKCS#1 v2.2 standard. "
        },
        {
            "name": "RSAPrivateCrtKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/RSAPrivateCrtKey.html",
            "description": "The interface to an RSA private key, as defined in the PKCS#1 v2.2 standard, using the Chinese Remainder Theorem (CRT) information values. "
        },
        {
            "name": "RSAPrivateCrtKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAPrivateCrtKeySpec.html",
            "description": "This class specifies an RSA private key, as defined in the PKCS#1 v2.2 standard, using the Chinese Remainder Theorem (CRT) information values for efficiency. "
        },
        {
            "name": "RSAPrivateKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/RSAPrivateKey.html",
            "description": "The interface to an RSA private key. "
        },
        {
            "name": "RSAPrivateKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAPrivateKeySpec.html",
            "description": "This class specifies an RSA private key. "
        },
        {
            "name": "RSAPublicKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/RSAPublicKey.html",
            "description": "The interface to an RSA public key. "
        },
        {
            "name": "RSAPublicKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/RSAPublicKeySpec.html",
            "description": "This class specifies an RSA public key. "
        },
        {
            "name": "RTFEditorKit",
            "package": "javax.swing.text.rtf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/rtf/RTFEditorKit.html",
            "description": "This is the default implementation of RTF editing functionality. "
        },
        {
            "name": "RuleBasedCollator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/RuleBasedCollator.html",
            "description": "The RuleBasedCollator class is a concrete subclass of Collator that provides a simple, data-driven, table collator. "
        },
        {
            "name": "Runnable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Runnable.html",
            "description": "The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. "
        },
        {
            "name": "RunnableFuture",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RunnableFuture.html",
            "description": "A Future that is Runnable . "
        },
        {
            "name": "RunnableScheduledFuture",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/RunnableScheduledFuture.html",
            "description": "A ScheduledFuture that is Runnable . "
        },
        {
            "name": "Runtime",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Runtime.html",
            "description": "Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running. "
        },
        {
            "name": "Runtime.Version",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Runtime.Version.html",
            "description": "A representation of a version string for an implementation of the Java\u00a0SE Platform. "
        },
        {
            "name": "RuntimeErrorException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/RuntimeErrorException.html",
            "description": "When a java.lang.Error occurs in the agent it should be caught and re-thrown as a RuntimeErrorException . "
        },
        {
            "name": "RuntimeException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/RuntimeException.html",
            "description": "RuntimeException is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine. "
        },
        {
            "name": "RuntimeMBeanException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/RuntimeMBeanException.html",
            "description": "Represents runtime exceptions thrown by MBean methods in the agent. "
        },
        {
            "name": "RuntimeMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/RuntimeMXBean.html",
            "description": "The management interface for the runtime system of the Java virtual machine. "
        },
        {
            "name": "RuntimeOperationsException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/RuntimeOperationsException.html",
            "description": "Represents runtime exceptions thrown in the agent when performing operations on MBeans. "
        },
        {
            "name": "RuntimePermission",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/RuntimePermission.html",
            "description": "This class is for runtime permissions. "
        },
        {
            "name": "SafeVarargs",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/SafeVarargs.html",
            "description": "A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter. "
        },
        {
            "name": "SampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/SampleModel.html",
            "description": "This abstract class defines an interface for extracting samples of pixels  in an image. "
        },
        {
            "name": "Sasl",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/Sasl.html",
            "description": "A static class for creating SASL clients and servers. "
        },
        {
            "name": "SaslClient",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/SaslClient.html",
            "description": "Performs SASL authentication as a client. "
        },
        {
            "name": "SaslClientFactory",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/SaslClientFactory.html",
            "description": "An interface for creating instances of SaslClient . "
        },
        {
            "name": "SaslException",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/SaslException.html",
            "description": "This class represents an error that has occurred when using SASL. "
        },
        {
            "name": "SaslServer",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/SaslServer.html",
            "description": "Performs SASL authentication as a server. "
        },
        {
            "name": "SaslServerFactory",
            "package": "javax.security.sasl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.sasl/javax/security/sasl/SaslServerFactory.html",
            "description": "An interface for creating instances of SaslServer . "
        },
        {
            "name": "Savepoint",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Savepoint.html",
            "description": "The representation of a savepoint, which is a point within the current transaction that can be referenced from the Connection.rollback method. "
        },
        {
            "name": "SAXException",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/SAXException.html",
            "description": "Encapsulate a general SAX error or warning. "
        },
        {
            "name": "SAXNotRecognizedException",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/SAXNotRecognizedException.html",
            "description": "Exception class for an unrecognized identifier. "
        },
        {
            "name": "SAXNotSupportedException",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/SAXNotSupportedException.html",
            "description": "Exception class for an unsupported operation. "
        },
        {
            "name": "SAXParseException",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/SAXParseException.html",
            "description": "Encapsulate an XML parse error or warning. "
        },
        {
            "name": "SAXParser",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/SAXParser.html",
            "description": "Defines the API that wraps an XMLReader implementation class. "
        },
        {
            "name": "SAXParserFactory",
            "package": "javax.xml.parsers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/parsers/SAXParserFactory.html",
            "description": "Defines a factory API that enables applications to configure and obtain a SAX based parser to parse XML documents. "
        },
        {
            "name": "SAXResult",
            "package": "javax.xml.transform.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/sax/SAXResult.html",
            "description": "Acts as an holder for a transformation Result. "
        },
        {
            "name": "SAXSource",
            "package": "javax.xml.transform.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/sax/SAXSource.html",
            "description": "Acts as an holder for SAX-style Source. "
        },
        {
            "name": "SAXTransformerFactory",
            "package": "javax.xml.transform.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/sax/SAXTransformerFactory.html",
            "description": "This class extends TransformerFactory to provide SAX-specific factory methods. "
        },
        {
            "name": "Scanner",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Scanner.html",
            "description": "A simple text scanner which can parse primitive types and strings using regular expressions. "
        },
        {
            "name": "ScatteringByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ScatteringByteChannel.html",
            "description": "A channel that can read bytes into a sequence of buffers. "
        },
        {
            "name": "ScheduledExecutorService",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html",
            "description": "An ExecutorService that can schedule commands to run after a given delay, or to execute periodically. "
        },
        {
            "name": "ScheduledFuture",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ScheduledFuture.html",
            "description": "A delayed result-bearing action that can be cancelled. "
        },
        {
            "name": "ScheduledThreadPoolExecutor",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html",
            "description": "A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically. "
        },
        {
            "name": "Schema",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/Schema.html",
            "description": "Immutable in-memory representation of grammar. "
        },
        {
            "name": "SchemaFactory",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/SchemaFactory.html",
            "description": "Factory that creates Schema objects. "
        },
        {
            "name": "SchemaFactoryConfigurationError",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/SchemaFactoryConfigurationError.html",
            "description": "Thrown when a problem with configuration with the Schema Factories exists. "
        },
        {
            "name": "SchemaFactoryLoader",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/SchemaFactoryLoader.html",
            "description": "Factory that creates SchemaFactory . "
        },
        {
            "name": "SchemaViolationException",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/SchemaViolationException.html",
            "description": "This exception is thrown when a method in some ways violates the schema. "
        },
        {
            "name": "Scope",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/Scope.html",
            "description": "Interface for determining locally available program elements, such as local variables and imports. "
        },
        {
            "name": "ScreenSleepEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/ScreenSleepEvent.html",
            "description": "Event sent when the displays attached to the system enter and exit power save sleep. "
        },
        {
            "name": "ScreenSleepListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/ScreenSleepListener.html",
            "description": "Implementors receive notification when the displays attached to the system have entered power save sleep. "
        },
        {
            "name": "ScriptContext",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/ScriptContext.html",
            "description": "The interface whose implementing classes are used to connect Script Engines with objects, such as scoped Bindings, in hosting applications. "
        },
        {
            "name": "ScriptEngine",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/ScriptEngine.html",
            "description": "ScriptEngine is the fundamental interface whose methods must be fully functional in every implementation of this specification. "
        },
        {
            "name": "ScriptEngineFactory",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/ScriptEngineFactory.html",
            "description": "ScriptEngineFactory is used to describe and instantiate ScriptEngines . "
        },
        {
            "name": "ScriptEngineManager",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/ScriptEngineManager.html",
            "description": "The ScriptEngineManager implements a discovery and instantiation mechanism for ScriptEngine classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. "
        },
        {
            "name": "ScriptException",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/ScriptException.html",
            "description": "The generic Exception class for the Scripting APIs. "
        },
        {
            "name": "Scrollable",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Scrollable.html",
            "description": "An interface that provides information to a scrolling container like JScrollPane. "
        },
        {
            "name": "Scrollbar",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Scrollbar.html",
            "description": "The Scrollbar class embodies a scroll bar, a familiar user-interface object. "
        },
        {
            "name": "ScrollBarUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ScrollBarUI.html",
            "description": "Pluggable look and feel interface for JScrollBar. "
        },
        {
            "name": "ScrollPane",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ScrollPane.html",
            "description": "A container class which implements automatic horizontal and/or vertical scrolling for a single child component. "
        },
        {
            "name": "ScrollPaneAdjustable",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/ScrollPaneAdjustable.html",
            "description": "This class represents the state of a horizontal or vertical scrollbar of a ScrollPane . "
        },
        {
            "name": "ScrollPaneConstants",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ScrollPaneConstants.html",
            "description": "Constants used with the JScrollPane component. "
        },
        {
            "name": "ScrollPaneLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ScrollPaneLayout.html",
            "description": "The layout manager used by JScrollPane . "
        },
        {
            "name": "ScrollPaneLayout.UIResource",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ScrollPaneLayout.UIResource.html",
            "description": "The UI resource version of ScrollPaneLayout . "
        },
        {
            "name": "ScrollPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ScrollPaneUI.html",
            "description": "Pluggable look and feel interface for JScrollPane. "
        },
        {
            "name": "SctpChannel",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpChannel.html",
            "description": "A selectable channel for message-oriented connected SCTP sockets. "
        },
        {
            "name": "SctpMultiChannel",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpMultiChannel.html",
            "description": "A selectable channel for message-oriented SCTP sockets. "
        },
        {
            "name": "SctpServerChannel",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpServerChannel.html",
            "description": "A selectable channel for message-oriented listening SCTP sockets. "
        },
        {
            "name": "SctpSocketOption",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpSocketOption.html",
            "description": "A socket option associated with an SCTP channel. "
        },
        {
            "name": "SctpStandardSocketOptions",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpStandardSocketOptions.html",
            "description": "SCTP channels supports the socket options defined by this class (as well as those listed in the particular channel class) and may support additional Implementation specific socket options. "
        },
        {
            "name": "SctpStandardSocketOptions.InitMaxStreams",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SctpStandardSocketOptions.InitMaxStreams.html",
            "description": "This class is used to set the maximum number of inbound/outbound streams used by the local endpoint during association initialization. "
        },
        {
            "name": "SealedObject",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/SealedObject.html",
            "description": "This class enables a programmer to create an object and protect its confidentiality with a cryptographic algorithm. "
        },
        {
            "name": "SearchControls",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/SearchControls.html",
            "description": "This class encapsulates factors that determine scope of search and what gets returned as a result of the search. "
        },
        {
            "name": "SearchResult",
            "package": "javax.naming.directory",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/directory/SearchResult.html",
            "description": "This class represents an item in the NamingEnumeration returned as a result of the DirContext.search() methods. "
        },
        {
            "name": "SecondaryLoop",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/SecondaryLoop.html",
            "description": "A helper interface to run the nested event loop. "
        },
        {
            "name": "SecretKey",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/SecretKey.html",
            "description": "A secret (symmetric) key. "
        },
        {
            "name": "SecretKeyFactory",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/SecretKeyFactory.html",
            "description": "This class represents a factory for secret keys. "
        },
        {
            "name": "SecretKeyFactorySpi",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/SecretKeyFactorySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the SecretKeyFactory class. "
        },
        {
            "name": "SecretKeySpec",
            "package": "javax.crypto.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/spec/SecretKeySpec.html",
            "description": "This class specifies a secret key in a provider-independent fashion. "
        },
        {
            "name": "SecureCacheResponse",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SecureCacheResponse.html",
            "description": "Represents a cache response originally retrieved through secure means, such as TLS. "
        },
        {
            "name": "SecureClassLoader",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SecureClassLoader.html",
            "description": "This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default. "
        },
        {
            "name": "SecureDirectoryStream",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/SecureDirectoryStream.html",
            "description": "A DirectoryStream that defines operations on files that are located relative to an open directory. "
        },
        {
            "name": "SecureLookupSupplier",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/SecureLookupSupplier.html",
            "description": "Provides security-checked access to a MethodHandles.Lookup object. "
        },
        {
            "name": "SecureRandom",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SecureRandom.html",
            "description": "This class provides a cryptographically strong random number generator (RNG). "
        },
        {
            "name": "SecureRandomParameters",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SecureRandomParameters.html",
            "description": "A marker interface for parameters used in various SecureRandom methods. "
        },
        {
            "name": "SecureRandomSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SecureRandomSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the SecureRandom class. "
        },
        {
            "name": "Security",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Security.html",
            "description": "This class centralizes all security properties and common security methods. "
        },
        {
            "name": "SecurityException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/SecurityException.html",
            "description": "Thrown by the security manager to indicate a security violation. "
        },
        {
            "name": "SecurityManager",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/SecurityManager.html",
            "description": "The security manager is a class that allows applications to implement a security policy. "
        },
        {
            "name": "SecurityPermission",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SecurityPermission.html",
            "description": "This class is for security permissions. "
        },
        {
            "name": "SeekableByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/SeekableByteChannel.html",
            "description": "A byte channel that maintains a current position and allows the position to be changed. "
        },
        {
            "name": "SeeTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SeeTree.html",
            "description": "A tree node for an @see block tag. "
        },
        {
            "name": "Segment",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Segment.html",
            "description": "A segment of a character array representing a fragment of text. "
        },
        {
            "name": "SelectableChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/SelectableChannel.html",
            "description": "A channel that can be multiplexed via a Selector . "
        },
        {
            "name": "SelectionKey",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/SelectionKey.html",
            "description": "A token representing the registration of a SelectableChannel with a Selector . "
        },
        {
            "name": "Selector",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/Selector.html",
            "description": "A multiplexor of SelectableChannel objects. "
        },
        {
            "name": "SelectorProvider",
            "package": "java.nio.channels.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/spi/SelectorProvider.html",
            "description": "Service-provider class for selectors and selectable channels. "
        },
        {
            "name": "Semaphore",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/Semaphore.html",
            "description": "A counting semaphore. "
        },
        {
            "name": "SendFailedNotification",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/SendFailedNotification.html",
            "description": "Notification emitted when a send failed notification has been received. "
        },
        {
            "name": "SeparatorUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/SeparatorUI.html",
            "description": "Pluggable look and feel interface for JSeparator. "
        },
        {
            "name": "Sequence",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Sequence.html",
            "description": "A Sequence is a data structure containing musical information (often an entire song or composition) that can be played back by a Sequencer object. "
        },
        {
            "name": "SequenceInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/SequenceInputStream.html",
            "description": "A SequenceInputStream represents the logical concatenation of other input streams. "
        },
        {
            "name": "SequenceLayout",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/SequenceLayout.html",
            "description": "A sequence layout. "
        },
        {
            "name": "Sequencer",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Sequencer.html",
            "description": "A hardware or software device that plays back a MIDI sequence is known as a sequencer . "
        },
        {
            "name": "Sequencer.SyncMode",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html",
            "description": "A SyncMode object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device. "
        },
        {
            "name": "Serial",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Serial.html",
            "description": "Indicates that an annotated field or method is part of the serialization mechanism defined by the Java Object Serialization Specification . "
        },
        {
            "name": "SerialArray",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialArray.html",
            "description": "A serialized version of an Array object, which is the mapping in the Java programming language of an SQL ARRAY value. "
        },
        {
            "name": "SerialBlob",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html",
            "description": "A serialized mapping in the Java programming language of an SQL BLOB value. "
        },
        {
            "name": "SerialClob",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialClob.html",
            "description": "A serialized mapping in the Java programming language of an SQL CLOB value. "
        },
        {
            "name": "SerialDatalink",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialDatalink.html",
            "description": "A serialized mapping in the Java programming language of an SQL DATALINK value. "
        },
        {
            "name": "SerialDataTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SerialDataTree.html",
            "description": "A tree node for an @serialData block tag. "
        },
        {
            "name": "SerialException",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html",
            "description": "Indicates and an error with the serialization or de-serialization of SQL types such as BLOB, CLOB, STRUCT or ARRAY in addition to SQL types such as DATALINK and JAVAOBJECT "
        },
        {
            "name": "SerialFieldTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SerialFieldTree.html",
            "description": "A tree node for an @serialData block tag. "
        },
        {
            "name": "Serializable",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Serializable.html",
            "description": "Serializability of a class is enabled by the class implementing the java.io.Serializable interface. "
        },
        {
            "name": "SerializablePermission",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/SerializablePermission.html",
            "description": "This class is for Serializable permissions. "
        },
        {
            "name": "SerializedLambda",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/SerializedLambda.html",
            "description": "Serialized form of a lambda expression. "
        },
        {
            "name": "SerialJavaObject",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialJavaObject.html",
            "description": "A serializable mapping in the Java programming language of an SQL JAVA_OBJECT value. "
        },
        {
            "name": "SerialRef",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialRef.html",
            "description": "A serialized mapping of a Ref object, which is the mapping in the Java programming language of an SQL REF value. "
        },
        {
            "name": "SerialStruct",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialStruct.html",
            "description": "A serialized mapping in the Java programming language of an SQL structured type. "
        },
        {
            "name": "SerialTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SerialTree.html",
            "description": "A tree node for an @serial block tag. "
        },
        {
            "name": "ServerCloneException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/ServerCloneException.html",
            "description": "A ServerCloneException is thrown if a remote exception occurs during the cloning of a UnicastRemoteObject . "
        },
        {
            "name": "ServerError",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/ServerError.html",
            "description": "A ServerError is thrown as a result of a remote method invocation when an Error is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. "
        },
        {
            "name": "ServerException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/ServerException.html",
            "description": "A ServerException is thrown as a result of a remote method invocation when a RemoteException is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. "
        },
        {
            "name": "ServerNotActiveException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/ServerNotActiveException.html",
            "description": "An ServerNotActiveException is an Exception thrown during a call to RemoteServer.getClientHost if the getClientHost method is called outside of servicing a remote method call. "
        },
        {
            "name": "ServerRef",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/ServerRef.html",
            "description": "No replacement. "
        },
        {
            "name": "ServerRuntimeException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/ServerRuntimeException.html",
            "description": "no replacement "
        },
        {
            "name": "ServerSocket",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/ServerSocket.html",
            "description": "This class implements server sockets. "
        },
        {
            "name": "ServerSocketChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ServerSocketChannel.html",
            "description": "A selectable channel for stream-oriented listening sockets. "
        },
        {
            "name": "ServerSocketFactory",
            "package": "javax.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ServerSocketFactory.html",
            "description": "This class creates server sockets. "
        },
        {
            "name": "ServiceConfigurationError",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ServiceConfigurationError.html",
            "description": "Error thrown when something goes wrong while locating, loading, or instantiating a service provider. "
        },
        {
            "name": "ServiceLoader",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ServiceLoader.html",
            "description": "A facility to load implementations of a service. "
        },
        {
            "name": "ServiceLoader.Provider",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/ServiceLoader.Provider.html",
            "description": "Represents a service provider located by ServiceLoader . "
        },
        {
            "name": "ServiceNotFoundException",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ServiceNotFoundException.html",
            "description": "Represents exceptions raised when a requested service is not supported. "
        },
        {
            "name": "ServicePermission",
            "package": "javax.security.auth.kerberos",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.security.jgss/javax/security/auth/kerberos/ServicePermission.html",
            "description": "This class is used to protect Kerberos services and the credentials necessary to access those services. "
        },
        {
            "name": "ServiceRegistry",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ServiceRegistry.html",
            "description": "A registry for service provider instances for Image I/O service types. "
        },
        {
            "name": "ServiceRegistry.Filter",
            "package": "javax.imageio.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/spi/ServiceRegistry.Filter.html",
            "description": "A simple filter interface used by ServiceRegistry.getServiceProviders to select providers matching an arbitrary criterion. "
        },
        {
            "name": "ServiceUI",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/ServiceUI.html",
            "description": "This class is a collection of UI convenience methods which provide a graphical user dialog for browsing print services looked up through the Java Print Service API. "
        },
        {
            "name": "ServiceUIFactory",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/ServiceUIFactory.html",
            "description": "Services may optionally provide UIs which allow different styles of interaction in different roles. "
        },
        {
            "name": "ServiceUnavailableException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ServiceUnavailableException.html",
            "description": "This exception is thrown when attempting to communicate with a directory or naming service and that service is not available. "
        },
        {
            "name": "Set",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Set.html",
            "description": "A collection that contains no duplicate elements. "
        },
        {
            "name": "SetOfIntegerSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/SetOfIntegerSyntax.html",
            "description": "Class SetOfIntegerSyntax is an abstract base class providing the common implementation of all attributes whose value is a set of nonnegative integers. "
        },
        {
            "name": "SettingControl",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/SettingControl.html",
            "description": "Base class to extend to create setting controls. "
        },
        {
            "name": "SettingDefinition",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/SettingDefinition.html",
            "description": "Annotation that specifies that a method in an event class should be used to filter out events. "
        },
        {
            "name": "SettingDescriptor",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/SettingDescriptor.html",
            "description": "Describes an event setting. "
        },
        {
            "name": "SettingDescriptorInfo",
            "package": "jdk.management.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management.jfr/jdk/management/jfr/SettingDescriptorInfo.html",
            "description": "Management class that describes a setting, for example name, description and default value. "
        },
        {
            "name": "Severity",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Severity.html",
            "description": "Class Severity is a printing attribute class, an enumeration, that denotes the severity of a PrinterStateReason attribute. "
        },
        {
            "name": "Shape",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Shape.html",
            "description": "The Shape interface provides definitions for objects that represent some form of geometric shape. "
        },
        {
            "name": "ShapeGraphicAttribute",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/ShapeGraphicAttribute.html",
            "description": "The ShapeGraphicAttribute class is an implementation of GraphicAttribute that draws shapes in a TextLayout . "
        },
        {
            "name": "ShardingKey",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ShardingKey.html",
            "description": "Interface used to indicate that this object represents a Sharding Key. "
        },
        {
            "name": "ShardingKeyBuilder",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/ShardingKeyBuilder.html",
            "description": "A builder created from a DataSource or XADataSource object, used to create a ShardingKey with sub-keys of supported data types. "
        },
        {
            "name": "SheetCollate",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/SheetCollate.html",
            "description": "Class SheetCollate is a printing attribute class, an enumeration, that specifies whether or not the media sheets of each copy of each printed document in a job are to be in sequence, when multiple copies of the document are specified by the Copies attribute. "
        },
        {
            "name": "Short",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Short.html",
            "description": "The Short class wraps a value of primitive type short in an object. "
        },
        {
            "name": "ShortBuffer",
            "package": "java.nio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/ShortBuffer.html",
            "description": "A short buffer. "
        },
        {
            "name": "ShortBufferException",
            "package": "javax.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/crypto/ShortBufferException.html",
            "description": "This exception is thrown when an output buffer provided by the user is too short to hold the operation result. "
        },
        {
            "name": "ShortLookupTable",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/ShortLookupTable.html",
            "description": "This class defines a lookup table object. "
        },
        {
            "name": "ShortMessage",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/ShortMessage.html",
            "description": "A ShortMessage contains a MIDI message that has at most two data bytes following its status byte. "
        },
        {
            "name": "ShortType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ShortType.html",
            "description": "The type of all primitive short values accessed in the target VM. "
        },
        {
            "name": "ShortValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ShortValue.html",
            "description": "Provides access to a primitive short value in the target VM. "
        },
        {
            "name": "ShutdownChannelGroupException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/ShutdownChannelGroupException.html",
            "description": "Unchecked exception thrown when an attempt is made to construct a channel in  a group that is shutdown or the completion handler for an I/O operation  cannot be invoked because the channel group has terminated. "
        },
        {
            "name": "ShutdownNotification",
            "package": "com.sun.nio.sctp",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.sctp/com/sun/nio/sctp/ShutdownNotification.html",
            "description": "Notification emitted when a peers shutdowns an the association. "
        },
        {
            "name": "Sides",
            "package": "javax.print.attribute.standard",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/standard/Sides.html",
            "description": "Class Sides is a printing attribute class, an enumeration, that specifies how print-stream pages are to be imposed upon the sides of an instance of a selected medium, i.e., an impression. "
        },
        {
            "name": "Signature",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Signature.html",
            "description": "The Signature class is used to provide applications the functionality of a digital signature algorithm. "
        },
        {
            "name": "SignatureException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SignatureException.html",
            "description": "This is the generic Signature exception. "
        },
        {
            "name": "SignatureMethod",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/SignatureMethod.html",
            "description": "A representation of the XML SignatureMethod element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "SignatureMethodParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/SignatureMethodParameterSpec.html",
            "description": "A specification of algorithm parameters for an XML SignatureMethod algorithm. "
        },
        {
            "name": "SignatureProperties",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/SignatureProperties.html",
            "description": "A representation of the XML SignatureProperties element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "SignatureProperty",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/SignatureProperty.html",
            "description": "A representation of the XML SignatureProperty element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "SignatureSpi",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SignatureSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the Signature class, which is used to provide the functionality of a digital signature algorithm. "
        },
        {
            "name": "SignedInfo",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/SignedInfo.html",
            "description": "An representation of the XML SignedInfo element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "SignedObject",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/SignedObject.html",
            "description": "SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected. "
        },
        {
            "name": "Signer",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Signer.html",
            "description": "This class is deprecated and subject to removal in a future     version of Java SE. "
        },
        {
            "name": "SignStyle",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/SignStyle.html",
            "description": "Enumeration of ways to handle the positive/negative sign. "
        },
        {
            "name": "SimpleAnnotationValueVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor14.html",
            "description": "A simple visitor for annotation values with default behavior appropriate for source version RELEASE_14 . "
        },
        {
            "name": "SimpleAnnotationValueVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor6.html",
            "description": "A simple visitor for annotation values with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "SimpleAnnotationValueVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor7.html",
            "description": "A simple visitor for annotation values with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "SimpleAnnotationValueVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor8.html",
            "description": "A simple visitor for annotation values with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "SimpleAnnotationValueVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor9.html",
            "description": "A simple visitor for annotation values with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "SimpleAttributeSet",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/SimpleAttributeSet.html",
            "description": "A straightforward implementation of MutableAttributeSet using a hash table. "
        },
        {
            "name": "SimpleBeanInfo",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/SimpleBeanInfo.html",
            "description": "This is a support class to make it easier for people to provide BeanInfo classes. "
        },
        {
            "name": "SimpleBindings",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/SimpleBindings.html",
            "description": "A simple implementation of Bindings backed by a HashMap or some other specified Map . "
        },
        {
            "name": "SimpleDateFormat",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/SimpleDateFormat.html",
            "description": "SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. "
        },
        {
            "name": "SimpleDoc",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/SimpleDoc.html",
            "description": "This class is an implementation of interface Doc that can be used in many common printing requests. "
        },
        {
            "name": "SimpleDocTreeVisitor",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/SimpleDocTreeVisitor.html",
            "description": "A simple visitor for tree nodes. "
        },
        {
            "name": "SimpleElementVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleElementVisitor14.html",
            "description": "Associated with records, a preview feature of the Java language. A simple visitor of program elements with default behavior appropriate for the RELEASE_14 source version. "
        },
        {
            "name": "SimpleElementVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleElementVisitor6.html",
            "description": "A simple visitor of program elements with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "SimpleElementVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleElementVisitor7.html",
            "description": "A simple visitor of program elements with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "SimpleElementVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleElementVisitor8.html",
            "description": "A simple visitor of program elements with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "SimpleElementVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleElementVisitor9.html",
            "description": "A simple visitor of program elements with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "SimpleFileVisitor",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/SimpleFileVisitor.html",
            "description": "A simple visitor of files with default behavior to visit all files and to re-throw I/O errors. "
        },
        {
            "name": "SimpleFormatter",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/SimpleFormatter.html",
            "description": "Print a brief summary of the LogRecord in a human readable format. "
        },
        {
            "name": "SimpleJavaFileObject",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/SimpleJavaFileObject.html",
            "description": "Provides simple implementations for most methods in JavaFileObject. "
        },
        {
            "name": "SimpleLinkRequest",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/SimpleLinkRequest.html",
            "description": "Default simple implementation of LinkRequest . "
        },
        {
            "name": "SimpleRelinkableCallSite",
            "package": "jdk.dynalink.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/support/SimpleRelinkableCallSite.html",
            "description": "A relinkable call site that implements monomorphic inline caching strategy, only being linked to a single GuardedInvocation at any given time. "
        },
        {
            "name": "SimpleScriptContext",
            "package": "javax.script",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.scripting/javax/script/SimpleScriptContext.html",
            "description": "Simple implementation of ScriptContext. "
        },
        {
            "name": "SimpleTimeZone",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/SimpleTimeZone.html",
            "description": "SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar. "
        },
        {
            "name": "SimpleTreeVisitor",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/SimpleTreeVisitor.html",
            "description": "A simple visitor for tree nodes. "
        },
        {
            "name": "SimpleType",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/SimpleType.html",
            "description": "The SimpleType class is the open type class whose instances describe all open data values which are neither arrays, nor CompositeData values, nor TabularData values. "
        },
        {
            "name": "SimpleTypeVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor14.html",
            "description": "A simple visitor of types with default behavior appropriate for source version RELEASE_14 . "
        },
        {
            "name": "SimpleTypeVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor6.html",
            "description": "A simple visitor of types with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "SimpleTypeVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor7.html",
            "description": "A simple visitor of types with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "SimpleTypeVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor8.html",
            "description": "A simple visitor of types with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "SimpleTypeVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor9.html",
            "description": "A simple visitor of types with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "SinceTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SinceTree.html",
            "description": "A tree node for an @since block tag. "
        },
        {
            "name": "SinglePixelPackedSampleModel",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/SinglePixelPackedSampleModel.html",
            "description": "This class represents pixel data packed such that the N samples which make  up a single pixel are stored in a single data array element, and each data  data array element holds samples for only one pixel. "
        },
        {
            "name": "SingleSelectionModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SingleSelectionModel.html",
            "description": "A model that supports at most one indexed selection. "
        },
        {
            "name": "Size2DSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/Size2DSyntax.html",
            "description": "Class Size2DSyntax is an abstract base class providing the common implementation of all attributes denoting a size in two dimensions. "
        },
        {
            "name": "SizeLimitExceededException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/SizeLimitExceededException.html",
            "description": "This exception is thrown when a method produces a result that exceeds a size-related limit. "
        },
        {
            "name": "SizeRequirements",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SizeRequirements.html",
            "description": "For the convenience of layout managers, calculates information about the size and position of components. "
        },
        {
            "name": "SizeSequence",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SizeSequence.html",
            "description": "A SizeSequence object efficiently maintains an ordered list of sizes and corresponding positions. "
        },
        {
            "name": "Skeleton",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/Skeleton.html",
            "description": "no replacement. "
        },
        {
            "name": "SkeletonMismatchException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/SkeletonMismatchException.html",
            "description": "no replacement. "
        },
        {
            "name": "SkeletonNotFoundException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/SkeletonNotFoundException.html",
            "description": "no replacement. "
        },
        {
            "name": "SliderUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/SliderUI.html",
            "description": "Pluggable look and feel interface for JSlider. "
        },
        {
            "name": "SNIHostName",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SNIHostName.html",
            "description": "Instances of this class represent a server name of type host_name in a Server Name Indication (SNI) extension. "
        },
        {
            "name": "SNIMatcher",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SNIMatcher.html",
            "description": "Instances of this class represent a matcher that performs match operations on an SNIServerName instance. "
        },
        {
            "name": "Snippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/Snippet.html",
            "description": "A Snippet represents a snippet of Java source code as passed to JShell.eval(java.lang.String) . "
        },
        {
            "name": "Snippet.Kind",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/Snippet.Kind.html",
            "description": "Describes the general kind of snippet. "
        },
        {
            "name": "Snippet.Status",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/Snippet.Status.html",
            "description": "Describes the current state of a Snippet. "
        },
        {
            "name": "Snippet.SubKind",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/Snippet.SubKind.html",
            "description": "The detailed variety of a snippet. "
        },
        {
            "name": "SnippetEvent",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SnippetEvent.html",
            "description": "A description of a change to a Snippet. "
        },
        {
            "name": "SNIServerName",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SNIServerName.html",
            "description": "Instances of this class represent a server name in a Server Name Indication (SNI) extension. "
        },
        {
            "name": "Socket",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/Socket.html",
            "description": "This class implements client sockets (also called just \"sockets\"). "
        },
        {
            "name": "SocketAddress",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketAddress.html",
            "description": "This class represents a Socket Address with no protocol attachment. "
        },
        {
            "name": "SocketChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/SocketChannel.html",
            "description": "A selectable channel for stream-oriented connecting sockets. "
        },
        {
            "name": "SocketException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketException.html",
            "description": "Thrown to indicate that there is an error creating or accessing a Socket. "
        },
        {
            "name": "SocketFactory",
            "package": "javax.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/SocketFactory.html",
            "description": "This class creates sockets. "
        },
        {
            "name": "SocketHandler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/SocketHandler.html",
            "description": "Simple network logging Handler . "
        },
        {
            "name": "SocketImpl",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketImpl.html",
            "description": "The abstract class SocketImpl is a common superclass of all classes that actually implement sockets. "
        },
        {
            "name": "SocketImplFactory",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketImplFactory.html",
            "description": "This interface defines a factory for socket implementations. "
        },
        {
            "name": "SocketOption",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketOption.html",
            "description": "A socket option associated with a socket. "
        },
        {
            "name": "SocketOptions",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketOptions.html",
            "description": "Interface of methods to get/set socket options. "
        },
        {
            "name": "SocketPermission",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketPermission.html",
            "description": "This class represents access to a network via sockets. "
        },
        {
            "name": "Sockets",
            "package": "jdk.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.net/jdk/net/Sockets.html",
            "description": "Defines static methods to set and get socket options defined by the SocketOption interface. "
        },
        {
            "name": "SocketSecurityException",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/SocketSecurityException.html",
            "description": "This class is obsolete. "
        },
        {
            "name": "SocketTimeoutException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/SocketTimeoutException.html",
            "description": "Signals that a timeout has occurred on a socket read or accept. "
        },
        {
            "name": "SoftBevelBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/SoftBevelBorder.html",
            "description": "A class which implements a raised or lowered bevel with softened corners. "
        },
        {
            "name": "SoftReference",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/SoftReference.html",
            "description": "Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand. "
        },
        {
            "name": "SortControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/SortControl.html",
            "description": "Requests that the results of a search operation be sorted by the LDAP server before being returned. "
        },
        {
            "name": "SortedMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/SortedMap.html",
            "description": "A Map that further provides a total ordering on its keys. "
        },
        {
            "name": "SortedSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/SortedSet.html",
            "description": "A Set that further provides a total ordering on its elements. "
        },
        {
            "name": "SortingFocusTraversalPolicy",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html",
            "description": "A FocusTraversalPolicy that determines traversal order by sorting the Components of a focus traversal cycle based on a given Comparator. "
        },
        {
            "name": "SortKey",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/SortKey.html",
            "description": "A sort key and its associated sort parameters. "
        },
        {
            "name": "SortOrder",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SortOrder.html",
            "description": "SortOrder is an enumeration of the possible sort orderings. "
        },
        {
            "name": "SortResponseControl",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/SortResponseControl.html",
            "description": "Indicates whether the requested sort of search results was successful or not. "
        },
        {
            "name": "Soundbank",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Soundbank.html",
            "description": "A Soundbank contains a set of Instruments that can be loaded into a Synthesizer . "
        },
        {
            "name": "SoundbankReader",
            "package": "javax.sound.midi.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/spi/SoundbankReader.html",
            "description": "A SoundbankReader supplies soundbank file-reading services. "
        },
        {
            "name": "SoundbankResource",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/SoundbankResource.html",
            "description": "A SoundbankResource represents any audio resource stored in a Soundbank . "
        },
        {
            "name": "Source",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/Source.html",
            "description": "An object that implements this interface contains the information needed to act as source input (XML source or transformation instructions). "
        },
        {
            "name": "SourceCodeAnalysis",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.html",
            "description": "Provides analysis utilities for source code input. "
        },
        {
            "name": "SourceCodeAnalysis.Completeness",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.Completeness.html",
            "description": "Describes the completeness of the given input. "
        },
        {
            "name": "SourceCodeAnalysis.CompletionInfo",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.CompletionInfo.html",
            "description": "The result of analyzeCompletion(String input) . "
        },
        {
            "name": "SourceCodeAnalysis.Documentation",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.Documentation.html",
            "description": "A documentation for a candidate for continuation of the given user's input. "
        },
        {
            "name": "SourceCodeAnalysis.QualifiedNames",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.QualifiedNames.html",
            "description": "List of possible qualified names. "
        },
        {
            "name": "SourceCodeAnalysis.SnippetWrapper",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.SnippetWrapper.html",
            "description": "The wrapping of a snippet of Java source into valid top-level Java source. "
        },
        {
            "name": "SourceCodeAnalysis.Suggestion",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.Suggestion.html",
            "description": "A candidate for continuation of the given user's input. "
        },
        {
            "name": "SourceDataLine",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/SourceDataLine.html",
            "description": "A source data line is a data line to which data may be written. "
        },
        {
            "name": "SourceLocator",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/SourceLocator.html",
            "description": "This interface is primarily for the purposes of reporting where an error occurred in the XML source or transformation instructions. "
        },
        {
            "name": "SourcePositions",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/SourcePositions.html",
            "description": "Provides methods to obtain the position of a Tree within a CompilationUnit. "
        },
        {
            "name": "SourceVersion",
            "package": "javax.lang.model",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/SourceVersion.html",
            "description": "Source versions of the Java programming language. "
        },
        {
            "name": "SpinnerDateModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpinnerDateModel.html",
            "description": "A SpinnerModel for sequences of Date s. "
        },
        {
            "name": "SpinnerListModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpinnerListModel.html",
            "description": "A simple implementation of SpinnerModel whose values are defined by an array or a List . "
        },
        {
            "name": "SpinnerModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpinnerModel.html",
            "description": "A model for a potentially unbounded sequence of object values. "
        },
        {
            "name": "SpinnerNumberModel",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html",
            "description": "A SpinnerModel for sequences of numbers. "
        },
        {
            "name": "SpinnerUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/SpinnerUI.html",
            "description": "Pluggable look and feel interface for JSpinner "
        },
        {
            "name": "SPIResolutionException",
            "package": "jdk.jshell.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/spi/SPIResolutionException.html",
            "description": "The construction and throw of this exception is embedded in code generated by the JShell core implementation in such a way that, upon executing a RECOVERABLE_DEFINED user method, this exception is thrown. "
        },
        {
            "name": "SplashScreen",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/SplashScreen.html",
            "description": "The splash screen can be displayed at application startup, before the Java Virtual Machine (JVM) starts. "
        },
        {
            "name": "Spliterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterator.html",
            "description": "An object for traversing and partitioning elements of a source. "
        },
        {
            "name": "Spliterator.OfDouble",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterator.OfDouble.html",
            "description": "A Spliterator specialized for double values. "
        },
        {
            "name": "Spliterator.OfInt",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterator.OfInt.html",
            "description": "A Spliterator specialized for int values. "
        },
        {
            "name": "Spliterator.OfLong",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterator.OfLong.html",
            "description": "A Spliterator specialized for long values. "
        },
        {
            "name": "Spliterator.OfPrimitive",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterator.OfPrimitive.html",
            "description": "A Spliterator specialized for primitive values. "
        },
        {
            "name": "Spliterators",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterators.html",
            "description": "Static classes and methods for operating on or creating instances of Spliterator and its primitive specializations Spliterator.OfInt , Spliterator.OfLong , and Spliterator.OfDouble . "
        },
        {
            "name": "Spliterators.AbstractDoubleSpliterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterators.AbstractDoubleSpliterator.html",
            "description": "An abstract Spliterator.OfDouble that implements trySplit to permit limited parallelism. "
        },
        {
            "name": "Spliterators.AbstractIntSpliterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterators.AbstractIntSpliterator.html",
            "description": "An abstract Spliterator.OfInt that implements trySplit to permit limited parallelism. "
        },
        {
            "name": "Spliterators.AbstractLongSpliterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterators.AbstractLongSpliterator.html",
            "description": "An abstract Spliterator.OfLong that implements trySplit to permit limited parallelism. "
        },
        {
            "name": "Spliterators.AbstractSpliterator",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Spliterators.AbstractSpliterator.html",
            "description": "An abstract Spliterator that implements trySplit to permit limited parallelism. "
        },
        {
            "name": "SplitPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/SplitPaneUI.html",
            "description": "Pluggable look and feel interface for JSplitPane. "
        },
        {
            "name": "SplittableRandom",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/SplittableRandom.html",
            "description": "A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks. "
        },
        {
            "name": "Spring",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Spring.html",
            "description": "An instance of the Spring class holds three properties that  characterize its behavior: the minimum , preferred , and maximum values. "
        },
        {
            "name": "SpringLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpringLayout.html",
            "description": "A SpringLayout lays out the children of its associated container according to a set of constraints. "
        },
        {
            "name": "SpringLayout.Constraints",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SpringLayout.Constraints.html",
            "description": "A Constraints object holds the constraints that govern the way a component's size and position change in a container controlled by a SpringLayout . "
        },
        {
            "name": "SQLClientInfoException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLClientInfoException.html",
            "description": "The subclass of SQLException is thrown when one or more client info properties could not be set on a Connection . "
        },
        {
            "name": "SQLData",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLData.html",
            "description": "The interface used for the custom mapping of an SQL user-defined type (UDT) to a class in the Java programming language. "
        },
        {
            "name": "SQLDataException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLDataException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 22 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLException.html",
            "description": "An exception that provides information on a database access error or other errors. "
        },
        {
            "name": "SQLFeatureNotSupportedException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 0A ' ( the value is 'zero' A). "
        },
        {
            "name": "SQLInput",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLInput.html",
            "description": "An input stream that contains a stream of values representing an instance of an SQL structured type or an SQL distinct type. "
        },
        {
            "name": "SQLInputImpl",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SQLInputImpl.html",
            "description": "An input stream used for custom mapping user-defined types (UDTs). "
        },
        {
            "name": "SQLIntegrityConstraintViolationException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLIntegrityConstraintViolationException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 23 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLInvalidAuthorizationSpecException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLInvalidAuthorizationSpecException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 28 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLNonTransientConnectionException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLNonTransientConnectionException.html",
            "description": "The subclass of SQLException thrown for the SQLState class value ' 08 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLNonTransientException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLNonTransientException.html",
            "description": "The subclass of SQLException thrown when an instance where a retry of the same operation would fail unless the cause of the SQLException is corrected. "
        },
        {
            "name": "SQLOutput",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLOutput.html",
            "description": "The output stream for writing the attributes of a user-defined type back to the database. "
        },
        {
            "name": "SQLOutputImpl",
            "package": "javax.sql.rowset.serial",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/serial/SQLOutputImpl.html",
            "description": "The output stream for writing the attributes of a custom-mapped user-defined type (UDT) back to the database. "
        },
        {
            "name": "SQLPermission",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLPermission.html",
            "description": "The permission for which the SecurityManager will check when code that is running an application with a SecurityManager enabled, calls the DriverManager.deregisterDriver method, DriverManager.setLogWriter method, DriverManager.setLogStream (deprecated) method, SyncFactory.setJNDIContext method, SyncFactory.setLogger method, Connection.setNetworkTimeout method, or the Connection.abort method. "
        },
        {
            "name": "SQLRecoverableException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLRecoverableException.html",
            "description": "The subclass of SQLException thrown in situations where a previously failed operation might be able to succeed if the application performs  some recovery steps and retries the entire transaction or in the case of a distributed transaction, the transaction branch. "
        },
        {
            "name": "SQLSyntaxErrorException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLSyntaxErrorException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 42 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLTimeoutException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLTimeoutException.html",
            "description": "The subclass of SQLException thrown when the timeout specified by Statement.setQueryTimeout , DriverManager.setLoginTimeout , DataSource.setLoginTimeout , XADataSource.setLoginTimeout has expired. "
        },
        {
            "name": "SQLTransactionRollbackException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLTransactionRollbackException.html",
            "description": "The subclass of SQLException thrown when the SQLState class value is ' 40 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLTransientConnectionException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLTransientConnectionException.html",
            "description": "The subclass of SQLException for the SQLState class value ' 08 ', or under vendor-specified conditions. "
        },
        {
            "name": "SQLTransientException",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLTransientException.html",
            "description": "The subclass of SQLException is thrown in situations where a previously failed operation might be able to succeed when the operation is retried without any intervention by application-level functionality. "
        },
        {
            "name": "SQLType",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLType.html",
            "description": "An object that is used to identify a generic SQL type, called a JDBC type or a vendor specific data type. "
        },
        {
            "name": "SQLWarning",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLWarning.html",
            "description": "An exception that provides information on  database access warnings. "
        },
        {
            "name": "SQLXML",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/SQLXML.html",
            "description": "The mapping in the JavaTM programming language for the SQL XML type. "
        },
        {
            "name": "SSLContext",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLContext.html",
            "description": "Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngine s. "
        },
        {
            "name": "SSLContextSpi",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLContextSpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the SSLContext class. "
        },
        {
            "name": "SSLEngine",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLEngine.html",
            "description": "A class which enables secure communications using protocols such as the Secure Sockets Layer (SSL) or IETF RFC 2246 \"Transport Layer Security\" (TLS) protocols, but is transport independent. "
        },
        {
            "name": "SSLEngineResult",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLEngineResult.html",
            "description": "An encapsulation of the result state produced by SSLEngine I/O calls. "
        },
        {
            "name": "SSLEngineResult.HandshakeStatus",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLEngineResult.HandshakeStatus.html",
            "description": "An SSLEngineResult enum describing the current handshaking state of this SSLEngine . "
        },
        {
            "name": "SSLEngineResult.Status",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLEngineResult.Status.html",
            "description": "An SSLEngineResult enum describing the overall result of the SSLEngine operation. "
        },
        {
            "name": "SSLException",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLException.html",
            "description": "Indicates some kind of error detected by an SSL subsystem. "
        },
        {
            "name": "SSLHandshakeException",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLHandshakeException.html",
            "description": "Indicates that the client and server could not negotiate the desired level of security. "
        },
        {
            "name": "SSLKeyException",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLKeyException.html",
            "description": "Reports a bad SSL key. "
        },
        {
            "name": "SSLParameters",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLParameters.html",
            "description": "Encapsulates parameters for an SSL/TLS/DTLS connection. "
        },
        {
            "name": "SSLPeerUnverifiedException",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLPeerUnverifiedException.html",
            "description": "Indicates that the peer's identity has not been verified. "
        },
        {
            "name": "SSLPermission",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLPermission.html",
            "description": "This class is for various network permissions. "
        },
        {
            "name": "SSLProtocolException",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLProtocolException.html",
            "description": "Reports an error in the operation of the SSL protocol. "
        },
        {
            "name": "SslRMIClientSocketFactory",
            "package": "javax.rmi.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/javax/rmi/ssl/SslRMIClientSocketFactory.html",
            "description": "An SslRMIClientSocketFactory instance is used by the RMI runtime in order to obtain client sockets for RMI calls via SSL. "
        },
        {
            "name": "SslRMIServerSocketFactory",
            "package": "javax.rmi.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/javax/rmi/ssl/SslRMIServerSocketFactory.html",
            "description": "An SslRMIServerSocketFactory instance is used by the RMI runtime in order to obtain server sockets for RMI calls via SSL. "
        },
        {
            "name": "SSLServerSocket",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLServerSocket.html",
            "description": "This class extends ServerSocket and provides secure server sockets using protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols. "
        },
        {
            "name": "SSLServerSocketFactory",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLServerSocketFactory.html",
            "description": "SSLServerSocketFactory s create SSLServerSocket s. "
        },
        {
            "name": "SSLSession",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSession.html",
            "description": "In SSL, sessions are used to describe an ongoing relationship between two entities. "
        },
        {
            "name": "SSLSessionBindingEvent",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSessionBindingEvent.html",
            "description": "This event is propagated to a SSLSessionBindingListener. "
        },
        {
            "name": "SSLSessionBindingListener",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSessionBindingListener.html",
            "description": "This interface is implemented by objects which want to know when they are being bound or unbound from a SSLSession. "
        },
        {
            "name": "SSLSessionContext",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSessionContext.html",
            "description": "A SSLSessionContext represents a set of SSLSession s associated with a single entity. "
        },
        {
            "name": "SSLSocket",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSocket.html",
            "description": "This class extends Socket and provides secure sockets using protocols such as the \"Secure Sockets Layer\" (SSL) or IETF \"Transport Layer Security\" (TLS) protocols. "
        },
        {
            "name": "SSLSocketFactory",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/SSLSocketFactory.html",
            "description": "SSLSocketFactory s create SSLSocket s. "
        },
        {
            "name": "Stack",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Stack.html",
            "description": "The Stack class represents a last-in-first-out (LIFO) stack of objects. "
        },
        {
            "name": "StackFrame",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/StackFrame.html",
            "description": "The state of one method invocation on a thread's call stack. "
        },
        {
            "name": "StackOverflowError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StackOverflowError.html",
            "description": "Thrown when a stack overflow occurs because an application recurses too deeply. "
        },
        {
            "name": "StackTrace",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/StackTrace.html",
            "description": "Event annotation, determines whether an event by default has a stack trace or not. "
        },
        {
            "name": "StackTraceElement",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StackTraceElement.html",
            "description": "An element in a stack trace, as returned by Throwable.getStackTrace() . "
        },
        {
            "name": "StackWalker",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StackWalker.html",
            "description": "A stack walker. "
        },
        {
            "name": "StackWalker.Option",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StackWalker.Option.html",
            "description": "Stack walker option to configure the stack frame information obtained by a StackWalker . "
        },
        {
            "name": "StackWalker.StackFrame",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StackWalker.StackFrame.html",
            "description": "A StackFrame object represents a method invocation returned by StackWalker . "
        },
        {
            "name": "StampedLock",
            "package": "java.util.concurrent.locks",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/locks/StampedLock.html",
            "description": "A capability-based lock with three modes for controlling read/write access. "
        },
        {
            "name": "StandardCharsets",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/StandardCharsets.html",
            "description": "Constant definitions for the standard charsets . "
        },
        {
            "name": "StandardConstants",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/StandardConstants.html",
            "description": "Standard constants definitions "
        },
        {
            "name": "StandardCopyOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/StandardCopyOption.html",
            "description": "Defines the standard copy options. "
        },
        {
            "name": "StandardDoclet",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/StandardDoclet.html",
            "description": "This doclet generates HTML-formatted documentation for the specified modules, packages and types. "
        },
        {
            "name": "StandardEmitterMBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/StandardEmitterMBean.html",
            "description": "An MBean whose management interface is determined by reflection on a Java interface, and that emits notifications. "
        },
        {
            "name": "StandardJavaFileManager",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html",
            "description": "File manager based on java.io.File and java.nio.file.Path . "
        },
        {
            "name": "StandardJavaFileManager.PathFactory",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/StandardJavaFileManager.PathFactory.html",
            "description": "Factory to create Path objects from strings. "
        },
        {
            "name": "StandardLocation",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/StandardLocation.html",
            "description": "Standard locations of file objects. "
        },
        {
            "name": "StandardMBean",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/StandardMBean.html",
            "description": "An MBean whose management interface is determined by reflection on a Java interface. "
        },
        {
            "name": "StandardNamespace",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/StandardNamespace.html",
            "description": "An enumeration of standard namespaces defined by Dynalink. "
        },
        {
            "name": "StandardOpenOption",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/StandardOpenOption.html",
            "description": "Defines the standard open options. "
        },
        {
            "name": "StandardOperation",
            "package": "jdk.dynalink",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/StandardOperation.html",
            "description": "Defines the standard dynamic operations. "
        },
        {
            "name": "StandardProtocolFamily",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/StandardProtocolFamily.html",
            "description": "Defines the standard families of communication protocols. "
        },
        {
            "name": "StandardSocketOptions",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/StandardSocketOptions.html",
            "description": "Defines the standard socket options. "
        },
        {
            "name": "StandardWatchEventKinds",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/StandardWatchEventKinds.html",
            "description": "Defines the standard event kinds. "
        },
        {
            "name": "StartDocument",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/StartDocument.html",
            "description": "An interface for the start document event "
        },
        {
            "name": "StartElement",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/StartElement.html",
            "description": "The StartElement interface provides access to information about start elements. "
        },
        {
            "name": "StartElementTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/StartElementTree.html",
            "description": "A tree node for the start of an HTML element. "
        },
        {
            "name": "StartTlsRequest",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/StartTlsRequest.html",
            "description": "This class implements the LDAPv3 Extended Request for StartTLS as defined in Lightweight Directory Access Protocol (v3): Extension for Transport Layer Security The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037 and no extended request value is defined. "
        },
        {
            "name": "StartTlsResponse",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/StartTlsResponse.html",
            "description": "This class implements the LDAPv3 Extended Response for StartTLS as defined in Lightweight Directory Access Protocol (v3): Extension for Transport Layer Security The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037 and no extended response value is defined. "
        },
        {
            "name": "State",
            "package": "javax.swing.plaf.nimbus",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/nimbus/State.html",
            "description": "Represents a built in, or custom, state in Nimbus. "
        },
        {
            "name": "StateEdit",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/StateEdit.html",
            "description": "StateEdit is a general edit for objects that change state. "
        },
        {
            "name": "StateEditable",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/StateEditable.html",
            "description": "StateEditable defines the interface for objects that can have their state undone/redone by a StateEdit. "
        },
        {
            "name": "StateFactory",
            "package": "javax.naming.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/spi/StateFactory.html",
            "description": "This interface represents a factory for obtaining the state of an object for binding. "
        },
        {
            "name": "Statement",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Statement.html",
            "description": "A Statement object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in \"a.setFoo(b)\" . "
        },
        {
            "name": "Statement",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Statement.html",
            "description": "The object used for executing a static SQL statement and returning the results it produces. "
        },
        {
            "name": "StatementEvent",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/StatementEvent.html",
            "description": "A StatementEvent is sent to all StatementEventListener s which were registered with a PooledConnection . "
        },
        {
            "name": "StatementEventListener",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/StatementEventListener.html",
            "description": "An object that registers to be notified of events that occur on PreparedStatements that are in the Statement pool. "
        },
        {
            "name": "StatementSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/StatementSnippet.html",
            "description": "Snippet for a statement. "
        },
        {
            "name": "StatementTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/StatementTree.html",
            "description": "A tree node used as the base class for the different kinds of statements. "
        },
        {
            "name": "StaticClass",
            "package": "jdk.dynalink.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/beans/StaticClass.html",
            "description": "Object that allows access to the static members of a class (its static methods, properties, and fields), as well as construction of instances using StandardOperation.NEW operation. "
        },
        {
            "name": "StAXResult",
            "package": "javax.xml.transform.stax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/stax/StAXResult.html",
            "description": "Acts as a holder for an XML Result in the form of a StAX writer,i.e. "
        },
        {
            "name": "StAXSource",
            "package": "javax.xml.transform.stax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/stax/StAXSource.html",
            "description": "Acts as a holder for an XML Source in the form of a StAX reader,i.e. "
        },
        {
            "name": "StepEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/StepEvent.html",
            "description": "Notification of step completion in the target VM. "
        },
        {
            "name": "StepRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/StepRequest.html",
            "description": "Request for notification when a step occurs in the target VM. "
        },
        {
            "name": "Stream",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/Stream.html",
            "description": "A sequence of elements supporting sequential and parallel aggregate operations. "
        },
        {
            "name": "Stream.Builder",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/Stream.Builder.html",
            "description": "A mutable builder for a Stream . "
        },
        {
            "name": "StreamCorruptedException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/StreamCorruptedException.html",
            "description": "Thrown when control information that was read from an object stream violates internal consistency checks. "
        },
        {
            "name": "StreamFilter",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/StreamFilter.html",
            "description": "This interface declares a simple filter interface that one can create to filter XMLStreamReaders "
        },
        {
            "name": "StreamHandler",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/StreamHandler.html",
            "description": "Stream based logging Handler . "
        },
        {
            "name": "StreamingExecutionControl",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/StreamingExecutionControl.html",
            "description": "An implementation of the ExecutionControl execution engine SPI which streams requests to a remote agent where execution takes place. "
        },
        {
            "name": "StreamPrintService",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/StreamPrintService.html",
            "description": "This class extends PrintService and represents a print service that prints data in different formats to a client-provided output stream. "
        },
        {
            "name": "StreamPrintServiceFactory",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/StreamPrintServiceFactory.html",
            "description": "A StreamPrintServiceFactory is the factory for StreamPrintService instances, which can print to an output stream in a particular document format described as a mime type. "
        },
        {
            "name": "StreamReaderDelegate",
            "package": "javax.xml.stream.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/util/StreamReaderDelegate.html",
            "description": "This is the base class for deriving an XMLStreamReader filter This class is designed to sit between an XMLStreamReader and an application's XMLStreamReader. "
        },
        {
            "name": "StreamResult",
            "package": "javax.xml.transform.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/stream/StreamResult.html",
            "description": "Acts as an holder for a transformation result, which may be XML, plain Text, HTML, or some other form of markup. "
        },
        {
            "name": "StreamSource",
            "package": "javax.xml.transform.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/stream/StreamSource.html",
            "description": "Acts as an holder for a transformation Source in the form of a stream of XML markup. "
        },
        {
            "name": "StreamSupport",
            "package": "java.util.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/stream/StreamSupport.html",
            "description": "Low-level utility methods for creating and manipulating streams. "
        },
        {
            "name": "StreamTokenizer",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/StreamTokenizer.html",
            "description": "The StreamTokenizer class takes an input stream and parses it into \"tokens\", allowing the tokens to be read one at a time. "
        },
        {
            "name": "StrictMath",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StrictMath.html",
            "description": "The class StrictMath contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. "
        },
        {
            "name": "String",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/String.html",
            "description": "The String class represents character strings. "
        },
        {
            "name": "StringBuffer",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StringBuffer.html",
            "description": "A thread-safe, mutable sequence of characters. "
        },
        {
            "name": "StringBufferInputStream",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/StringBufferInputStream.html",
            "description": "This class does not properly convert characters into bytes. "
        },
        {
            "name": "StringBuilder",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StringBuilder.html",
            "description": "A mutable sequence of characters. "
        },
        {
            "name": "StringCharacterIterator",
            "package": "java.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/text/StringCharacterIterator.html",
            "description": "StringCharacterIterator implements the CharacterIterator protocol for a String . "
        },
        {
            "name": "StringConcatException",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/StringConcatException.html",
            "description": "StringConcatException is thrown by StringConcatFactory when linkage invariants are violated. "
        },
        {
            "name": "StringConcatFactory",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/StringConcatFactory.html",
            "description": "Methods to facilitate the creation of String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments. "
        },
        {
            "name": "StringContent",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StringContent.html",
            "description": "An implementation of the AbstractDocument.Content interface that is a brute force implementation that is useful for relatively small documents and/or debugging. "
        },
        {
            "name": "StringIndexOutOfBoundsException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html",
            "description": "Thrown by String methods to indicate that an index is either negative or greater than the size of the string. "
        },
        {
            "name": "StringJoiner",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/StringJoiner.html",
            "description": "StringJoiner is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. "
        },
        {
            "name": "StringMonitor",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/StringMonitor.html",
            "description": "Defines a monitor MBean designed to observe the values of a string attribute. "
        },
        {
            "name": "StringMonitorMBean",
            "package": "javax.management.monitor",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/monitor/StringMonitorMBean.html",
            "description": "Exposes the remote management interface of the string monitor MBean. "
        },
        {
            "name": "StringReader",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/StringReader.html",
            "description": "A character stream whose source is a string. "
        },
        {
            "name": "StringRefAddr",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/StringRefAddr.html",
            "description": "This class represents the string form of the address of a communications end-point. "
        },
        {
            "name": "StringReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/StringReference.html",
            "description": "A string object from the target VM. "
        },
        {
            "name": "StringSelection",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/StringSelection.html",
            "description": "A Transferable which implements the capability required to transfer a String . "
        },
        {
            "name": "StringTokenizer",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/StringTokenizer.html",
            "description": "The string tokenizer class allows an application to break a string into tokens. "
        },
        {
            "name": "StringValueExp",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/StringValueExp.html",
            "description": "Represents strings that are arguments to relational constraints. "
        },
        {
            "name": "StringWriter",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/StringWriter.html",
            "description": "A character stream that collects its output in a string buffer, which can then be used to construct a string. "
        },
        {
            "name": "Stroke",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Stroke.html",
            "description": "The Stroke interface allows a Graphics2D object to obtain a Shape that is the decorated outline, or stylistic representation of the outline, of the specified Shape . "
        },
        {
            "name": "StrokeBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/StrokeBorder.html",
            "description": "A class which implements a border of an arbitrary stroke. "
        },
        {
            "name": "Struct",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Struct.html",
            "description": "The standard mapping in the Java programming language for an SQL structured type. "
        },
        {
            "name": "StubNotFoundException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/StubNotFoundException.html",
            "description": "A StubNotFoundException is thrown if a valid stub class could not be found for a remote object when it is exported. "
        },
        {
            "name": "Style",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Style.html",
            "description": "A collection of attributes to associate with an element in a document. "
        },
        {
            "name": "StyleConstants",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleConstants.html",
            "description": "A collection of well known or common attribute keys and methods to apply to an AttributeSet or MutableAttributeSet to get/set the properties in a typesafe manner. "
        },
        {
            "name": "StyleConstants.CharacterConstants",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleConstants.CharacterConstants.html",
            "description": "This is a typesafe enumeration of the well-known attributes that contribute to a character style. "
        },
        {
            "name": "StyleConstants.ColorConstants",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleConstants.ColorConstants.html",
            "description": "This is a typesafe enumeration of the well-known attributes that contribute to a color. "
        },
        {
            "name": "StyleConstants.FontConstants",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleConstants.FontConstants.html",
            "description": "This is a typesafe enumeration of the well-known attributes that contribute to a font. "
        },
        {
            "name": "StyleConstants.ParagraphConstants",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleConstants.ParagraphConstants.html",
            "description": "This is a typesafe enumeration of the well-known attributes that contribute to a paragraph style. "
        },
        {
            "name": "StyleContext",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyleContext.html",
            "description": "A pool of styles and their associated resources. "
        },
        {
            "name": "StyledDocument",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledDocument.html",
            "description": "Interface for a generic styled document. "
        },
        {
            "name": "StyledEditorKit",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html",
            "description": "This is the set of things needed by a text component to be a reasonably functioning editor for some type of text document. "
        },
        {
            "name": "StyledEditorKit.AlignmentAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.AlignmentAction.html",
            "description": "An action to set paragraph alignment. "
        },
        {
            "name": "StyledEditorKit.BoldAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.BoldAction.html",
            "description": "An action to toggle the bold attribute. "
        },
        {
            "name": "StyledEditorKit.FontFamilyAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.FontFamilyAction.html",
            "description": "An action to set the font family in the associated JEditorPane. "
        },
        {
            "name": "StyledEditorKit.FontSizeAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.FontSizeAction.html",
            "description": "An action to set the font size in the associated JEditorPane. "
        },
        {
            "name": "StyledEditorKit.ForegroundAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.ForegroundAction.html",
            "description": "An action to set foreground color. "
        },
        {
            "name": "StyledEditorKit.ItalicAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.ItalicAction.html",
            "description": "An action to toggle the italic attribute. "
        },
        {
            "name": "StyledEditorKit.StyledTextAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.StyledTextAction.html",
            "description": "An action that assumes it's being fired on a JEditorPane with a StyledEditorKit (or subclass) installed. "
        },
        {
            "name": "StyledEditorKit.UnderlineAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/StyledEditorKit.UnderlineAction.html",
            "description": "An action to toggle the underline attribute. "
        },
        {
            "name": "StyleSheet",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/StyleSheet.html",
            "description": "Support for defining the visual characteristics of HTML views being rendered. "
        },
        {
            "name": "StyleSheet",
            "package": "org.w3c.dom.stylesheets",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/stylesheets/StyleSheet.html",
            "description": "The StyleSheet interface is the abstract base interface for any type of style sheet. "
        },
        {
            "name": "StyleSheet.BoxPainter",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/StyleSheet.BoxPainter.html",
            "description": "Class to carry out some of the duties of CSS formatting. "
        },
        {
            "name": "StyleSheet.ListPainter",
            "package": "javax.swing.text.html",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/StyleSheet.ListPainter.html",
            "description": "Class to carry out some of the duties of CSS list formatting. "
        },
        {
            "name": "StyleSheetList",
            "package": "org.w3c.dom.stylesheets",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/stylesheets/StyleSheetList.html",
            "description": "The StyleSheetList interface provides the abstraction of an ordered collection of style sheets. "
        },
        {
            "name": "Subject",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/Subject.html",
            "description": "A Subject represents a grouping of related information for a single entity, such as a person. "
        },
        {
            "name": "SubjectDelegationPermission",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/SubjectDelegationPermission.html",
            "description": "Permission required by an authentication identity to perform operations on behalf of an authorization identity. "
        },
        {
            "name": "SubjectDomainCombiner",
            "package": "javax.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/SubjectDomainCombiner.html",
            "description": "A SubjectDomainCombiner updates ProtectionDomains with Principals from the Subject associated with this SubjectDomainCombiner . "
        },
        {
            "name": "SubmissionPublisher",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/SubmissionPublisher.html",
            "description": "A Flow.Publisher that asynchronously issues submitted (non-null) items to current subscribers until it is closed. "
        },
        {
            "name": "SummaryTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SummaryTree.html",
            "description": "A tree node for an @summary inline tag. "
        },
        {
            "name": "Supplier",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/Supplier.html",
            "description": "Represents a supplier of results. "
        },
        {
            "name": "SupportedAnnotationTypes",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/SupportedAnnotationTypes.html",
            "description": "An annotation used to indicate what annotation types an annotation processor supports. "
        },
        {
            "name": "SupportedOptions",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/SupportedOptions.html",
            "description": "An annotation used to indicate what options an annotation processor supports. "
        },
        {
            "name": "SupportedSourceVersion",
            "package": "javax.annotation.processing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/annotation/processing/SupportedSourceVersion.html",
            "description": "An annotation used to indicate the latest source version an annotation processor supports. "
        },
        {
            "name": "SupportedValuesAttribute",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/SupportedValuesAttribute.html",
            "description": "Interface SupportedValuesAttribute is a tagging interface which a printing attribute class implements to indicate the attribute describes the supported values for another attribute. "
        },
        {
            "name": "SuppressWarnings",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/SuppressWarnings.html",
            "description": "Indicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element). "
        },
        {
            "name": "SwingConstants",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SwingConstants.html",
            "description": "A collection of constants generally used for positioning and orienting components on the screen. "
        },
        {
            "name": "SwingContainer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SwingContainer.html",
            "description": "An annotation used to specify some swing-related information for the automatically generated BeanInfo classes. "
        },
        {
            "name": "SwingEventMonitor",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/SwingEventMonitor.html",
            "description": "SwingEventMonitor extends AWTEventMonitor by adding a suite of listeners conditionally installed on every Swing component instance in the Java Virtual Machine. "
        },
        {
            "name": "SwingPropertyChangeSupport",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/SwingPropertyChangeSupport.html",
            "description": "This subclass of java.beans.PropertyChangeSupport is almost identical in functionality. "
        },
        {
            "name": "SwingUtilities",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SwingUtilities.html",
            "description": "A collection of utility methods for Swing. "
        },
        {
            "name": "SwingWorker",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SwingWorker.html",
            "description": "An abstract class to perform lengthy GUI-interaction tasks in a background thread. "
        },
        {
            "name": "SwingWorker.StateValue",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/SwingWorker.StateValue.html",
            "description": "Values for the state bound property. "
        },
        {
            "name": "SwitchExpressionTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/SwitchExpressionTree.html",
            "description": "A tree node for a switch expression. "
        },
        {
            "name": "SwitchPoint",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/SwitchPoint.html",
            "description": "A SwitchPoint is an object which can publish state transitions to other threads. "
        },
        {
            "name": "SwitchTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/SwitchTree.html",
            "description": "A tree node for a switch statement. "
        },
        {
            "name": "SyncFactory",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html",
            "description": "The Service Provider Interface (SPI) mechanism that generates SyncProvider instances to be used by disconnected RowSet objects. "
        },
        {
            "name": "SyncFactoryException",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactoryException.html",
            "description": "Indicates an error with SyncFactory mechanism. "
        },
        {
            "name": "SyncFailedException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/SyncFailedException.html",
            "description": "Signals that a sync operation has failed. "
        },
        {
            "name": "SynchronizedTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/SynchronizedTree.html",
            "description": "A tree node for a synchronized statement. "
        },
        {
            "name": "SynchronousQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/SynchronousQueue.html",
            "description": "A blocking queue in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. "
        },
        {
            "name": "SyncProvider",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProvider.html",
            "description": "The synchronization mechanism that provides reader/writer capabilities for disconnected RowSet objects. "
        },
        {
            "name": "SyncProviderException",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProviderException.html",
            "description": "Indicates an error with the SyncProvider mechanism. "
        },
        {
            "name": "SyncResolver",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html",
            "description": "Defines a framework that allows applications to use a manual decision tree to decide what should be done when a synchronization conflict occurs. "
        },
        {
            "name": "SynthButtonUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthButtonUI.html",
            "description": "Provides the Synth L&F UI delegate for JButton . "
        },
        {
            "name": "SynthCheckBoxMenuItemUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthCheckBoxMenuItemUI.html",
            "description": "Provides the Synth L&F UI delegate for JCheckBoxMenuItem . "
        },
        {
            "name": "SynthCheckBoxUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthCheckBoxUI.html",
            "description": "Provides the Synth L&F UI delegate for JCheckBox . "
        },
        {
            "name": "SynthColorChooserUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthColorChooserUI.html",
            "description": "Provides the Synth L&F UI delegate for JColorChooser . "
        },
        {
            "name": "SynthComboBoxUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthComboBoxUI.html",
            "description": "Provides the Synth L&F UI delegate for JComboBox . "
        },
        {
            "name": "SynthConstants",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthConstants.html",
            "description": "Constants used by Synth. "
        },
        {
            "name": "SynthContext",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthContext.html",
            "description": "An immutable transient object containing contextual information about a Region . "
        },
        {
            "name": "SynthDesktopIconUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthDesktopIconUI.html",
            "description": "Provides the Synth L&F UI delegate for a minimized internal frame on a desktop. "
        },
        {
            "name": "SynthDesktopPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthDesktopPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JDesktopPane . "
        },
        {
            "name": "SynthEditorPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthEditorPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JEditorPane . "
        },
        {
            "name": "Synthesizer",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Synthesizer.html",
            "description": "A Synthesizer generates sound. "
        },
        {
            "name": "SynthFormattedTextFieldUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthFormattedTextFieldUI.html",
            "description": "Provides the Synth L&F UI delegate for JFormattedTextField . "
        },
        {
            "name": "SynthGraphicsUtils",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthGraphicsUtils.html",
            "description": "Wrapper for primitive graphics calls. "
        },
        {
            "name": "SynthIcon",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthIcon.html",
            "description": "An icon that is passed a SynthContext . "
        },
        {
            "name": "SynthInternalFrameUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthInternalFrameUI.html",
            "description": "Provides the Synth L&F UI delegate for JInternalFrame . "
        },
        {
            "name": "SynthLabelUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthLabelUI.html",
            "description": "Provides the Synth L&F UI delegate for JLabel . "
        },
        {
            "name": "SynthListUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthListUI.html",
            "description": "Provides the Synth L&F UI delegate for JList . "
        },
        {
            "name": "SynthLookAndFeel",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html",
            "description": "SynthLookAndFeel provides the basis for creating a customized look and feel. "
        },
        {
            "name": "SynthMenuBarUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthMenuBarUI.html",
            "description": "Provides the Synth L&F UI delegate for JMenuBar . "
        },
        {
            "name": "SynthMenuItemUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthMenuItemUI.html",
            "description": "Provides the Synth L&F UI delegate for JMenuItem . "
        },
        {
            "name": "SynthMenuUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthMenuUI.html",
            "description": "Provides the Synth L&F UI delegate for JMenu . "
        },
        {
            "name": "SynthOptionPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthOptionPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JOptionPane . "
        },
        {
            "name": "SynthPainter",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthPainter.html",
            "description": "SynthPainter is used for painting portions of JComponent s. "
        },
        {
            "name": "SynthPanelUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthPanelUI.html",
            "description": "Provides the Synth L&F UI delegate for JPanel . "
        },
        {
            "name": "SynthPasswordFieldUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthPasswordFieldUI.html",
            "description": "Provides the Synth L&F UI delegate for JPasswordField . "
        },
        {
            "name": "SynthPopupMenuUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthPopupMenuUI.html",
            "description": "Provides the Synth L&F UI delegate for JPopupMenu . "
        },
        {
            "name": "SynthProgressBarUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthProgressBarUI.html",
            "description": "Provides the Synth L&F UI delegate for JProgressBar . "
        },
        {
            "name": "SynthRadioButtonMenuItemUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthRadioButtonMenuItemUI.html",
            "description": "Provides the Synth L&F UI delegate for JRadioButtonMenuItem . "
        },
        {
            "name": "SynthRadioButtonUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthRadioButtonUI.html",
            "description": "Provides the Synth L&F UI delegate for JRadioButton . "
        },
        {
            "name": "SynthRootPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthRootPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JRootPane . "
        },
        {
            "name": "SynthScrollBarUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthScrollBarUI.html",
            "description": "Provides the Synth L&F UI delegate for JScrollBar . "
        },
        {
            "name": "SynthScrollPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthScrollPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JScrollPane . "
        },
        {
            "name": "SynthSeparatorUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthSeparatorUI.html",
            "description": "Provides the Synth L&F UI delegate for JSeparator . "
        },
        {
            "name": "SynthSliderUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthSliderUI.html",
            "description": "Provides the Synth L&F UI delegate for JSlider . "
        },
        {
            "name": "SynthSpinnerUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthSpinnerUI.html",
            "description": "Provides the Synth L&F UI delegate for JSpinner . "
        },
        {
            "name": "SynthSplitPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthSplitPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JSplitPane . "
        },
        {
            "name": "SynthStyle",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthStyle.html",
            "description": "SynthStyle is a set of style properties. "
        },
        {
            "name": "SynthStyleFactory",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthStyleFactory.html",
            "description": "Factory used for obtaining SynthStyle s. "
        },
        {
            "name": "SynthTabbedPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTabbedPaneUI.html",
            "description": "Provides the Synth L&F UI delegate for JTabbedPane . "
        },
        {
            "name": "SynthTableHeaderUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTableHeaderUI.html",
            "description": "Provides the Synth L&F UI delegate for JTableHeader . "
        },
        {
            "name": "SynthTableUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTableUI.html",
            "description": "Provides the Synth L&F UI delegate for JTable . "
        },
        {
            "name": "SynthTextAreaUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTextAreaUI.html",
            "description": "Provides the look and feel for a plain text editor in the Synth look and feel. "
        },
        {
            "name": "SynthTextFieldUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTextFieldUI.html",
            "description": "Provides the Synth L&F UI delegate for JTextField . "
        },
        {
            "name": "SynthTextPaneUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTextPaneUI.html",
            "description": "Provides the look and feel for a styled text editor in the Synth look and feel. "
        },
        {
            "name": "SynthToggleButtonUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthToggleButtonUI.html",
            "description": "Provides the Synth L&F UI delegate for JToggleButton . "
        },
        {
            "name": "SynthToolBarUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthToolBarUI.html",
            "description": "Provides the Synth L&F UI delegate for JToolBar . "
        },
        {
            "name": "SynthToolTipUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthToolTipUI.html",
            "description": "Provides the Synth L&F UI delegate for JToolTip . "
        },
        {
            "name": "SynthTreeUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthTreeUI.html",
            "description": "Provides the Synth L&F UI delegate for JTree . "
        },
        {
            "name": "SynthUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthUI.html",
            "description": "SynthUI is used to fetch the SynthContext for a particular Component. "
        },
        {
            "name": "SynthViewportUI",
            "package": "javax.swing.plaf.synth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/synth/SynthViewportUI.html",
            "description": "Provides the Synth L&F UI delegate for JViewport . "
        },
        {
            "name": "SysexMessage",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/SysexMessage.html",
            "description": "A SysexMessage object represents a MIDI system exclusive message. "
        },
        {
            "name": "System",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/System.html",
            "description": "The System class contains several useful class fields and methods. "
        },
        {
            "name": "System.Logger",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/System.Logger.html",
            "description": "System.Logger instances log messages that will be routed to the underlying logging framework the LoggerFinder uses. "
        },
        {
            "name": "System.Logger.Level",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/System.Logger.Level.html",
            "description": "System loggers levels. "
        },
        {
            "name": "System.LoggerFinder",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/System.LoggerFinder.html",
            "description": "The LoggerFinder service is responsible for creating, managing, and configuring loggers to the underlying framework it uses. "
        },
        {
            "name": "SystemColor",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/SystemColor.html",
            "description": "A class to encapsulate symbolic colors representing the color of native GUI objects on a system. "
        },
        {
            "name": "SystemEventListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/SystemEventListener.html",
            "description": "Common interface for all event listener sub-types. "
        },
        {
            "name": "SystemFlavorMap",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html",
            "description": "The SystemFlavorMap is a configurable map between \"natives\" (Strings), which correspond to platform-specific data formats, and \"flavors\" (DataFlavors), which correspond to platform-independent MIME types. "
        },
        {
            "name": "SystemPropertyTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/SystemPropertyTree.html",
            "description": "A tree node for an @systemProperty inline tag. "
        },
        {
            "name": "SystemSleepEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/SystemSleepEvent.html",
            "description": "Event sent when the system enters and exits power save sleep. "
        },
        {
            "name": "SystemSleepListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/SystemSleepListener.html",
            "description": "Implementors receive notification as the system is entering sleep, and after the system wakes. "
        },
        {
            "name": "SystemTray",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/SystemTray.html",
            "description": "The SystemTray class represents the system tray for a desktop. "
        },
        {
            "name": "TabableView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TabableView.html",
            "description": "Interface for View s that have size dependent upon tabs. "
        },
        {
            "name": "TabbedPaneUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/TabbedPaneUI.html",
            "description": "Pluggable look and feel interface for JTabbedPane. "
        },
        {
            "name": "TabExpander",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TabExpander.html",
            "description": "Simple interface to allow for different types of implementations of tab expansion. "
        },
        {
            "name": "TableCellEditor",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableCellEditor.html",
            "description": "This interface defines the method any object that would like to be an editor of values for components such as JListBox , JComboBox , JTree , or JTable needs to implement. "
        },
        {
            "name": "TableCellRenderer",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableCellRenderer.html",
            "description": "This interface defines the method required by any object that would like to be a renderer for cells in a JTable . "
        },
        {
            "name": "TableColumn",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableColumn.html",
            "description": "A TableColumn represents all the attributes of a column in a JTable , such as width, resizability, minimum and maximum width. "
        },
        {
            "name": "TableColumnModel",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableColumnModel.html",
            "description": "Defines the requirements for a table column model object suitable for use with JTable . "
        },
        {
            "name": "TableColumnModelEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TableColumnModelEvent.html",
            "description": "TableColumnModelEvent is used to notify listeners that a table column model has changed, such as a column was added, removed, or moved. "
        },
        {
            "name": "TableColumnModelListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html",
            "description": "TableColumnModelListener defines the interface for an object that listens to changes in a TableColumnModel. "
        },
        {
            "name": "TableHeaderUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/TableHeaderUI.html",
            "description": "Pluggable look and feel interface for JTableHeader. "
        },
        {
            "name": "TableModel",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableModel.html",
            "description": "The TableModel interface specifies the methods the JTable will use to interrogate a tabular data model. "
        },
        {
            "name": "TableModelEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TableModelEvent.html",
            "description": "TableModelEvent is used to notify listeners that a table model has changed. "
        },
        {
            "name": "TableModelListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TableModelListener.html",
            "description": "TableModelListener defines the interface for an object that listens to changes in a TableModel. "
        },
        {
            "name": "TableRowSorter",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableRowSorter.html",
            "description": "An implementation of RowSorter that provides sorting and filtering using a TableModel . "
        },
        {
            "name": "TableStringConverter",
            "package": "javax.swing.table",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/table/TableStringConverter.html",
            "description": "TableStringConverter is used to convert objects from the model into strings. "
        },
        {
            "name": "TableUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/TableUI.html",
            "description": "Pluggable look and feel interface for JTable. "
        },
        {
            "name": "TableView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TableView.html",
            "description": "Implements View interface for a table, that is composed of an element structure where the child elements of the element this view is responsible for represent rows and the child elements of the row elements are cells. "
        },
        {
            "name": "TabSet",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TabSet.html",
            "description": "A TabSet is comprised of many TabStops. "
        },
        {
            "name": "TabStop",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TabStop.html",
            "description": "This class encapsulates a single tab stop (basically as tab stops are thought of by RTF). "
        },
        {
            "name": "TabularData",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/TabularData.html",
            "description": "The TabularData interface specifies the behavior of a specific type of complex open data objects which represent tabular data structures. "
        },
        {
            "name": "TabularDataSupport",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/TabularDataSupport.html",
            "description": "The TabularDataSupport class is the open data class which implements the TabularData and the Map interfaces, and which is internally based on a hash map data structure. "
        },
        {
            "name": "TabularType",
            "package": "javax.management.openmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/openmbean/TabularType.html",
            "description": "The TabularType class is the open type class whose instances describe the types of TabularData values. "
        },
        {
            "name": "TagElement",
            "package": "javax.swing.text.html.parser",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/html/parser/TagElement.html",
            "description": "A generic HTML TagElement class. "
        },
        {
            "name": "Taglet",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Taglet.html",
            "description": "The interface for a custom taglet supported by doclets such as the standard doclet . "
        },
        {
            "name": "Taglet.Location",
            "package": "jdk.javadoc.doclet",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.javadoc/jdk/javadoc/doclet/Taglet.Location.html",
            "description": "The kind of location in which a tag may be used. "
        },
        {
            "name": "Target",
            "package": "java.lang.annotation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/annotation/Target.html",
            "description": "Indicates the contexts in which an annotation type is applicable. "
        },
        {
            "name": "TargetDataLine",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/TargetDataLine.html",
            "description": "A target data line is a type of DataLine from which audio data can be read. "
        },
        {
            "name": "TargetedNotification",
            "package": "javax.management.remote",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/remote/TargetedNotification.html",
            "description": "A (Notification, Listener ID) pair. "
        },
        {
            "name": "Taskbar",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Taskbar.html",
            "description": "The Taskbar class allows a Java application to interact with the system task area (taskbar, Dock, etc.). "
        },
        {
            "name": "Taskbar.Feature",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Taskbar.Feature.html",
            "description": "List of provided features. "
        },
        {
            "name": "Taskbar.State",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Taskbar.State.html",
            "description": "Kinds of available window progress states. "
        },
        {
            "name": "TaskEvent",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TaskEvent.html",
            "description": "Provides details about work that has been done by the JDK Java Compiler, javac. "
        },
        {
            "name": "TaskEvent.Kind",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TaskEvent.Kind.html",
            "description": "Kind of task event. "
        },
        {
            "name": "TaskListener",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TaskListener.html",
            "description": "Provides a listener to monitor the activity of the JDK Java Compiler, javac. "
        },
        {
            "name": "Templates",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/Templates.html",
            "description": "An object that implements this interface is the runtime representation of processed transformation instructions. "
        },
        {
            "name": "TemplatesHandler",
            "package": "javax.xml.transform.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/sax/TemplatesHandler.html",
            "description": "A SAX ContentHandler that may be used to process SAX parse events (parsing transformation instructions) into a Templates object. "
        },
        {
            "name": "Temporal",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/Temporal.html",
            "description": "Framework-level interface defining read-write access to a temporal object, such as a date, time, offset or some combination of these. "
        },
        {
            "name": "TemporalAccessor",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalAccessor.html",
            "description": "Framework-level interface defining read-only access to a temporal object, such as a date, time, offset or some combination of these. "
        },
        {
            "name": "TemporalAdjuster",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalAdjuster.html",
            "description": "Strategy for adjusting a temporal object. "
        },
        {
            "name": "TemporalAdjusters",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalAdjusters.html",
            "description": "Common and useful TemporalAdjusters. "
        },
        {
            "name": "TemporalAmount",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalAmount.html",
            "description": "Framework-level interface defining an amount of time, such as \"6 hours\", \"8 days\" or \"2 years and 3 months\". "
        },
        {
            "name": "TemporalField",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalField.html",
            "description": "A field of date-time, such as month-of-year or hour-of-minute. "
        },
        {
            "name": "TemporalQueries",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalQueries.html",
            "description": "Common implementations of TemporalQuery . "
        },
        {
            "name": "TemporalQuery",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalQuery.html",
            "description": "Strategy for querying a temporal object. "
        },
        {
            "name": "TemporalUnit",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/TemporalUnit.html",
            "description": "A unit of date-time, such as Days or Hours. "
        },
        {
            "name": "TerminalFactory",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/TerminalFactory.html",
            "description": "A factory for CardTerminal objects. "
        },
        {
            "name": "TerminalFactorySpi",
            "package": "javax.smartcardio",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.smartcardio/javax/smartcardio/TerminalFactorySpi.html",
            "description": "The TerminalFactorySpi class defines the service provider interface. "
        },
        {
            "name": "Text",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/Text.html",
            "description": "The Text interface inherits from CharacterData and represents the textual content (termed character data in XML) of an Element or Attr . "
        },
        {
            "name": "TextAction",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/TextAction.html",
            "description": "An Action implementation useful for key bindings that are shared across a number of different text components. "
        },
        {
            "name": "TextArea",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TextArea.html",
            "description": "A TextArea object is a multi-line region that displays text. "
        },
        {
            "name": "TextAttribute",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TextAttribute.html",
            "description": "The TextAttribute class defines attribute keys and attribute values used for text rendering. "
        },
        {
            "name": "TextCallbackHandler",
            "package": "com.sun.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/callback/TextCallbackHandler.html",
            "description": "Prompts and reads from the command line for answers to authentication questions. "
        },
        {
            "name": "TextComponent",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TextComponent.html",
            "description": "The TextComponent class is the superclass of any component that allows the editing of some text. "
        },
        {
            "name": "TextEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/TextEvent.html",
            "description": "A semantic event which indicates that an object's text changed. "
        },
        {
            "name": "TextField",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TextField.html",
            "description": "A TextField object is a text component that allows for the editing of a single line of text. "
        },
        {
            "name": "TextHitInfo",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TextHitInfo.html",
            "description": "The TextHitInfo class represents a character position in a text model, and a bias , or \"side,\" of the character. "
        },
        {
            "name": "TextInputCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/TextInputCallback.html",
            "description": "Underlying security services instantiate and pass a TextInputCallback to the handle method of a CallbackHandler to retrieve generic text information. "
        },
        {
            "name": "TextLayout",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TextLayout.html",
            "description": "TextLayout is an immutable graphical representation of styled character data. "
        },
        {
            "name": "TextLayout.CaretPolicy",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TextLayout.CaretPolicy.html",
            "description": "Defines a policy for determining the strong caret location. "
        },
        {
            "name": "TextListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/TextListener.html",
            "description": "The listener interface for receiving text events. "
        },
        {
            "name": "TextMeasurer",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TextMeasurer.html",
            "description": "The TextMeasurer class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a TextLayout for a range of characters. "
        },
        {
            "name": "TextOutputCallback",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/TextOutputCallback.html",
            "description": "Underlying security services instantiate and pass a TextOutputCallback to the handle method of a CallbackHandler to display information messages, warning messages and error messages. "
        },
        {
            "name": "TextStyle",
            "package": "java.time.format",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/format/TextStyle.html",
            "description": "Enumeration of the style of text formatting and parsing. "
        },
        {
            "name": "TextSyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/TextSyntax.html",
            "description": "Class TextSyntax is an abstract base class providing the common implementation of all attributes whose value is a string. "
        },
        {
            "name": "TextTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/TextTree.html",
            "description": "A tree node for plain text. "
        },
        {
            "name": "TextUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/TextUI.html",
            "description": "Text editor user interface "
        },
        {
            "name": "TexturePaint",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TexturePaint.html",
            "description": "The TexturePaint class provides a way to fill a Shape with a texture that is specified as a BufferedImage . "
        },
        {
            "name": "ThaiBuddhistChronology",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ThaiBuddhistChronology.html",
            "description": "The Thai Buddhist calendar system. "
        },
        {
            "name": "ThaiBuddhistDate",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ThaiBuddhistDate.html",
            "description": "A date in the Thai Buddhist calendar system. "
        },
        {
            "name": "ThaiBuddhistEra",
            "package": "java.time.chrono",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/chrono/ThaiBuddhistEra.html",
            "description": "An era in the Thai Buddhist calendar system. "
        },
        {
            "name": "Thread",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Thread.html",
            "description": "A thread is a thread of execution in a program. "
        },
        {
            "name": "Thread.State",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Thread.State.html",
            "description": "A thread state. "
        },
        {
            "name": "Thread.UncaughtExceptionHandler",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Thread.UncaughtExceptionHandler.html",
            "description": "Interface for handlers invoked when a Thread abruptly terminates due to an uncaught exception. "
        },
        {
            "name": "ThreadDeath",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ThreadDeath.html",
            "description": "An instance of ThreadDeath is thrown in the victim thread when the (deprecated) Thread.stop() method is invoked. "
        },
        {
            "name": "ThreadDeathEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ThreadDeathEvent.html",
            "description": "Notification of a completed thread in the target VM. "
        },
        {
            "name": "ThreadDeathRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ThreadDeathRequest.html",
            "description": "Request for notification when a thread terminates in the target VM. "
        },
        {
            "name": "ThreadFactory",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadFactory.html",
            "description": "An object that creates new threads on demand. "
        },
        {
            "name": "ThreadGroup",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ThreadGroup.html",
            "description": "A thread group represents a set of threads. "
        },
        {
            "name": "ThreadGroupReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ThreadGroupReference.html",
            "description": "A thread group object from the target VM. "
        },
        {
            "name": "ThreadInfo",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/ThreadInfo.html",
            "description": "Thread information. "
        },
        {
            "name": "ThreadLocal",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ThreadLocal.html",
            "description": "This class provides thread-local variables. "
        },
        {
            "name": "ThreadLocalRandom",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html",
            "description": "A random number generator isolated to the current thread. "
        },
        {
            "name": "ThreadMXBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/ThreadMXBean.html",
            "description": "Platform-specific management interface for the thread system of the Java virtual machine. "
        },
        {
            "name": "ThreadMXBean",
            "package": "java.lang.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/java/lang/management/ThreadMXBean.html",
            "description": "The management interface for the thread system of the Java virtual machine. "
        },
        {
            "name": "ThreadPoolExecutor",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html",
            "description": "An ExecutorService that executes each submitted task using one of possibly several pooled threads, normally configured using Executors factory methods. "
        },
        {
            "name": "ThreadPoolExecutor.AbortPolicy",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html",
            "description": "A handler for rejected tasks that throws a RejectedExecutionException . "
        },
        {
            "name": "ThreadPoolExecutor.CallerRunsPolicy",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html",
            "description": "A handler for rejected tasks that runs the rejected task directly in the calling thread of the execute method, unless the executor has been shut down, in which case the task is discarded. "
        },
        {
            "name": "ThreadPoolExecutor.DiscardOldestPolicy",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html",
            "description": "A handler for rejected tasks that discards the oldest unhandled request and then retries execute , unless the executor is shut down, in which case the task is discarded. "
        },
        {
            "name": "ThreadPoolExecutor.DiscardPolicy",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html",
            "description": "A handler for rejected tasks that silently discards the rejected task. "
        },
        {
            "name": "ThreadReference",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/ThreadReference.html",
            "description": "A thread object from the target VM. "
        },
        {
            "name": "ThreadStartEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/ThreadStartEvent.html",
            "description": "Notification of a new running thread in the target VM. "
        },
        {
            "name": "ThreadStartRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/ThreadStartRequest.html",
            "description": "Request for notification when a thread starts execution in the target VM. "
        },
        {
            "name": "Threshold",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Threshold.html",
            "description": "Event annotation, specifies the default duration below which an event is not recorded (for example, \"20 ms\" ). "
        },
        {
            "name": "Throwable",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Throwable.html",
            "description": "The Throwable class is the superclass of all errors and exceptions in the Java language. "
        },
        {
            "name": "ThrowsTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ThrowsTree.html",
            "description": "A tree node for an @exception or @throws block tag. "
        },
        {
            "name": "ThrowTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/ThrowTree.html",
            "description": "A tree node for a throw statement. "
        },
        {
            "name": "TIFFDirectory",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/TIFFDirectory.html",
            "description": "A convenience class for simplifying interaction with TIFF native image metadata. "
        },
        {
            "name": "TIFFField",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/TIFFField.html",
            "description": "A class representing a field in a TIFF 6.0 Image File Directory. "
        },
        {
            "name": "TIFFImageReadParam",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/TIFFImageReadParam.html",
            "description": "A subclass of ImageReadParam allowing control over the TIFF reading process. "
        },
        {
            "name": "TIFFTag",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/TIFFTag.html",
            "description": "A class defining the notion of a TIFF tag. "
        },
        {
            "name": "TIFFTagSet",
            "package": "javax.imageio.plugins.tiff",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/imageio/plugins/tiff/TIFFTagSet.html",
            "description": "A class representing a set of TIFF tags. "
        },
        {
            "name": "TileObserver",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/TileObserver.html",
            "description": "An interface for objects that wish to be informed when tiles of a WritableRenderedImage become modifiable by some writer via a call to getWritableTile, and when they become unmodifiable via the last call to releaseWritableTile. "
        },
        {
            "name": "Time",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Time.html",
            "description": "A thin wrapper around the java.util.Date class that allows the JDBC API to identify this as an SQL TIME value. "
        },
        {
            "name": "TimeLimitExceededException",
            "package": "javax.naming",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/TimeLimitExceededException.html",
            "description": "This exception is thrown when a method does not terminate within the specified time limit. "
        },
        {
            "name": "TimeoutException",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/TimeoutException.html",
            "description": "Exception thrown when a blocking operation times out. "
        },
        {
            "name": "Timer",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Timer.html",
            "description": "A facility for threads to schedule tasks for future execution in a background thread. "
        },
        {
            "name": "Timer",
            "package": "javax.management.timer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/timer/Timer.html",
            "description": "Provides the implementation of the timer MBean. "
        },
        {
            "name": "Timer",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/Timer.html",
            "description": "Fires one or more ActionEvent s at specified intervals. "
        },
        {
            "name": "TimerMBean",
            "package": "javax.management.timer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/timer/TimerMBean.html",
            "description": "Exposes the management interface of the timer MBean. "
        },
        {
            "name": "TimerNotification",
            "package": "javax.management.timer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/timer/TimerNotification.html",
            "description": "This class provides definitions of the notifications sent by timer MBeans. "
        },
        {
            "name": "TimerTask",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/TimerTask.html",
            "description": "A task that can be scheduled for one-time or repeated execution by a Timer . "
        },
        {
            "name": "Timespan",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Timespan.html",
            "description": "Event field annotation, specifies that the value is a duration. "
        },
        {
            "name": "Timestamp",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/Timestamp.html",
            "description": "This class encapsulates information about a signed timestamp. "
        },
        {
            "name": "Timestamp",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Timestamp.html",
            "description": "A thin wrapper around java.util.Date that allows the JDBC API to identify this as an SQL TIMESTAMP value. "
        },
        {
            "name": "Timestamp",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Timestamp.html",
            "description": "Event field annotation, specifies that the value is a point in time. "
        },
        {
            "name": "TimeUnit",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/TimeUnit.html",
            "description": "A TimeUnit represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. "
        },
        {
            "name": "TimeZone",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/TimeZone.html",
            "description": "TimeZone represents a time zone offset, and also figures out daylight savings. "
        },
        {
            "name": "TimeZoneNameProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/TimeZoneNameProvider.html",
            "description": "An abstract class for service providers that provide localized time zone names for the TimeZone class. "
        },
        {
            "name": "TitledBorder",
            "package": "javax.swing.border",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/border/TitledBorder.html",
            "description": "A class which implements an arbitrary border with the addition of a String title in a specified position and justification. "
        },
        {
            "name": "ToDoubleBiFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToDoubleBiFunction.html",
            "description": "Represents a function that accepts two arguments and produces a double-valued result. "
        },
        {
            "name": "ToDoubleFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToDoubleFunction.html",
            "description": "Represents a function that produces a double-valued result. "
        },
        {
            "name": "ToIntBiFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToIntBiFunction.html",
            "description": "Represents a function that accepts two arguments and produces an int-valued result. "
        },
        {
            "name": "ToIntFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToIntFunction.html",
            "description": "Represents a function that produces an int-valued result. "
        },
        {
            "name": "ToLongBiFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToLongBiFunction.html",
            "description": "Represents a function that accepts two arguments and produces a long-valued result. "
        },
        {
            "name": "ToLongFunction",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/ToLongFunction.html",
            "description": "Represents a function that produces a long-valued result. "
        },
        {
            "name": "Tool",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/Tool.html",
            "description": "Common interface for tools that can be invoked from a program. "
        },
        {
            "name": "ToolBarUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ToolBarUI.html",
            "description": "Pluggable look and feel interface for JToolBar. "
        },
        {
            "name": "Toolkit",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Toolkit.html",
            "description": "This class is the abstract superclass of all actual implementations of the Abstract Window Toolkit. "
        },
        {
            "name": "ToolProvider",
            "package": "java.util.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/spi/ToolProvider.html",
            "description": "An interface for command-line tools to provide a way to be invoked without necessarily starting a new VM. "
        },
        {
            "name": "ToolProvider",
            "package": "javax.tools",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/tools/ToolProvider.html",
            "description": "Provides methods for locating tool providers, for example, providers of compilers. "
        },
        {
            "name": "ToolTipManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ToolTipManager.html",
            "description": "Manages all the ToolTips in the system. "
        },
        {
            "name": "ToolTipUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ToolTipUI.html",
            "description": "Pluggable look and feel interface for JToolTip. "
        },
        {
            "name": "TooManyListenersException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/TooManyListenersException.html",
            "description": "The TooManyListenersException Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source. "
        },
        {
            "name": "TopLevelWindowListener",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/TopLevelWindowListener.html",
            "description": "The TopLevelWindowListener interface is used by the EventQueueMonitor class to notify an interested party when a top level window is created or destroyed in the Java Virtual Machine. "
        },
        {
            "name": "Track",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Track.html",
            "description": "A MIDI track is an independent stream of MIDI events (time-stamped MIDI data) that can be stored along with other tracks in a standard MIDI file. "
        },
        {
            "name": "TransactionalWriter",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/TransactionalWriter.html",
            "description": "A specialized interface that facilitates an extension of the standard SyncProvider abstract class so that it has finer grained transaction control. "
        },
        {
            "name": "Transferable",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/Transferable.html",
            "description": "Defines the interface for classes that can be used to provide data for a transfer operation. "
        },
        {
            "name": "TransferHandler",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/TransferHandler.html",
            "description": "This class is used to handle the transfer of a Transferable to and from Swing components. "
        },
        {
            "name": "TransferHandler.DropLocation",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/TransferHandler.DropLocation.html",
            "description": "Represents a location where dropped data should be inserted. "
        },
        {
            "name": "TransferHandler.TransferSupport",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html",
            "description": "This class encapsulates all relevant details of a clipboard or drag and drop transfer, and also allows for customizing aspects of the drag and drop experience. "
        },
        {
            "name": "TransferQueue",
            "package": "java.util.concurrent",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/concurrent/TransferQueue.html",
            "description": "A BlockingQueue in which producers may wait for consumers to receive elements. "
        },
        {
            "name": "Transform",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/Transform.html",
            "description": "A representation of the XML Transform element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "TransformAttribute",
            "package": "java.awt.font",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/font/TransformAttribute.html",
            "description": "The TransformAttribute class provides an immutable wrapper for a transform so that it is safe to use as an attribute. "
        },
        {
            "name": "Transformer",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/Transformer.html",
            "description": "An instance of this abstract class can transform a source tree into a result tree. "
        },
        {
            "name": "TransformerConfigurationException",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html",
            "description": "Indicates a serious configuration error. "
        },
        {
            "name": "TransformerException",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/TransformerException.html",
            "description": "This class specifies an exceptional condition that occurred during the transformation process. "
        },
        {
            "name": "TransformerFactory",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/TransformerFactory.html",
            "description": "A TransformerFactory instance can be used to create Transformer and Templates objects. "
        },
        {
            "name": "TransformerFactoryConfigurationError",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/TransformerFactoryConfigurationError.html",
            "description": "Thrown when a problem with configuration with the Transformer Factories exists. "
        },
        {
            "name": "TransformerHandler",
            "package": "javax.xml.transform.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/sax/TransformerHandler.html",
            "description": "A TransformerHandler listens for SAX ContentHandler parse events and transforms them to a Result. "
        },
        {
            "name": "TransformException",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/TransformException.html",
            "description": "Indicates an exceptional condition that occurred while executing a transform algorithm. "
        },
        {
            "name": "TransformParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/TransformParameterSpec.html",
            "description": "A specification of algorithm parameters for a Transform algorithm. "
        },
        {
            "name": "TransformService",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/TransformService.html",
            "description": "A Service Provider Interface for transform and canonicalization algorithms. "
        },
        {
            "name": "Transient",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Transient.html",
            "description": "Indicates that an attribute called \"transient\" should be declared with the given value when the Introspector constructs a PropertyDescriptor or EventSetDescriptor classes associated with the annotated code element. "
        },
        {
            "name": "TransitionFrom",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/TransitionFrom.html",
            "description": "Event field annotation, specifies that the event transitioned from a thread. "
        },
        {
            "name": "TransitionTo",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/TransitionTo.html",
            "description": "Event field annotation, specifies that the event will soon transition to a thread. "
        },
        {
            "name": "Translator",
            "package": "com.sun.java.accessibility.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.accessibility/com/sun/java/accessibility/util/Translator.html",
            "description": "The Translator class provides a translation to interface Accessible for objects that do not implement interface Accessible . "
        },
        {
            "name": "Transmitter",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/Transmitter.html",
            "description": "A Transmitter sends MidiEvent objects to one or more Receivers . "
        },
        {
            "name": "Transparency",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Transparency.html",
            "description": "The Transparency interface defines the common transparency modes for implementing classes. "
        },
        {
            "name": "Transport",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/Transport.html",
            "description": "A method of communication between a debugger and a target VM. "
        },
        {
            "name": "TransportService",
            "package": "com.sun.jdi.connect.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/spi/TransportService.html",
            "description": "A transport service for connections between a debugger and a target VM. "
        },
        {
            "name": "TransportService.Capabilities",
            "package": "com.sun.jdi.connect.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/spi/TransportService.Capabilities.html",
            "description": "The transport service capabilities. "
        },
        {
            "name": "TransportService.ListenKey",
            "package": "com.sun.jdi.connect.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/spi/TransportService.ListenKey.html",
            "description": "A listen key . "
        },
        {
            "name": "TransportTimeoutException",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/TransportTimeoutException.html",
            "description": "This exception may be thrown as a result of a timeout when attaching to a target VM, or waiting to accept a connection from a target VM. "
        },
        {
            "name": "TrayIcon",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TrayIcon.html",
            "description": "A TrayIcon object represents a tray icon that can be added to the system tray . "
        },
        {
            "name": "TrayIcon.MessageType",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/TrayIcon.MessageType.html",
            "description": "The message type determines which icon will be displayed in the caption of the message, and a possible system sound a message may generate upon showing. "
        },
        {
            "name": "Tree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/Tree.html",
            "description": "Common interface for all nodes in an abstract syntax tree. "
        },
        {
            "name": "Tree.Kind",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/Tree.Kind.html",
            "description": "Enumerates all kinds of trees. "
        },
        {
            "name": "TreeCellEditor",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreeCellEditor.html",
            "description": "Adds to CellEditor the extensions necessary to configure an editor in a tree. "
        },
        {
            "name": "TreeCellRenderer",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreeCellRenderer.html",
            "description": "Defines the requirements for an object that displays a tree node. "
        },
        {
            "name": "TreeExpansionEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeExpansionEvent.html",
            "description": "An event used to identify a single path in a tree. "
        },
        {
            "name": "TreeExpansionListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeExpansionListener.html",
            "description": "The listener that's notified when a tree expands or collapses a node. "
        },
        {
            "name": "TreeMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/TreeMap.html",
            "description": "A Red-Black tree based NavigableMap implementation. "
        },
        {
            "name": "TreeModel",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreeModel.html",
            "description": "The model used by JTree . "
        },
        {
            "name": "TreeModelEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeModelEvent.html",
            "description": "Encapsulates information describing changes to a tree model, and used to notify tree model listeners of the change. "
        },
        {
            "name": "TreeModelListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeModelListener.html",
            "description": "Defines the interface for an object that listens to changes in a TreeModel. "
        },
        {
            "name": "TreeNode",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreeNode.html",
            "description": "Defines the requirements for an object that can be used as a tree node in a JTree. "
        },
        {
            "name": "TreePath",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TreePath.html",
            "description": "A path of tree nodes, typically used to represent the sequence of ancestor nodes of a tree node up to the top level CompilationUnitTree node. "
        },
        {
            "name": "TreePath",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreePath.html",
            "description": "TreePath represents an array of objects that uniquely identify the path to a node in a tree. "
        },
        {
            "name": "TreePathScanner",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TreePathScanner.html",
            "description": "A TreeVisitor that visits all the child tree nodes, and provides support for maintaining a path for the parent nodes. "
        },
        {
            "name": "Trees",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/Trees.html",
            "description": "Bridges JSR 199, JSR 269, and the Tree API. "
        },
        {
            "name": "TreeScanner",
            "package": "com.sun.source.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/util/TreeScanner.html",
            "description": "A TreeVisitor that visits all the child tree nodes. "
        },
        {
            "name": "TreeSelectionEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeSelectionEvent.html",
            "description": "An event that characterizes a change in the current selection. "
        },
        {
            "name": "TreeSelectionListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeSelectionListener.html",
            "description": "The listener that's notified when the selection in a TreeSelectionModel changes. "
        },
        {
            "name": "TreeSelectionModel",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/TreeSelectionModel.html",
            "description": "This interface represents the current state of the selection for the tree component. "
        },
        {
            "name": "TreeSet",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/TreeSet.html",
            "description": "A NavigableSet implementation based on a TreeMap . "
        },
        {
            "name": "TreeUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/TreeUI.html",
            "description": "Pluggable look and feel interface for JTree. "
        },
        {
            "name": "TreeVisitor",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/TreeVisitor.html",
            "description": "A visitor of trees, in the style of the visitor design pattern. "
        },
        {
            "name": "TreeWalker",
            "package": "org.w3c.dom.traversal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/traversal/TreeWalker.html",
            "description": "TreeWalker objects are used to navigate a document tree or subtree using the view of the document defined by their whatToShow flags and filter (if any). "
        },
        {
            "name": "TreeWillExpandListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/TreeWillExpandListener.html",
            "description": "The listener that's notified when a tree expands or collapses a node. "
        },
        {
            "name": "TrustAnchor",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/TrustAnchor.html",
            "description": "A trust anchor or most-trusted Certification Authority (CA). "
        },
        {
            "name": "TrustManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/TrustManager.html",
            "description": "This is the base interface for JSSE trust managers. "
        },
        {
            "name": "TrustManagerFactory",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/TrustManagerFactory.html",
            "description": "This class acts as a factory for trust managers based on a source of trust material. "
        },
        {
            "name": "TrustManagerFactorySpi",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/TrustManagerFactorySpi.html",
            "description": "This class defines the Service Provider Interface ( SPI ) for the TrustManagerFactory class. "
        },
        {
            "name": "TryTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/TryTree.html",
            "description": "A tree node for a try statement. "
        },
        {
            "name": "Type",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Type.html",
            "description": "The mirror for a type in the target VM. "
        },
        {
            "name": "Type",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/Type.html",
            "description": "Type is the common superinterface for all types in the Java programming language. "
        },
        {
            "name": "TypeBasedGuardingDynamicLinker",
            "package": "jdk.dynalink.linker",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/TypeBasedGuardingDynamicLinker.html",
            "description": "A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first argument at linking invocation time. "
        },
        {
            "name": "TypeCastTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/TypeCastTree.html",
            "description": "A tree node for a type cast expression. "
        },
        {
            "name": "TypeComponent",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/TypeComponent.html",
            "description": "An entity declared within a user defined type (class or interface). "
        },
        {
            "name": "TypeDeclSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/TypeDeclSnippet.html",
            "description": "Snippet for a type definition (a class, interface, enum, or annotation interface definition). "
        },
        {
            "name": "TypeDescriptor",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/TypeDescriptor.html",
            "description": "An entity that has a type descriptor. "
        },
        {
            "name": "TypeDescriptor.OfField",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html",
            "description": "An entity that has a field type descriptor. "
        },
        {
            "name": "TypeDescriptor.OfMethod",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html",
            "description": "An entity that has a method type descriptor Method descriptors conforming to JVMS 4.3.3 can be described nominally via MethodType::describeConstable ; otherwise they cannot be described nominally. "
        },
        {
            "name": "TypeElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/TypeElement.html",
            "description": "Represents a class or interface program element. "
        },
        {
            "name": "TypeInfo",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/TypeInfo.html",
            "description": "The TypeInfo interface represents a type referenced from Element or Attr nodes, specified in the schemas associated with the document. "
        },
        {
            "name": "TypeInfoProvider",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/TypeInfoProvider.html",
            "description": "This class provides access to the type information determined by ValidatorHandler . "
        },
        {
            "name": "TypeKind",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/TypeKind.html",
            "description": "The kind of a type mirror. "
        },
        {
            "name": "TypeKindVisitor14",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor14.html",
            "description": "A visitor of types based on their kind with default behavior appropriate for source version RELEASE_14 . "
        },
        {
            "name": "TypeKindVisitor6",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor6.html",
            "description": "A visitor of types based on their kind with default behavior appropriate for the RELEASE_6 source version. "
        },
        {
            "name": "TypeKindVisitor7",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor7.html",
            "description": "A visitor of types based on their kind with default behavior appropriate for the RELEASE_7 source version. "
        },
        {
            "name": "TypeKindVisitor8",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor8.html",
            "description": "A visitor of types based on their kind with default behavior appropriate for the RELEASE_8 source version. "
        },
        {
            "name": "TypeKindVisitor9",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor9.html",
            "description": "A visitor of types based on their kind with default behavior appropriate for source versions RELEASE_9 through RELEASE_14 . "
        },
        {
            "name": "TypeMirror",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/TypeMirror.html",
            "description": "Represents a type in the Java programming language. "
        },
        {
            "name": "TypeNotPresentException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/TypeNotPresentException.html",
            "description": "Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found. "
        },
        {
            "name": "TypeParameterElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/TypeParameterElement.html",
            "description": "Represents a formal type parameter of a generic class, interface, method, or constructor element. "
        },
        {
            "name": "TypeParameterTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/TypeParameterTree.html",
            "description": "A tree node for a type parameter. "
        },
        {
            "name": "Types",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Types.html",
            "description": "The class that defines the constants that are used to identify generic SQL types, called JDBC types. "
        },
        {
            "name": "Types",
            "package": "javax.lang.model.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/util/Types.html",
            "description": "Utility methods for operating on types. "
        },
        {
            "name": "TypeUtilities",
            "package": "jdk.dynalink.linker.support",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.dynalink/jdk/dynalink/linker/support/TypeUtilities.html",
            "description": "Various static utility methods for working with Java types. "
        },
        {
            "name": "TypeVariable",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/TypeVariable.html",
            "description": "TypeVariable is the common superinterface for type variables of kinds. "
        },
        {
            "name": "TypeVariable",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/TypeVariable.html",
            "description": "Represents a type variable. "
        },
        {
            "name": "TypeVisitor",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/TypeVisitor.html",
            "description": "A visitor of types, in the style of the visitor design pattern. "
        },
        {
            "name": "UIClientPropertyKey",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIClientPropertyKey.html",
            "description": "This interface is used only for tagging keys for client properties for JComponent set by UI which needs to be cleared on L&F change and serialization. "
        },
        {
            "name": "UID",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/UID.html",
            "description": "A UID represents an identifier that is unique over time with respect to the host it is generated on, or one of 2 16 \"well-known\" identifiers. "
        },
        {
            "name": "UIDefaults",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIDefaults.html",
            "description": "A table of defaults for Swing components. "
        },
        {
            "name": "UIDefaults.ActiveValue",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIDefaults.ActiveValue.html",
            "description": "This class enables one to store an entry in the defaults table that's constructed each time it's looked up with one of the getXXX(key) methods. "
        },
        {
            "name": "UIDefaults.LazyInputMap",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIDefaults.LazyInputMap.html",
            "description": "LazyInputMap will create a InputMap in its createValue method. "
        },
        {
            "name": "UIDefaults.LazyValue",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIDefaults.LazyValue.html",
            "description": "This class enables one to store an entry in the defaults table that isn't constructed until the first time it's looked up with one of the getXXX(key) methods. "
        },
        {
            "name": "UIDefaults.ProxyLazyValue",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIDefaults.ProxyLazyValue.html",
            "description": "This class provides an implementation of LazyValue which can be used to delay loading of the Class for the instance to be created. "
        },
        {
            "name": "UIEvent",
            "package": "org.w3c.dom.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/events/UIEvent.html",
            "description": "The UIEvent interface provides specific contextual information associated with User Interface events. "
        },
        {
            "name": "UIManager",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIManager.html",
            "description": "UIManager manages the current look and feel, the set of available look and feels, PropertyChangeListeners that are notified when the look and feel changes, look and feel defaults, and convenience methods for obtaining various default values. "
        },
        {
            "name": "UIManager.LookAndFeelInfo",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UIManager.LookAndFeelInfo.html",
            "description": "Provides a little information about an installed LookAndFeel for the sake of configuring a menu or for initial application set up. "
        },
        {
            "name": "UIResource",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/UIResource.html",
            "description": "This interface is used to mark objects created by ComponentUI delegates. "
        },
        {
            "name": "UnaryOperator",
            "package": "java.util.function",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/function/UnaryOperator.html",
            "description": "Represents an operation on a single operand that produces a result of the same type as its operand. "
        },
        {
            "name": "UnaryTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/UnaryTree.html",
            "description": "A tree node for postfix and unary expressions. "
        },
        {
            "name": "UncheckedIOException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/UncheckedIOException.html",
            "description": "Wraps an IOException with an unchecked exception. "
        },
        {
            "name": "UndeclaredThrowableException",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/UndeclaredThrowableException.html",
            "description": "Thrown by a method invocation on a proxy instance if its invocation handler's invoke method throws a checked exception (a Throwable that is not assignable to RuntimeException or Error ) that is not assignable to any of the exception types declared in the throws clause of the method that was invoked on the proxy instance and dispatched to the invocation handler. "
        },
        {
            "name": "UndoableEdit",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/UndoableEdit.html",
            "description": "An UndoableEdit represents an edit. "
        },
        {
            "name": "UndoableEditEvent",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/UndoableEditEvent.html",
            "description": "An event indicating that an operation which can be undone has occurred. "
        },
        {
            "name": "UndoableEditListener",
            "package": "javax.swing.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/event/UndoableEditListener.html",
            "description": "Interface implemented by a class interested in hearing about undoable operations. "
        },
        {
            "name": "UndoableEditSupport",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/UndoableEditSupport.html",
            "description": "A support class used for managing UndoableEdit listeners. "
        },
        {
            "name": "UndoManager",
            "package": "javax.swing.undo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/undo/UndoManager.html",
            "description": "UndoManager manages a list of UndoableEdits , providing a way to undo or redo the appropriate edits. "
        },
        {
            "name": "UnexpectedException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/UnexpectedException.html",
            "description": "An UnexpectedException is thrown if the client of a remote method call receives, as a result of the call, a checked exception that is not among the checked exception types declared in the throws clause of the method in the remote interface. "
        },
        {
            "name": "UnicastRemoteObject",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/UnicastRemoteObject.html",
            "description": "Used for exporting a remote object with JRMP and obtaining a stub that communicates to the remote object. "
        },
        {
            "name": "UnionType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/UnionType.html",
            "description": "Represents a union type. "
        },
        {
            "name": "UnionTypeTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/UnionTypeTree.html",
            "description": "A tree node for a union type expression in a multicatch variable declaration. "
        },
        {
            "name": "UnixLoginModule",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/UnixLoginModule.html",
            "description": "This LoginModule imports a user's Unix Principal information ( UnixPrincipal , UnixNumericUserPrincipal , and UnixNumericGroupPrincipal ) and associates them with the current Subject . "
        },
        {
            "name": "UnixNumericGroupPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/UnixNumericGroupPrincipal.html",
            "description": "This class implements the Principal interface and represents a user's Unix group identification number (GID). "
        },
        {
            "name": "UnixNumericUserPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/UnixNumericUserPrincipal.html",
            "description": "This class implements the Principal interface and represents a user's Unix identification number (UID). "
        },
        {
            "name": "UnixOperatingSystemMXBean",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/UnixOperatingSystemMXBean.html",
            "description": "Platform-specific management interface for the Unix operating system on which the Java virtual machine is running. "
        },
        {
            "name": "UnixPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/UnixPrincipal.html",
            "description": "This class implements the Principal interface and represents a Unix user. "
        },
        {
            "name": "UnixSystem",
            "package": "com.sun.security.auth.module",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/module/UnixSystem.html",
            "description": "This class implementation retrieves and makes available Unix UID/GID/groups information for the current user. "
        },
        {
            "name": "UnknownAnnotationValueException",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/UnknownAnnotationValueException.html",
            "description": "Indicates that an unknown kind of annotation value was encountered. "
        },
        {
            "name": "UnknownBlockTagTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/UnknownBlockTagTree.html",
            "description": "A tree node for an unrecognized inline tag. "
        },
        {
            "name": "UnknownDirectiveException",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/UnknownDirectiveException.html",
            "description": "Indicates that an unknown kind of module directive was encountered. "
        },
        {
            "name": "UnknownElementException",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/UnknownElementException.html",
            "description": "Indicates that an unknown kind of element was encountered. "
        },
        {
            "name": "UnknownEntityException",
            "package": "javax.lang.model",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/UnknownEntityException.html",
            "description": "Superclass of exceptions which indicate that an unknown kind of entity was encountered. "
        },
        {
            "name": "UnknownError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/UnknownError.html",
            "description": "Thrown when an unknown but serious exception has occurred in the Java Virtual Machine. "
        },
        {
            "name": "UnknownFormatConversionException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/UnknownFormatConversionException.html",
            "description": "Unchecked exception thrown when an unknown conversion is given. "
        },
        {
            "name": "UnknownFormatFlagsException",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/UnknownFormatFlagsException.html",
            "description": "Unchecked exception thrown when an unknown flag is given. "
        },
        {
            "name": "UnknownGroupException",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/UnknownGroupException.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "UnknownHostException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/UnknownHostException.html",
            "description": "Thrown to indicate that the IP address of a host could not be determined. "
        },
        {
            "name": "UnknownHostException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/UnknownHostException.html",
            "description": "An UnknownHostException is thrown if a java.net.UnknownHostException occurs while creating a connection to the remote host for a remote method call. "
        },
        {
            "name": "UnknownInlineTagTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/UnknownInlineTagTree.html",
            "description": "A tree node for an unrecognized inline tag. "
        },
        {
            "name": "UnknownObjectException",
            "package": "java.rmi.activation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/activation/UnknownObjectException.html",
            "description": "See the java.rmi.activation package specification for further information. "
        },
        {
            "name": "UnknownServiceException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/UnknownServiceException.html",
            "description": "Thrown to indicate that an unknown service exception has occurred. "
        },
        {
            "name": "UnknownTypeException",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/UnknownTypeException.html",
            "description": "Indicates that an unknown kind of type was encountered. "
        },
        {
            "name": "UnmappableCharacterException",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/UnmappableCharacterException.html",
            "description": "Checked exception thrown when an input character (or byte) sequence is valid but cannot be mapped to an output byte (or character) sequence. "
        },
        {
            "name": "UnmarshalException",
            "package": "java.rmi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/UnmarshalException.html",
            "description": "An UnmarshalException can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur:   if an exception occurs while unmarshalling the call header  if the protocol for the return value is invalid  if a java.io.IOException occurs unmarshalling parameters (on the server side) or the return value (on the client side). "
        },
        {
            "name": "UnmodifiableClassException",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/UnmodifiableClassException.html",
            "description": "Thrown by an implementation of Instrumentation.redefineClasses when one of the specified classes cannot be modified. "
        },
        {
            "name": "UnmodifiableModuleException",
            "package": "java.lang.instrument",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.instrument/java/lang/instrument/UnmodifiableModuleException.html",
            "description": "Thrown to indicate that a module cannot be modified. "
        },
        {
            "name": "UnmodifiableSetException",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/UnmodifiableSetException.html",
            "description": "Thrown to indicate that the requested operation cannot be performed because the set is unmodifiable. "
        },
        {
            "name": "UnrecoverableEntryException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/UnrecoverableEntryException.html",
            "description": "This exception is thrown if an entry in the keystore cannot be recovered. "
        },
        {
            "name": "UnrecoverableKeyException",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/UnrecoverableKeyException.html",
            "description": "This exception is thrown if a key in the keystore cannot be recovered. "
        },
        {
            "name": "Unreferenced",
            "package": "java.rmi.server",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/server/Unreferenced.html",
            "description": "A remote object implementation should implement the Unreferenced interface to receive notification when there are no more clients that reference that remote object. "
        },
        {
            "name": "UnresolvedAddressException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/UnresolvedAddressException.html",
            "description": "Unchecked exception thrown when an attempt is made to invoke a network operation upon an unresolved socket address. "
        },
        {
            "name": "UnresolvedPermission",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/UnresolvedPermission.html",
            "description": "The UnresolvedPermission class is used to hold Permissions that were \"unresolved\" when the Policy was initialized. "
        },
        {
            "name": "UnresolvedReferenceException",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/UnresolvedReferenceException.html",
            "description": "Exception reported on attempting to execute a RECOVERABLE_DEFINED snippet. "
        },
        {
            "name": "UnsatisfiedLinkError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/UnsatisfiedLinkError.html",
            "description": "Thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared native . "
        },
        {
            "name": "Unsigned",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/Unsigned.html",
            "description": "Event field annotation, specifies that the value is of an unsigned data type. "
        },
        {
            "name": "UnsolicitedNotification",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/UnsolicitedNotification.html",
            "description": "This interface represents an unsolicited notification as defined in RFC 2251 . "
        },
        {
            "name": "UnsolicitedNotificationEvent",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/UnsolicitedNotificationEvent.html",
            "description": "This class represents an event fired in response to an unsolicited notification sent by the LDAP server. "
        },
        {
            "name": "UnsolicitedNotificationListener",
            "package": "javax.naming.ldap",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.naming/javax/naming/ldap/UnsolicitedNotificationListener.html",
            "description": "This interface is for handling UnsolicitedNotificationEvent . "
        },
        {
            "name": "UnsupportedAddressTypeException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/UnsupportedAddressTypeException.html",
            "description": "Unchecked exception thrown when an attempt is made to bind or connect to a socket address of a type that is not supported. "
        },
        {
            "name": "UnsupportedAudioFileException",
            "package": "javax.sound.sampled",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/sampled/UnsupportedAudioFileException.html",
            "description": "An UnsupportedAudioFileException is an exception indicating that an operation failed because a file did not contain valid data of a recognized file type and format. "
        },
        {
            "name": "UnsupportedCallbackException",
            "package": "javax.security.auth.callback",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/callback/UnsupportedCallbackException.html",
            "description": "Signals that a CallbackHandler does not recognize a particular Callback . "
        },
        {
            "name": "UnsupportedCharsetException",
            "package": "java.nio.charset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html",
            "description": "Unchecked exception thrown when no support is available for a requested charset. "
        },
        {
            "name": "UnsupportedClassVersionError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/UnsupportedClassVersionError.html",
            "description": "Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported. "
        },
        {
            "name": "UnsupportedEncodingException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/UnsupportedEncodingException.html",
            "description": "The Character Encoding is not supported. "
        },
        {
            "name": "UnsupportedFlavorException",
            "package": "java.awt.datatransfer",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.datatransfer/java/awt/datatransfer/UnsupportedFlavorException.html",
            "description": "Signals that the requested data is not supported in this flavor. "
        },
        {
            "name": "UnsupportedLookAndFeelException",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/UnsupportedLookAndFeelException.html",
            "description": "An exception that indicates the requested look & feel management classes are not present on the user's system. "
        },
        {
            "name": "UnsupportedOperationException",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/UnsupportedOperationException.html",
            "description": "Thrown to indicate that the requested operation is not supported. "
        },
        {
            "name": "UnsupportedTemporalTypeException",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html",
            "description": "UnsupportedTemporalTypeException indicates that a ChronoField or ChronoUnit is not supported for a Temporal class. "
        },
        {
            "name": "URI",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URI.html",
            "description": "Represents a Uniform Resource Identifier (URI) reference. "
        },
        {
            "name": "URICertStoreParameters",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/URICertStoreParameters.html",
            "description": "Parameters used as input for CertStore algorithms which use information contained in a URI to retrieve certificates and CRLs. "
        },
        {
            "name": "URIDereferencer",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/URIDereferencer.html",
            "description": "A dereferencer of URIReference s. "
        },
        {
            "name": "URIException",
            "package": "javax.print",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/URIException.html",
            "description": "Interface URIException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a URI address. "
        },
        {
            "name": "URIParameter",
            "package": "java.security",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/URIParameter.html",
            "description": "A parameter that contains a URI pointing to data intended for a PolicySpi or ConfigurationSpi implementation. "
        },
        {
            "name": "URIReference",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/URIReference.html",
            "description": "Identifies a data object via a URI-Reference, as specified by RFC 2396 . "
        },
        {
            "name": "URIReferenceException",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/URIReferenceException.html",
            "description": "Indicates an exceptional condition thrown while dereferencing a URIReference . "
        },
        {
            "name": "URIResolver",
            "package": "javax.xml.transform",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/transform/URIResolver.html",
            "description": "An object that implements this interface that can be called by the processor to turn a URI used in document(), xsl:import, or xsl:include into a Source object. "
        },
        {
            "name": "URISyntax",
            "package": "javax.print.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/print/attribute/URISyntax.html",
            "description": "Class URISyntax is an abstract base class providing the common implementation of all attributes whose value is a Uniform Resource Identifier (URI). "
        },
        {
            "name": "URISyntaxException",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URISyntaxException.html",
            "description": "Checked exception thrown to indicate that a string could not be parsed as a URI reference. "
        },
        {
            "name": "URL",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URL.html",
            "description": "Class URL represents a Uniform Resource Locator, a pointer to a \"resource\" on the World Wide Web. "
        },
        {
            "name": "URLClassLoader",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLClassLoader.html",
            "description": "This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories. "
        },
        {
            "name": "URLConnection",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLConnection.html",
            "description": "The abstract class URLConnection is the superclass of all classes that represent a communications link between the application and a URL. "
        },
        {
            "name": "URLDecoder",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLDecoder.html",
            "description": "Utility class for HTML form decoding. "
        },
        {
            "name": "URLEncoder",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLEncoder.html",
            "description": "Utility class for HTML form encoding. "
        },
        {
            "name": "URLPermission",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLPermission.html",
            "description": "Represents permission to access a resource or set of resources defined by a given url, and for a given set of user-settable request methods and request headers. "
        },
        {
            "name": "URLStreamHandler",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLStreamHandler.html",
            "description": "The abstract class URLStreamHandler is the common superclass for all stream protocol handlers. "
        },
        {
            "name": "URLStreamHandlerFactory",
            "package": "java.net",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/URLStreamHandlerFactory.html",
            "description": "This interface defines a factory for URL stream protocol handlers. "
        },
        {
            "name": "URLStreamHandlerProvider",
            "package": "java.net.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/net/spi/URLStreamHandlerProvider.html",
            "description": "URL stream handler service-provider class. "
        },
        {
            "name": "UserDataHandler",
            "package": "org.w3c.dom",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/w3c/dom/UserDataHandler.html",
            "description": "When associating an object to a key on a node using Node.setUserData() the application can provide a handler that gets called when the node the object is associated to is being cloned, imported, or renamed. "
        },
        {
            "name": "UserDefinedFileAttributeView",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/UserDefinedFileAttributeView.html",
            "description": "A file attribute view that provides a view of a file's user-defined attributes, sometimes known as extended attributes . "
        },
        {
            "name": "UserPrincipal",
            "package": "com.sun.security.auth",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.security.auth/com/sun/security/auth/UserPrincipal.html",
            "description": "A user principal identified by a username or account name. "
        },
        {
            "name": "UserPrincipal",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/UserPrincipal.html",
            "description": "A Principal representing an identity used to determine access rights to objects in a file system. "
        },
        {
            "name": "UserPrincipalLookupService",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/UserPrincipalLookupService.html",
            "description": "An object to lookup user and group principals by name. "
        },
        {
            "name": "UserPrincipalNotFoundException",
            "package": "java.nio.file.attribute",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/attribute/UserPrincipalNotFoundException.html",
            "description": "Checked exception thrown when a lookup of UserPrincipal fails because the principal does not exist. "
        },
        {
            "name": "UserSessionEvent",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/UserSessionEvent.html",
            "description": "Event sent when the user session has been changed. "
        },
        {
            "name": "UserSessionEvent.Reason",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/UserSessionEvent.Reason.html",
            "description": "Kinds of available reasons of user session change. "
        },
        {
            "name": "UserSessionListener",
            "package": "java.awt.desktop",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/desktop/UserSessionListener.html",
            "description": "Implementors receive notification when the user session changes. "
        },
        {
            "name": "UsesTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/UsesTree.html",
            "description": "A tree node for an @uses block tag. "
        },
        {
            "name": "UsesTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/UsesTree.html",
            "description": "A tree node for a 'uses' directive in a module declaration. "
        },
        {
            "name": "UTFDataFormatException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/UTFDataFormatException.html",
            "description": "Signals that a malformed string in modified UTF-8 format has been read in a data input stream or by any class that implements the data input interface. "
        },
        {
            "name": "Util",
            "package": "jdk.jshell.execution",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/execution/Util.html",
            "description": "Miscellaneous utility methods for setting-up implementations of ExecutionControl . "
        },
        {
            "name": "Utilities",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/Utilities.html",
            "description": "A collection of methods to deal with various text related activities. "
        },
        {
            "name": "UUID",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/UUID.html",
            "description": "A class that represents an immutable universally unique identifier (UUID). "
        },
        {
            "name": "Validator",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/Validator.html",
            "description": "A processor that checks an XML document against Schema . "
        },
        {
            "name": "ValidatorHandler",
            "package": "javax.xml.validation",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/validation/ValidatorHandler.html",
            "description": "Streaming validator that works on SAX stream. "
        },
        {
            "name": "Value",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/Value.html",
            "description": "The mirror for a value in the target VM. "
        },
        {
            "name": "ValueDescriptor",
            "package": "jdk.jfr",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jfr/jdk/jfr/ValueDescriptor.html",
            "description": "Describes the event fields and annotation elements. "
        },
        {
            "name": "ValueExp",
            "package": "javax.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/ValueExp.html",
            "description": "Represents values that can be passed as arguments to relational expressions. "
        },
        {
            "name": "ValueLayout",
            "package": "jdk.incubator.foreign",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/ValueLayout.html",
            "description": "A value layout. "
        },
        {
            "name": "ValueRange",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/ValueRange.html",
            "description": "The range of valid values for a date-time field. "
        },
        {
            "name": "ValueTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/ValueTree.html",
            "description": "A tree node for an @value inline tag. "
        },
        {
            "name": "VarHandle",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/VarHandle.html",
            "description": "A VarHandle is a dynamically strongly typed reference to a variable, or to a parametrically-defined family of variables, including static fields, non-static fields, array elements, or components of an off-heap data structure. "
        },
        {
            "name": "VarHandle.AccessMode",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html",
            "description": "The set of access modes that specify how a variable, referenced by a VarHandle, is accessed. "
        },
        {
            "name": "VarHandle.VarHandleDesc",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/VarHandle.VarHandleDesc.html",
            "description": "A nominal descriptor for a VarHandle constant. "
        },
        {
            "name": "VariableElement",
            "package": "javax.lang.model.element",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/element/VariableElement.html",
            "description": "Represents a field, enum constant, method or constructor parameter, local variable, resource variable, or exception parameter. "
        },
        {
            "name": "VariableHeightLayoutCache",
            "package": "javax.swing.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/tree/VariableHeightLayoutCache.html",
            "description": "NOTE: This will become more open in a future release. "
        },
        {
            "name": "VariableTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/VariableTree.html",
            "description": "A tree node for a variable declaration. "
        },
        {
            "name": "VarSnippet",
            "package": "jdk.jshell",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jshell/jdk/jshell/VarSnippet.html",
            "description": "Snippet for a variable definition. "
        },
        {
            "name": "Vector",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/Vector.html",
            "description": "The Vector class implements a growable array of objects. "
        },
        {
            "name": "VerifyError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/VerifyError.html",
            "description": "Thrown when the \"verifier\" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem. "
        },
        {
            "name": "VersionTree",
            "package": "com.sun.source.doctree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/doctree/VersionTree.html",
            "description": "A tree node for an @version block tag. "
        },
        {
            "name": "VetoableChangeListener",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/VetoableChangeListener.html",
            "description": "A VetoableChange event gets fired whenever a bean changes a \"constrained\" property. "
        },
        {
            "name": "VetoableChangeListenerProxy",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/VetoableChangeListenerProxy.html",
            "description": "A class which extends the EventListenerProxy specifically for adding a VetoableChangeListener with a \"constrained\" property. "
        },
        {
            "name": "VetoableChangeSupport",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/VetoableChangeSupport.html",
            "description": "This is a utility class that can be used by beans that support constrained properties. "
        },
        {
            "name": "View",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/View.html",
            "description": "A very important part of the text package is the View class. "
        },
        {
            "name": "ViewCSS",
            "package": "org.w3c.dom.css",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/css/ViewCSS.html",
            "description": "This interface represents a CSS view. "
        },
        {
            "name": "ViewFactory",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ViewFactory.html",
            "description": "A factory to create a view of some portion of document subject. "
        },
        {
            "name": "ViewportLayout",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/ViewportLayout.html",
            "description": "The default layout manager for JViewport . "
        },
        {
            "name": "ViewportUI",
            "package": "javax.swing.plaf",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/plaf/ViewportUI.html",
            "description": "Pluggable look and feel interface for JViewport. "
        },
        {
            "name": "VirtualMachine",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VirtualMachine.html",
            "description": "A virtual machine targeted for debugging. "
        },
        {
            "name": "VirtualMachine",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/VirtualMachine.html",
            "description": "A Java virtual machine. "
        },
        {
            "name": "VirtualMachineDescriptor",
            "package": "com.sun.tools.attach",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.attach/com/sun/tools/attach/VirtualMachineDescriptor.html",
            "description": "Describes a Java virtual machine. "
        },
        {
            "name": "VirtualMachineError",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/VirtualMachineError.html",
            "description": "Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating. "
        },
        {
            "name": "VirtualMachineManager",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VirtualMachineManager.html",
            "description": "A manager of connections to target virtual machines. "
        },
        {
            "name": "Visibility",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/Visibility.html",
            "description": "Under some circumstances a bean may be run on servers where a GUI is not available. "
        },
        {
            "name": "VMCannotBeModifiedException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VMCannotBeModifiedException.html",
            "description": "Thrown to indicate that the operation is invalid because it would modify the VM and the VM is read-only. "
        },
        {
            "name": "VMDeathEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/VMDeathEvent.html",
            "description": "Notification of target VM termination. "
        },
        {
            "name": "VMDeathRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/VMDeathRequest.html",
            "description": "Request for notification when the target VM terminates. "
        },
        {
            "name": "VMDisconnectedException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VMDisconnectedException.html",
            "description": "Unchecked exception thrown to indicate that the requested operation cannot be completed because there is no longer a connection to the target VM. "
        },
        {
            "name": "VMDisconnectEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/VMDisconnectEvent.html",
            "description": "Notification of disconnection from target VM. "
        },
        {
            "name": "VMID",
            "package": "java.rmi.dgc",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.rmi/java/rmi/dgc/VMID.html",
            "description": "A VMID is a identifier that is unique across all Java virtual machines. "
        },
        {
            "name": "VMMismatchException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VMMismatchException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed because the a mirror from one target VM is being combined with a mirror from another target VM. "
        },
        {
            "name": "VMOption",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/VMOption.html",
            "description": "Information about a VM option including its value and where the value came from which is referred as its origin . "
        },
        {
            "name": "VMOption.Origin",
            "package": "com.sun.management",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.management/com/sun/management/VMOption.Origin.html",
            "description": "Origin of the value of a VM option. "
        },
        {
            "name": "VMOutOfMemoryException",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VMOutOfMemoryException.html",
            "description": "Thrown to indicate that the requested operation cannot be completed because the target VM has run out of memory. "
        },
        {
            "name": "VMStartEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/VMStartEvent.html",
            "description": "Notification of initialization of a target VM. "
        },
        {
            "name": "VMStartException",
            "package": "com.sun.jdi.connect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/connect/VMStartException.html",
            "description": "A target VM was successfully launched, but terminated with an error before a connection could be established. "
        },
        {
            "name": "VoiceStatus",
            "package": "javax.sound.midi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/sound/midi/VoiceStatus.html",
            "description": "A VoiceStatus object contains information about the current status of one of the voices produced by a Synthesizer . "
        },
        {
            "name": "Void",
            "package": "java.lang",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/Void.html",
            "description": "The Void class is an uninstantiable placeholder class to hold a reference to the Class object representing the Java keyword void. "
        },
        {
            "name": "VoidType",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VoidType.html",
            "description": "The type of all primitive void values accessed in the target VM. "
        },
        {
            "name": "VoidValue",
            "package": "com.sun.jdi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/VoidValue.html",
            "description": "Provides access to a primitive void value in the target VM. "
        },
        {
            "name": "VolatileCallSite",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/VolatileCallSite.html",
            "description": "A VolatileCallSite is a CallSite whose target acts like a volatile variable. "
        },
        {
            "name": "VolatileImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/VolatileImage.html",
            "description": "VolatileImage is an image which can lose its contents at any time due to circumstances beyond the control of the application (e.g., situations caused by the operating system or by other applications). "
        },
        {
            "name": "Watchable",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/Watchable.html",
            "description": "An object that may be registered with a watch service so that it can be watched for changes and events. "
        },
        {
            "name": "WatchEvent",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/WatchEvent.html",
            "description": "An event or a repeated event for an object that is registered with a WatchService . "
        },
        {
            "name": "WatchEvent.Kind",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/WatchEvent.Kind.html",
            "description": "An event kind, for the purposes of identification. "
        },
        {
            "name": "WatchEvent.Modifier",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/WatchEvent.Modifier.html",
            "description": "An event modifier that qualifies how a Watchable is registered with a WatchService . "
        },
        {
            "name": "WatchKey",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/WatchKey.html",
            "description": "A token representing the registration of a watchable object with a WatchService . "
        },
        {
            "name": "WatchpointEvent",
            "package": "com.sun.jdi.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/event/WatchpointEvent.html",
            "description": "Notification of a field triggered event encountered by a thread in the target VM. "
        },
        {
            "name": "WatchpointRequest",
            "package": "com.sun.jdi.request",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.jdi/com/sun/jdi/request/WatchpointRequest.html",
            "description": "Identifies a Field in the target VM being watched. "
        },
        {
            "name": "WatchService",
            "package": "java.nio.file",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/file/WatchService.html",
            "description": "A watch service that watches registered objects for changes and events. "
        },
        {
            "name": "WeakHashMap",
            "package": "java.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/WeakHashMap.html",
            "description": "Hash table based implementation of the Map interface, with weak keys . "
        },
        {
            "name": "WeakReference",
            "package": "java.lang.ref",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/ref/WeakReference.html",
            "description": "Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. "
        },
        {
            "name": "WebRowSet",
            "package": "javax.sql.rowset",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/WebRowSet.html",
            "description": "The standard interface that all implementations of a WebRowSet must implement. "
        },
        {
            "name": "WebSocket",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/WebSocket.html",
            "description": "A WebSocket Client. "
        },
        {
            "name": "WebSocket.Builder",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/WebSocket.Builder.html",
            "description": "A builder of WebSocket Clients . "
        },
        {
            "name": "WebSocket.Listener",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/WebSocket.Listener.html",
            "description": "The receiving interface of WebSocket . "
        },
        {
            "name": "WebSocketHandshakeException",
            "package": "java.net.http",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.net.http/java/net/http/WebSocketHandshakeException.html",
            "description": "Thrown when the opening handshake has failed. "
        },
        {
            "name": "WeekFields",
            "package": "java.time.temporal",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/temporal/WeekFields.html",
            "description": "Localized definitions of the day-of-week, week-of-month and week-of-year fields. "
        },
        {
            "name": "WhileLoopTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/WhileLoopTree.html",
            "description": "A tree node for a while loop statement. "
        },
        {
            "name": "WildcardTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/WildcardTree.html",
            "description": "A tree node for a wildcard type argument. "
        },
        {
            "name": "WildcardType",
            "package": "java.lang.reflect",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/reflect/WildcardType.html",
            "description": "WildcardType represents a wildcard type expression, such as ? , ? extends Number , or ? super Integer . "
        },
        {
            "name": "WildcardType",
            "package": "javax.lang.model.type",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.compiler/javax/lang/model/type/WildcardType.html",
            "description": "Represents a wildcard type argument. "
        },
        {
            "name": "Window",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Window.html",
            "description": "A Window object is a top-level window with no borders and no menubar. "
        },
        {
            "name": "Window.Type",
            "package": "java.awt",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/Window.Type.html",
            "description": "Enumeration of available window types . "
        },
        {
            "name": "WindowAdapter",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/WindowAdapter.html",
            "description": "An abstract adapter class for receiving window events. "
        },
        {
            "name": "WindowConstants",
            "package": "javax.swing",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/WindowConstants.html",
            "description": "Constants used to control the window-closing operation. "
        },
        {
            "name": "WindowEvent",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/WindowEvent.html",
            "description": "A low-level event that indicates that a window has changed its status. "
        },
        {
            "name": "WindowFocusListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/WindowFocusListener.html",
            "description": "The listener interface for receiving WindowEvents , including WINDOW_GAINED_FOCUS and WINDOW_LOST_FOCUS events. "
        },
        {
            "name": "WindowListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/WindowListener.html",
            "description": "The listener interface for receiving window events. "
        },
        {
            "name": "WindowStateListener",
            "package": "java.awt.event",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/event/WindowStateListener.html",
            "description": "The listener interface for receiving window state events. "
        },
        {
            "name": "WrappedPlainView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/WrappedPlainView.html",
            "description": "View of plain text (text with only one font and color) that does line-wrapping. "
        },
        {
            "name": "Wrapper",
            "package": "java.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/java/sql/Wrapper.html",
            "description": "Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance in question is in fact a proxy class. "
        },
        {
            "name": "WritableByteChannel",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/WritableByteChannel.html",
            "description": "A channel that can write bytes. "
        },
        {
            "name": "WritableRaster",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/WritableRaster.html",
            "description": "This class extends Raster to provide pixel writing capabilities. "
        },
        {
            "name": "WritableRenderedImage",
            "package": "java.awt.image",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/awt/image/WritableRenderedImage.html",
            "description": "WritableRenderedImage is a common interface for objects which contain or can produce image data in the form of Rasters and which can be modified and/or written over. "
        },
        {
            "name": "WriteAbortedException",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/WriteAbortedException.html",
            "description": "Signals that one of the ObjectStreamExceptions was thrown during a write operation. "
        },
        {
            "name": "WritePendingException",
            "package": "java.nio.channels",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/nio/channels/WritePendingException.html",
            "description": "Unchecked exception thrown when an attempt is made to write to an asynchronous socket channel and a previous write has not completed. "
        },
        {
            "name": "Writer",
            "package": "java.io",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/io/Writer.html",
            "description": "Abstract class for writing to character streams. "
        },
        {
            "name": "WrongMethodTypeException",
            "package": "java.lang.invoke",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/lang/invoke/WrongMethodTypeException.html",
            "description": "Thrown to indicate that code has attempted to call a method handle via the wrong method type. "
        },
        {
            "name": "X500Principal",
            "package": "javax.security.auth.x500",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/x500/X500Principal.html",
            "description": "This class represents an X.500 Principal . "
        },
        {
            "name": "X500PrivateCredential",
            "package": "javax.security.auth.x500",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/auth/x500/X500PrivateCredential.html",
            "description": "This class represents an X500PrivateCredential . "
        },
        {
            "name": "X509Certificate",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509Certificate.html",
            "description": "Abstract class for X.509 certificates. "
        },
        {
            "name": "X509Certificate",
            "package": "javax.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/security/cert/X509Certificate.html",
            "description": "Use the classes in java.security.cert instead. "
        },
        {
            "name": "X509CertSelector",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509CertSelector.html",
            "description": "A CertSelector that selects X509Certificates that match all specified criteria. "
        },
        {
            "name": "X509CRL",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509CRL.html",
            "description": "Abstract class for an X.509 Certificate Revocation List (CRL). "
        },
        {
            "name": "X509CRLEntry",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509CRLEntry.html",
            "description": "Abstract class for a revoked certificate in a CRL (Certificate Revocation List). "
        },
        {
            "name": "X509CRLSelector",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509CRLSelector.html",
            "description": "A CRLSelector that selects X509CRLs that match all specified criteria. "
        },
        {
            "name": "X509Data",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/X509Data.html",
            "description": "A representation of the XML X509Data element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "X509EncodedKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/X509EncodedKeySpec.html",
            "description": "This class represents the ASN.1 encoding of a public key, encoded according to the ASN.1 type SubjectPublicKeyInfo . "
        },
        {
            "name": "X509ExtendedKeyManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/X509ExtendedKeyManager.html",
            "description": "Abstract class that provides for extension of the X509KeyManager interface. "
        },
        {
            "name": "X509ExtendedTrustManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/X509ExtendedTrustManager.html",
            "description": "Extensions to the X509TrustManager interface to support SSL/TLS/DTLS connection sensitive trust management. "
        },
        {
            "name": "X509Extension",
            "package": "java.security.cert",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/cert/X509Extension.html",
            "description": "Interface for an X.509 extension. "
        },
        {
            "name": "X509IssuerSerial",
            "package": "javax.xml.crypto.dsig.keyinfo",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/keyinfo/X509IssuerSerial.html",
            "description": "A representation of the XML X509IssuerSerial element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "X509KeyManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/X509KeyManager.html",
            "description": "Instances of this interface manage which X509 certificate-based key pairs are used to authenticate the local side of a secure socket. "
        },
        {
            "name": "X509TrustManager",
            "package": "javax.net.ssl",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/javax/net/ssl/X509TrustManager.html",
            "description": "Instance of this interface manage which X509 certificates may be used to authenticate the remote side of a secure socket. "
        },
        {
            "name": "XAConnection",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/XAConnection.html",
            "description": "An object that provides support for distributed transactions. "
        },
        {
            "name": "XAConnectionBuilder",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/XAConnectionBuilder.html",
            "description": "A builder created from a XADataSource object, used to establish a connection to the database that the data source object represents. "
        },
        {
            "name": "XADataSource",
            "package": "javax.sql",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql/javax/sql/XADataSource.html",
            "description": "A factory for XAConnection objects that is used internally. "
        },
        {
            "name": "XAException",
            "package": "javax.transaction.xa",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.transaction.xa/javax/transaction/xa/XAException.html",
            "description": "The XAException is thrown by the Resource Manager (RM) to inform the Transaction Manager of an error encountered by the involved transaction. "
        },
        {
            "name": "XAResource",
            "package": "javax.transaction.xa",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.transaction.xa/javax/transaction/xa/XAResource.html",
            "description": "The XAResource interface is a Java mapping of the industry standard XA interface based on the X/Open CAE Specification (Distributed Transaction Processing: The XA Specification). "
        },
        {
            "name": "XECKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/XECKey.html",
            "description": "An interface for an elliptic curve public/private key as defined by RFC 7748. "
        },
        {
            "name": "XECPrivateKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/XECPrivateKey.html",
            "description": "An interface for an elliptic curve private key as defined by RFC 7748. "
        },
        {
            "name": "XECPrivateKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/XECPrivateKeySpec.html",
            "description": "A class representing elliptic curve private keys as defined in RFC 7748, including the curve and other algorithm parameters. "
        },
        {
            "name": "XECPublicKey",
            "package": "java.security.interfaces",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/interfaces/XECPublicKey.html",
            "description": "An interface for an elliptic curve public key as defined by RFC 7748. "
        },
        {
            "name": "XECPublicKeySpec",
            "package": "java.security.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/security/spec/XECPublicKeySpec.html",
            "description": "A class representing elliptic curve public keys as defined in RFC 7748, including the curve and other algorithm parameters. "
        },
        {
            "name": "Xid",
            "package": "javax.transaction.xa",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.transaction.xa/javax/transaction/xa/Xid.html",
            "description": "The Xid interface is a Java mapping of the X/Open transaction identifier XID structure. "
        },
        {
            "name": "XMLConstants",
            "package": "javax.xml",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/XMLConstants.html",
            "description": "Utility class to contain basic XML values as constants. "
        },
        {
            "name": "XMLCryptoContext",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/XMLCryptoContext.html",
            "description": "Contains common context information for XML cryptographic operations. "
        },
        {
            "name": "XMLDecoder",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/XMLDecoder.html",
            "description": "The XMLDecoder class is used to read XML documents created using the XMLEncoder and is used just like the ObjectInputStream . "
        },
        {
            "name": "XMLEncoder",
            "package": "java.beans",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/java/beans/XMLEncoder.html",
            "description": "The XMLEncoder class is a complementary alternative to the ObjectOutputStream and can used to generate a textual representation of a JavaBean in the same way that the ObjectOutputStream can be used to create binary representation of Serializable objects. "
        },
        {
            "name": "XMLEvent",
            "package": "javax.xml.stream.events",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/events/XMLEvent.html",
            "description": "This is the base event interface for handling markup events. "
        },
        {
            "name": "XMLEventAllocator",
            "package": "javax.xml.stream.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/util/XMLEventAllocator.html",
            "description": "This interface defines a class that allows a user to register a way to allocate events given an XMLStreamReader. "
        },
        {
            "name": "XMLEventConsumer",
            "package": "javax.xml.stream.util",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/util/XMLEventConsumer.html",
            "description": "This interface defines an event consumer interface. "
        },
        {
            "name": "XMLEventFactory",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLEventFactory.html",
            "description": "This interface defines a utility class for creating instances of XMLEvents "
        },
        {
            "name": "XMLEventReader",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLEventReader.html",
            "description": "This is the top level interface for parsing XML Events. "
        },
        {
            "name": "XMLEventWriter",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLEventWriter.html",
            "description": "This is the top level interface for writing XML documents. "
        },
        {
            "name": "XMLFilter",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/XMLFilter.html",
            "description": "Interface for an XML filter. "
        },
        {
            "name": "XMLFilterImpl",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/XMLFilterImpl.html",
            "description": "Base class for deriving an XML filter. "
        },
        {
            "name": "XMLFormatter",
            "package": "java.util.logging",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.logging/java/util/logging/XMLFormatter.html",
            "description": "Format a LogRecord into a standard XML format. "
        },
        {
            "name": "XMLGregorianCalendar",
            "package": "javax.xml.datatype",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/datatype/XMLGregorianCalendar.html",
            "description": "Representation for W3C XML Schema 1.0 date/time datatypes. "
        },
        {
            "name": "XMLInputFactory",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLInputFactory.html",
            "description": "Defines an abstract implementation of a factory for getting streams. "
        },
        {
            "name": "XMLObject",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLObject.html",
            "description": "A representation of the XML Object element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "XMLOutputFactory",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLOutputFactory.html",
            "description": "Defines an abstract implementation of a factory for getting XMLEventWriters and XMLStreamWriters. "
        },
        {
            "name": "XMLParseException",
            "package": "javax.management.modelmbean",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.management/javax/management/modelmbean/XMLParseException.html",
            "description": "This exception is thrown when an XML formatted string is being parsed into ModelMBean objects or when XML formatted strings are being created from ModelMBean objects. "
        },
        {
            "name": "XmlReader",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/XmlReader.html",
            "description": "A specialized interface that facilitates an extension of the SyncProvider abstract class for XML orientated synchronization providers. "
        },
        {
            "name": "XMLReader",
            "package": "org.xml.sax",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/XMLReader.html",
            "description": "Interface for reading an XML document using callbacks. "
        },
        {
            "name": "XMLReaderAdapter",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/XMLReaderAdapter.html",
            "description": "Adapt a SAX2 XMLReader as a SAX1 Parser. "
        },
        {
            "name": "XMLReaderFactory",
            "package": "org.xml.sax.helpers",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/org/xml/sax/helpers/XMLReaderFactory.html",
            "description": "It is recommended to use SAXParserFactory instead. "
        },
        {
            "name": "XMLReporter",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLReporter.html",
            "description": "This interface is used to report non-fatal errors. "
        },
        {
            "name": "XMLResolver",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLResolver.html",
            "description": "This interface is used to resolve resources during an XML parse. "
        },
        {
            "name": "XMLSignature",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignature.html",
            "description": "A representation of the XML Signature element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "XMLSignature.SignatureValue",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignature.SignatureValue.html",
            "description": "A representation of the XML SignatureValue element as defined in the W3C Recommendation for XML-Signature Syntax and Processing . "
        },
        {
            "name": "XMLSignatureException",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignatureException.html",
            "description": "Indicates an exceptional condition that occurred during the XML signature generation or validation process. "
        },
        {
            "name": "XMLSignatureFactory",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignatureFactory.html",
            "description": "A factory for creating XMLSignature objects from scratch or for unmarshalling an XMLSignature object from a corresponding XML representation. "
        },
        {
            "name": "XMLSignContext",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignContext.html",
            "description": "Contains context information for generating XML Signatures. "
        },
        {
            "name": "XMLStreamConstants",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLStreamConstants.html",
            "description": "This interface declares the constants used in this API. "
        },
        {
            "name": "XMLStreamException",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLStreamException.html",
            "description": "The base exception for unexpected processing errors. "
        },
        {
            "name": "XMLStreamReader",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLStreamReader.html",
            "description": "The XMLStreamReader interface allows forward, read-only access to XML. "
        },
        {
            "name": "XMLStreamWriter",
            "package": "javax.xml.stream",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/stream/XMLStreamWriter.html",
            "description": "The XMLStreamWriter interface specifies how to write XML. "
        },
        {
            "name": "XMLStructure",
            "package": "javax.xml.crypto",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/XMLStructure.html",
            "description": "A representation of an XML structure from any namespace. "
        },
        {
            "name": "XMLValidateContext",
            "package": "javax.xml.crypto.dsig",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLValidateContext.html",
            "description": "Contains context information for validating XML Signatures. "
        },
        {
            "name": "XmlWriter",
            "package": "javax.sql.rowset.spi",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.sql.rowset/javax/sql/rowset/spi/XmlWriter.html",
            "description": "A specialized interface that facilitates an extension of the SyncProvider abstract class for XML orientated synchronization providers. "
        },
        {
            "name": "XPath",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPath.html",
            "description": "XPath provides access to the XPath evaluation environment and expressions. "
        },
        {
            "name": "XPathConstants",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathConstants.html",
            "description": "XPath constants. "
        },
        {
            "name": "XPathEvaluationResult",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathEvaluationResult.html",
            "description": "The XPathEvaluationResult interface represents the result of the evaluation of an XPath expression within the context of a particular node. "
        },
        {
            "name": "XPathEvaluationResult.XPathResultType",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathEvaluationResult.XPathResultType.html",
            "description": "XPathResultType represents possible return types of an XPath evaluation. "
        },
        {
            "name": "XPathEvaluator",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathEvaluator.html",
            "description": "The evaluation of XPath expressions is provided by XPathEvaluator . "
        },
        {
            "name": "XPathException",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathException.html",
            "description": "XPathException represents a generic XPath exception. "
        },
        {
            "name": "XPathException",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathException.html",
            "description": "A new exception has been created for exceptions specific to these XPath interfaces. "
        },
        {
            "name": "XPathExpression",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathExpression.html",
            "description": "XPathExpression provides access to compiled XPath expressions. "
        },
        {
            "name": "XPathExpression",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathExpression.html",
            "description": "The XPathExpression interface represents a parsed and resolved XPath expression. "
        },
        {
            "name": "XPathExpressionException",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathExpressionException.html",
            "description": "XPathExpressionException represents an error in an XPath expression. "
        },
        {
            "name": "XPathFactory",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathFactory.html",
            "description": "An XPathFactory instance can be used to create XPath objects. "
        },
        {
            "name": "XPathFactoryConfigurationException",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathFactoryConfigurationException.html",
            "description": "XPathFactoryConfigurationException represents a configuration error in a XPathFactory environment. "
        },
        {
            "name": "XPathFilter2ParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/XPathFilter2ParameterSpec.html",
            "description": "Parameters for the W3C Recommendation XPath Filter 2.0 Transform Algorithm . "
        },
        {
            "name": "XPathFilterParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/XPathFilterParameterSpec.html",
            "description": "Parameters for the XPath Filtering Transform Algorithm . "
        },
        {
            "name": "XPathFunction",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathFunction.html",
            "description": "XPathFunction provides access to XPath functions. "
        },
        {
            "name": "XPathFunctionException",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathFunctionException.html",
            "description": "XPathFunctionException represents an error with an XPath function. "
        },
        {
            "name": "XPathFunctionResolver",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathFunctionResolver.html",
            "description": "XPathFunctionResolver provides access to the set of user defined XPathFunction s. "
        },
        {
            "name": "XPathNamespace",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathNamespace.html",
            "description": "The XPathNamespace interface is returned by XPathResult interfaces to represent the XPath namespace node type that DOM lacks. "
        },
        {
            "name": "XPathNodes",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathNodes.html",
            "description": "XPathNodes represents a set of nodes selected by a location path as specified in XML Path Language (XPath) Version 1.0, 3.3 Node-sets . "
        },
        {
            "name": "XPathNSResolver",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathNSResolver.html",
            "description": "The XPathNSResolver interface permit prefix strings in the expression to be properly bound to namespaceURI strings. "
        },
        {
            "name": "XPathResult",
            "package": "org.w3c.dom.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.xml.dom/org/w3c/dom/xpath/XPathResult.html",
            "description": "The XPathResult interface represents the result of the evaluation of an XPath 1.0 expression within the context of a particular node. "
        },
        {
            "name": "XPathType",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/XPathType.html",
            "description": "The XML Schema Definition of the XPath element as defined in the W3C Recommendation for XML-Signature XPath Filter 2.0 : "
        },
        {
            "name": "XPathType.Filter",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/XPathType.Filter.html",
            "description": "Represents the filter set operation. "
        },
        {
            "name": "XPathVariableResolver",
            "package": "javax.xml.xpath",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml/javax/xml/xpath/XPathVariableResolver.html",
            "description": "XPathVariableResolver provides access to the set of user defined XPath variables. "
        },
        {
            "name": "XSLTTransformParameterSpec",
            "package": "javax.xml.crypto.dsig.spec",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.xml.crypto/javax/xml/crypto/dsig/spec/XSLTTransformParameterSpec.html",
            "description": "Parameters for the XSLT Transform Algorithm . "
        },
        {
            "name": "Year",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/Year.html",
            "description": "A year in the ISO-8601 calendar system, such as 2007 . "
        },
        {
            "name": "YearMonth",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/YearMonth.html",
            "description": "A year-month in the ISO-8601 calendar system, such as 2007-12 . "
        },
        {
            "name": "YieldTree",
            "package": "com.sun.source.tree",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/jdk.compiler/com/sun/source/tree/YieldTree.html",
            "description": "A tree node for a yield statement. "
        },
        {
            "name": "ZipEntry",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipEntry.html",
            "description": "This class is used to represent a ZIP file entry. "
        },
        {
            "name": "ZipError",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipError.html",
            "description": "Signals that an unrecoverable error has occurred. "
        },
        {
            "name": "ZipException",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipException.html",
            "description": "Signals that a Zip exception of some sort has occurred. "
        },
        {
            "name": "ZipFile",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipFile.html",
            "description": "This class is used to read entries from a zip file. "
        },
        {
            "name": "ZipInputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipInputStream.html",
            "description": "This class implements an input stream filter for reading files in the ZIP file format. "
        },
        {
            "name": "ZipOutputStream",
            "package": "java.util.zip",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/util/zip/ZipOutputStream.html",
            "description": "This class implements an output stream filter for writing files in the ZIP file format. "
        },
        {
            "name": "ZonedDateTime",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/ZonedDateTime.html",
            "description": "A date-time with a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 Europe/Paris . "
        },
        {
            "name": "ZoneId",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/ZoneId.html",
            "description": "A time-zone ID, such as Europe/Paris . "
        },
        {
            "name": "ZoneOffset",
            "package": "java.time",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/ZoneOffset.html",
            "description": "A time-zone offset from Greenwich/UTC, such as +02:00 . "
        },
        {
            "name": "ZoneOffsetTransition",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneOffsetTransition.html",
            "description": "A transition between two offsets caused by a discontinuity in the local time-line. "
        },
        {
            "name": "ZoneOffsetTransitionRule",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneOffsetTransitionRule.html",
            "description": "A rule expressing how to create a transition. "
        },
        {
            "name": "ZoneOffsetTransitionRule.TimeDefinition",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneOffsetTransitionRule.TimeDefinition.html",
            "description": "A definition of the way a local time can be converted to the actual transition date-time. "
        },
        {
            "name": "ZoneRules",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneRules.html",
            "description": "The rules defining how the zone offset varies for a single time-zone. "
        },
        {
            "name": "ZoneRulesException",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneRulesException.html",
            "description": "Thrown to indicate a problem with time-zone configuration. "
        },
        {
            "name": "ZoneRulesProvider",
            "package": "java.time.zone",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.base/java/time/zone/ZoneRulesProvider.html",
            "description": "Provider of time-zone rules to the system. "
        },
        {
            "name": "ZoneView",
            "package": "javax.swing.text",
            "link": "C:/Users/karthik chandra/Desktop/CS/DEMO/docs/api/java.desktop/javax/swing/text/ZoneView.html",
            "description": "ZoneView is a View implementation that creates zones for which the child views are not created or stored until they are needed for display or model/view translations. "
        }
    ]
}